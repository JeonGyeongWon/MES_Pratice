<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">



<sqlMap namespace="search">

<parameterMap class="java.util.Map" id="sendKakaoParams">
        <parameter property="P_ORG_ID" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
        <parameter property="P_COMPANY_ID" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
        <parameter property="P_EMPLOYEE" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
        <parameter property="P_FOREIGN_KEY1" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
        <parameter property="P_FOREIGN_KEY2" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
        <parameter property="P_FLAG" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
        <parameter property="P_LOGIN" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
        <parameter property="RS_CODE" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
        <parameter property="RS_STATUS" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
    </parameterMap>
    
    <procedure id="cb_kakao_insert.Procedure" parameterClass="java.util.Map"  parameterMap="sendKakaoParams" resultClass="java.util.HashMap" >
    <![CDATA[
              {call CB_KAKAO_PKG.CB_KAKAO_INSERT( ?, ?, ?, ?, ?, ?, ?, ?, ? ) }
       ]]>
    </procedure>
    
 <select id="search.calendar.find.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
     SELECT COUNT(*) AS COUNT
      FROM CB_CALENDAR CC
     WHERE CC.ORG_ID = #ORGID#
        AND CC.COMPANY_ID = #COMPANYID#
        AND CC.STANDARD_MONTH = TO_DATE(#STANDARDDATE#, 'YYYYMMDD')
  </select>
  
    <!-- 로그인시 권한별 최초 메뉴 번호 가져오는 쿼리 추가 -->
    <select id="search.login.first.menu.list.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
        SELECT MENU_NO AS MENUNO
          FROM (
              SELECT LMC.MENU_NO AS MENU_NO
                FROM LETTNMENUCREATDTLS LMC
                    ,LETTNMENUINFO LMI
               WHERE LMC.MENU_NO = LMI.MENU_NO
                 AND LMC.AUTHOR_CODE = #AUTHORCODE#
               ORDER BY LMI.UPPER_MENU_NO, LMI.MENU_ORDR
               ) A
         WHERE ROWNUM = 1
    </select>

  <!-- ORG Lov 시작 -->
    <sql id="search.org.lov.sql-select">
        SELECT ORG_ID AS VALUE , ORG_CODE AS ORGCODE , ORG_NAME AS LABEL
      FROM CB_ORG 
    </sql>

    <sql id="search.org.lov.sql-where">
         WHERE 1 = 1
        <isNotEmpty property="ORGID" prepend="AND">
             ORG_ID = #ORGID#
        </isNotEmpty>
    </sql>

    <select id="search.org.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
          <include refid="search.org.lov.sql-select" />
          <include refid="search.org.lov.sql-where" />
            ORDER BY 1
    </select>

    <select id="search.org.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
          <include refid="search.org.lov.sql-select" />
          <include refid="search.org.lov.sql-where" />
        ) TOT
    </select>
    <!-- Org Lov 끝 -->
 
   <!-- COMPANY Lov 시작 -->
    <sql id="search.company.lov.sql-select">
        SELECT COMPANY_ID AS VALUE , COMPANY_NAME AS LABEL
      FROM CB_COMPANY 
    </sql>

    <sql id="search.company.lov.sql-where">
         WHERE 1 = 1
        <isNotEmpty property="ORGID" prepend="AND">
             ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
             COMPANY_ID = #COMPANYID#
        </isNotEmpty>
    </sql>

    <select id="search.company.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
          <include refid="search.company.lov.sql-select" />
          <include refid="search.company.lov.sql-where" />
            ORDER BY 1
    </select>

    <select id="search.company.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
          <include refid="search.company.lov.sql-select" />
          <include refid="search.company.lov.sql-where" />
        ) TOT
    </select>
    <!-- company Lov 끝 -->

  <!--  login 사용자의 org , company 정보  시작 -->
    <sql id="search.login.lov.sql-select">
        SELECT CHM.ORG_ID AS ORGID , CHM.COMPANY_ID AS COMPANYID
      FROM CB_HUMANRESOURCE_MANAGER_V CHM, COMVNUSERMASTER CM
    </sql>

    <sql id="search.login.lov.sql-where">
         WHERE CHM.EMPLOYEE_NUMBER(+) = CM.USER_ID
        <isNotEmpty property="USERID" prepend="AND">
             CM.USER_ID = #USERID#
        </isNotEmpty>
    </sql>

    <select id="search.login.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
          <include refid="search.login.lov.sql-select" />
          <include refid="search.login.lov.sql-where" />
            ORDER BY 1
    </select>

    <select id="search.login.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
          <include refid="search.login.lov.sql-select" />
          <include refid="search.login.lov.sql-where" />
        ) TOT
    </select>
    <!-- login 사용자의 org , company 정보  Lov 끝 -->

  <!--  설비 사용자의 org , company 정보  시작 -->
    <sql id="search.equipment.login.lov.sql-select">
        SELECT WC.ORG_ID AS ORGID
                 ,WC.COMPANY_ID AS COMPANYID
                 ,WC.WORK_DEPT AS WORKDEPT
                 ,WC.WORK_CENTER_CODE AS WORKCENTERCODE
				  FROM COMVNUSERMASTER CM
				          ,CB_WORK_CENTER WC
    </sql>

    <sql id="search.equipment.login.lov.sql-where">
         WHERE CM.USER_ID = WC.WORK_CENTER_CODE(+)
        <isNotEmpty property="USERID" prepend="AND">
             CM.USER_ID = #USERID#
        </isNotEmpty>
    </sql>

    <select id="search.equipment.login.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
          <include refid="search.equipment.login.lov.sql-select" />
          <include refid="search.equipment.login.lov.sql-where" />
            ORDER BY 1
    </select>

    <select id="search.equipment.login.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
          <include refid="search.equipment.login.lov.sql-select" />
          <include refid="search.equipment.login.lov.sql-where" />
        ) TOT
    </select>
    <!-- 설비 사용자의 org , company 정보  Lov 끝 -->

    <!-- 작업지시투입관리 화면에서의 품목  Lov 2016.11.30  -->
    <sql id="search.item.name.lov.sql-select">
        SELECT /*+ rule */
                 RANK() OVER(ORDER BY IM.GROUP_CODE, IM.ITEM_NAME, IM.ITEM_CODE) AS RN,
                 IM.ORG_ID AS ORGID,
                 IM.COMPANY_ID AS COMPANYID,
                 IM.ITEM_CODE AS ITEMCODE,
                 IM.ITEM_NAME AS ITEMNAME,
                 IM.ORDER_NAME AS ORDERNAME,
                 IM.ITEM_TYPE AS ITEMTYPE,
                 (SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CODE SC
                   WHERE SC.ORG_ID = IM.ORG_ID
                     AND SC.COMPANY_ID = IM.COMPANY_ID
                     AND SC.BIG_CODE = 'CMM'
                     AND SC.MIDDLE_CODE = 'ITEM_TYPE'
                     AND SC.SMALL_CODE = IM.ITEM_TYPE) AS ITEMTYPENAME,
                 IM.UOM AS UOM,
                 (SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CODE SC
                   WHERE SC.ORG_ID = IM.ORG_ID
                     AND SC.COMPANY_ID = IM.COMPANY_ID
                     AND SC.BIG_CODE = 'CMM'
                     AND SC.MIDDLE_CODE = 'UOM'
                     AND SC.SMALL_CODE = IM.UOM) AS UOMNAME,
                 IM.CAR_TYPE AS MODEL,
                 (SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CODE SC
                   WHERE SC.ORG_ID = IM.ORG_ID
                     AND SC.COMPANY_ID = IM.COMPANY_ID
                     AND SC.BIG_CODE = 'CMM'
                     AND SC.MIDDLE_CODE = 'MODEL'
                     AND SC.SMALL_CODE = IM.CAR_TYPE) AS MODELNAME,
                 IM.CUSTOMER_GUBUN AS CUSTOMERGUBUN,
                 (SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CODE SC
                   WHERE SC.ORG_ID = IM.ORG_ID
                     AND SC.COMPANY_ID = IM.COMPANY_ID
                     AND SC.BIG_CODE = 'CMM'
                     AND SC.MIDDLE_CODE = 'CUSTOMER_GUBUN'
                     AND SC.SMALL_CODE = IM.CUSTOMER_GUBUN) AS CUSTOMERGUBUNNAME,
                 IM.CUSTOMER_CODE AS CUSTOMERCODE,
                 (SELECT CC.CUSTOMER_NAME
                    FROM CB_CUSTOMER CC
                   WHERE CC.ORG_ID = IM.ORG_ID
                     AND CC.COMPANY_ID = IM.COMPANY_ID
                     AND CC.CUSTOMER_CODE = IM.CUSTOMER_CODE) AS CUSTOMERNAME,
                 IM.ITEM_STANDARD AS ITEMSTANDARD,
                 IM.MATERIAL_TYPE AS MATERIALTYPE,
                 DECODE(IM.ITEM_TYPE
                           ,'M', IM.ORDER_NAME
                           ,'T', IM.ITEM_STANDARD
                           ,IM.ORDER_NAME) AS ITEMGUBUN,
                 IM.DRAWING_NO AS DRAWINGNO,
                 IM.ITEM_STANDARD_DETAIL AS ITEMSTANDARDDETAIL
          FROM CB_ITEM_MASTER IM
    </sql>
    
    <sql id="search.item.name.lov.sql-where">
         WHERE SYSDATE BETWEEN IM.EFFECTIVE_START_DATE AND IM.EFFECTIVE_END_DATE
        <isNotEmpty property="ORGID" prepend="AND">
            IM.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            IM.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
<!--         GUBUN 값이 들어있으면 제품, 반제품만 조회 -->
        <isNotEmpty property="GUBUN" prepend="AND">
<!--             IM.ITEM_TYPE IN ('A') -->
                IM.ITEM_TYPE IN (SELECT SC.SMALL_CODE
                                       FROM CB_SMALL_CODE SC
                                      WHERE SC.ORG_ID = IM.ORG_ID
                                         AND SC.COMPANY_ID = IM.COMPANY_ID
                                         AND SC.BIG_CODE = 'CMM'
                                         AND SC.MIDDLE_CODE = 'ITEM_TYPE'
                                         AND SC.ATTRIBUTE1 IN ( 'A', 'Z' ) )
           AND IM.GROUP_CODE = 'A'
          <isNotEmpty property="keyword">
            <isNotEqual property="keyword" compareValue="%">
              <isEqual property="GUBUN" compareValue="ORDERNAME" prepend="AND">
                IM.ORDER_NAME LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="GUBUN" compareValue="ITEMNAME" prepend="AND">
                IM.ITEM_NAME LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="GUBUN" compareValue="ITEMCODE" prepend="AND">
                IM.ITEM_CODE LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="GUBUN" compareValue="KORITEMNAME" prepend="AND">
                IM.ITEM_NAME_K LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="GUBUN" compareValue="DRAWINGNO" prepend="AND">
                IM.DRAWING_NO LIKE '%' || #keyword# || '%'
              </isEqual>
            </isNotEqual>
          </isNotEmpty>
        </isNotEmpty>
        <isNotEmpty property="MATGUBUN" prepend="AND">
                IM.ITEM_TYPE IN (SELECT SC.SMALL_CODE
                                       FROM CB_SMALL_CODE SC
                                      WHERE SC.ORG_ID = IM.ORG_ID
                                         AND SC.COMPANY_ID = IM.COMPANY_ID
                                         AND SC.BIG_CODE = 'CMM'
                                         AND SC.MIDDLE_CODE = 'ITEM_TYPE'
                                         AND SC.ATTRIBUTE1 IN ( 'M', 'Z' ) )
           AND IM.GROUP_CODE = 'M'
          <isNotEmpty property="keyword">
            <isNotEqual property="keyword" compareValue="%">
              <isEqual property="MATGUBUN" compareValue="ORDERNAME" prepend="AND">
                IM.ORDER_NAME LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="MATGUBUN" compareValue="ITEMNAME" prepend="AND">
                IM.ITEM_NAME LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="MATGUBUN" compareValue="ITEMCODE" prepend="AND">
                IM.ITEM_CODE LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="GUBUN" compareValue="DRAWINGNO" prepend="AND">
                IM.DRAWING_NO LIKE '%' || #keyword# || '%'
              </isEqual>
            </isNotEqual>
          </isNotEmpty>
        </isNotEmpty>
        <isNotEmpty property="TOOLGUBUN" prepend="AND">
                IM.ITEM_TYPE IN (SELECT SC.SMALL_CODE
                                       FROM CB_SMALL_CODE SC
                                      WHERE SC.ORG_ID = IM.ORG_ID
                                         AND SC.COMPANY_ID = IM.COMPANY_ID
                                         AND SC.BIG_CODE = 'CMM'
                                         AND SC.MIDDLE_CODE = 'ITEM_TYPE'
                                         AND SC.ATTRIBUTE1 IN ( 'T', 'Z' ) )
           AND IM.GROUP_CODE = 'T'
          <isNotEmpty property="keyword">
            <isNotEqual property="keyword" compareValue="%">
              <isEqual property="TOOLGUBUN" compareValue="ORDERNAME" prepend="AND">
                IM.ORDER_NAME LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="TOOLGUBUN" compareValue="ITEMNAME" prepend="AND">
                IM.ITEM_NAME LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="TOOLGUBUN" compareValue="ITEMCODE" prepend="AND">
                IM.ITEM_CODE LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="TOOLBUGUN" compareValue="ITEMSTANDARD" prepend="AND">
                IM.ITEM_STANDARD LIKE '%' || #keyword# || '%'
              </isEqual>
              
              <isEqual property="GUBUN" compareValue="DRAWINGNO" prepend="AND">
                IM.DRAWING_NO LIKE '%' || #keyword# || '%'
              </isEqual>
            </isNotEqual>
          </isNotEmpty>
        </isNotEmpty>
        <isNotEmpty property="BOMGUBUN" prepend="AND">
                IM.ITEM_TYPE IN (SELECT SC.SMALL_CODE
                                       FROM CB_SMALL_CODE SC
                                      WHERE SC.ORG_ID = IM.ORG_ID
                                         AND SC.COMPANY_ID = IM.COMPANY_ID
                                         AND SC.BIG_CODE = 'CMM'
                                         AND SC.MIDDLE_CODE = 'ITEM_TYPE'
                                         AND (SC.ATTRIBUTE1 = 'M' 
                                           OR SC.SMALL_CODE = 'C'))
          <isNotEmpty property="keyword">
            <isNotEqual property="keyword" compareValue="%">
              <isEqual property="BOMGUBUN" compareValue="ORDERNAME" prepend="AND">
                IM.ORDER_NAME LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="BOMGUBUN" compareValue="ITEMNAME" prepend="AND">
                IM.ITEM_NAME LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="BOMGUBUN" compareValue="ITEMCODE" prepend="AND">
                IM.ITEM_CODE LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="GUBUN" compareValue="DRAWINGNO" prepend="AND">
                IM.DRAWING_NO LIKE '%' || #keyword# || '%'
              </isEqual>
            </isNotEqual>
          </isNotEmpty>
        </isNotEmpty>
        <isNotEmpty property="SHIP_GUBUN" prepend="AND">
<!--      2016.12.30   SHIPGUBUN 값이 들어있으면   조회 -->
            IM.ITEM_TYPE =  #SHIP_GUBUN#
        </isNotEmpty>
        <isNotEmpty property="ITEMCODE" prepend="AND">
            IM.ITEM_CODE = #ITEMCODE#
        </isNotEmpty>
        <isNotEmpty property="ITEMNAME" prepend="AND">
            IM.ITEM_NAME LIKE '%' || #ITEMNAME# || '%'
        </isNotEmpty>
        <isNotEmpty property="ORDERNAME" prepend="AND">
            IM.ORDER_NAME LIKE '%' || #ORDERNAME# || '%'
        </isNotEmpty>
        <isNotEmpty property="ITEMNAME2" prepend="AND">
            IM.ITEM_NAME =  #ITEMNAME2#
        </isNotEmpty>
        <isNotEmpty property="ORDERNAME2" prepend="AND">
            (IM.ORDER_NAME =  #ORDERNAME2#
            OR IM.MANAGEMENT_NUMBER =  #ORDERNAME2#)
        </isNotEmpty>
        <!-- <isNotEmpty property="keyword" prepend="AND">
            <isNotEqual property="keyword" compareValue="%">
                IM.ITEM_CODE LIKE '%' || #keyword# || '%'
            </isNotEqual>
        </isNotEmpty> -->
         
        <isNotEmpty property="ITEMTYPE" prepend="AND">
            IM.ITEM_TYPE = #ITEMTYPE#
        </isNotEmpty>
        <isNotEmpty property="CUSTOMERCODE" prepend="AND">
            IM.CUSTOMER_CODE = #CUSTOMERCODE#
        </isNotEmpty>
        <isNotEmpty property="BIGCODE" prepend="AND">
            IM.BIG_CODE = #BIGCODE#
        </isNotEmpty>
        <isNotEmpty property="OUTORDERGUBUN" prepend="AND">
            IM.ITEM_CODE IN (SELECT RC.ITEM_CODE
					                          FROM CB_ROUTING_CONTROL RC
					                         WHERE RC.ORG_ID = IM.ORG_ID
					                           AND RC.COMPANY_ID = IM.COMPANY_ID
					                           AND RC.ITEM_CODE = IM.ITEM_CODE
					                           AND TRUNC(SYSDATE, 'DD') BETWEEN RC.EFFECTIVE_START_DATE AND RC.EFFECTIVE_END_DATE
					                           AND RC.OUTSIDE_ORDER_GUBUN = 'Y'
					                           AND RC.ROUTING_NO IN (SELECT SC.SMALL_CODE
										                                                   FROM CB_SMALL_CODE SC
										                                                  WHERE SC.ORG_ID = RC.ORG_ID
										                                                    AND SC.COMPANY_ID = RC.COMPANY_ID
										                                                    AND SC.BIG_CODE = 'MFG'
										                                                    AND SC.MIDDLE_CODE = 'ROUTING_NAME'
										                                                    AND SC.ATTRIBUTE1 = '08'))
        </isNotEmpty>
    </sql>

    <select id="search.item.name.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap" remapResults="true">
            <include refid="search.item.name.lov.sql-select" />
            <include refid="search.item.name.lov.sql-where" />
    </select>
    
    <select id="search.item.name.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.item.name.lov.sql-select" />
            <include refid="search.item.name.lov.sql-where" />
        ) TOT
    </select>
    <!-- 작업지시투입관리 화면에서의 품목  Lov 끝 2016.11.30  -->

   <!--작업지시투입관리 화면에서의 작업지시번호 가져오기 2016.11.30-->
    <sql id="search.workno.list.lov.sql-select">
        SELECT PH.WORK_ORDER_ID AS WORKORDERID,
               REMARKS               
          FROM CB_WORK_ORDER_HEADER PH 
    </sql>

    <sql id="search.workno.list.lov.sql-where">
         WHERE 1 = 1
          <isNotEmpty property="ORGID" prepend="AND">
            PH.ORG_ID = #ORGID#
        </isNotEmpty>
          <isNotEmpty property="COMPANYID" prepend="AND">
            PH.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
          <isNotEmpty property="WORKSTATUS" prepend="AND">
            PH.WORK_STATUS = #WORKSTATUS#
        </isNotEmpty>
        <isNotEmpty property="WORKPLANDATE" prepend="AND">
            TO_DATE(#WORKPLANDATE#,'YYYY-MM-DD') BETWEEN NVL(WORK_PLAN_START_DATE,TO_DATE('2011-01-01','YYYY-MM-DD')) AND NVL(WORK_PLAN_END_DATE,TO_DATE('4999-12-31','YYYY-MM-DD'))
         </isNotEmpty>
         <isNotEmpty property="WORKDATE" prepend="AND">
            TO_DATE(#WORKDATE#,'YYYY-MM-DD') BETWEEN NVL(WORK_START_DATE,TO_DATE('2011-01-01','YYYY-MM-DD')) AND NVL(WORK_END_DATE,TO_DATE('4999-12-31','YYYY-MM-DD'))
         </isNotEmpty>
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                PH.WORK_ORDER_ID LIKE  #keyword# || '%'
            </isNotEqual>
        </isNotEmpty>
    </sql>

    <select id="search.workno.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.workno.list.lov.sql-select" />
            <include refid="search.workno.list.lov.sql-where" />
            ORDER BY   PH.WORK_ORDER_ID 
    </select>

    <select id="search.workno.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.workno.list.lov.sql-select" />
            <include refid="search.workno.list.lov.sql-where" />
        ) TOT
    </select>
   <!--작업지시투입관리 화면에서의 작업지시번호 가져오기 2016.11.30-->

   <!--작업지시투입관리 화면에서의 품목별 공정명 가져오기 2016.12.01-->
   <sql id="search.routingitem.name.lov.sql-select">
        SELECT RC.ROUTING_ID AS ROUTINGCODE,
                 RC.ROUTING_NO AS ROUTINGNO,
                 (SELECT SC.SMALL_NAME
                     FROM CB_SMALL_CODE SC
                    WHERE SC.ORG_ID = RC.ORG_ID
                      AND SC.COMPANY_ID = RC.COMPANY_ID
                      AND SC.BIG_CODE = 'MFG'
                      AND SC.MIDDLE_CODE = 'ROUTING_NAME'
                      AND SC.SMALL_CODE = RC.ROUTING_NO)  AS ROUTINGNAME,
                 RC.SORT_ORDER    AS SORTORDER,
                 RC.ROUTING_OP AS ROUTINGOP
        FROM CB_ROUTING_CONTROL RC
    </sql>

    <sql id="search.routingitem.name.lov.sql-where">
         WHERE SYSDATE BETWEEN EFFECTIVE_START_DATE AND EFFECTIVE_END_DATE
            AND RC.ITEM_CODE = #ITEMCODE#
        <isNotEmpty property="ORGID" prepend="AND">
                RC.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
                RC.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="ROUTINGID" prepend="AND">
                RC.ROUTING_ID = #ROUTINGID#
        </isNotEmpty>
        <isNotEmpty property="keyword">
            <isNotEqual property="keyword" compareValue="%">
              <isEqual property="GUBUN" compareValue="ROUTINGNAME" prepend="AND">
                RC.ROUTING_NAME LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="GUBUN" compareValue="ROUTINGNO" prepend="AND">
                RC.ROUTING_NO LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="GUBUN" compareValue="ROUTINGID" prepend="AND">
                RC.ROUTING_ID LIKE '%' || #keyword# || '%'
              </isEqual>
            </isNotEqual>
        </isNotEmpty>
        <isNotEmpty property="SEARCHGUBUN" prepend="AND">
               ( RC.ITEM_CODE, RC.ROUTING_ID ) IN (SELECT TV.ROUTING_ITEM_CODE, TV.ROUTING_ID
											                                           FROM CB_TOOL_CHECK_MASTER_V TV
											                                          WHERE TV.ROUTING_ITEM_CODE = #ITEMCODE#
																											        <isNotEmpty property="ORGID" prepend="AND">
																											                TV.ORG_ID = #ORGID#
																											        </isNotEmpty>
																											        <isNotEmpty property="COMPANYID" prepend="AND">
																											                TV.COMPANY_ID = #COMPANYID#
																											        </isNotEmpty>
																											        <isNotEmpty property="ROUTINGID" prepend="AND">
																											                TV.ROUTING_ID = #ROUTINGID#
																											        </isNotEmpty>
                                                              <isNotEmpty property="SEARCHTO" prepend="AND">
                                                                      TO_DATE(#SEARCHTO#, 'YYYY-MM-DD') BETWEEN EFFECTIVE_START_DATE AND EFFECTIVE_END_DATE
                                                              </isNotEmpty>
											                                         )
        </isNotEmpty>
        <isNotEmpty property="OUTORDERGUBUN" prepend="AND">
                  RC.OUTSIDE_ORDER_GUBUN = 'Y'
            AND RC.ROUTING_NO IN (SELECT SC.SMALL_CODE
                                              FROM CB_SMALL_CODE SC
                                             WHERE SC.ORG_ID = RC.ORG_ID
                                               AND SC.COMPANY_ID = RC.COMPANY_ID
                                               AND SC.BIG_CODE = 'MFG'
                                               AND SC.MIDDLE_CODE = 'ROUTING_NAME'
                                               AND SC.ATTRIBUTE1 = '08')
        </isNotEmpty>
        ORDER BY  RC.SORT_ORDER
    </sql>

    <select id="search.routingitem.name.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.routingitem.name.lov.sql-select" />
            <include refid="search.routingitem.name.lov.sql-where" />
    </select>

    <select id="search.routingitem.name.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.routingitem.name.lov.sql-select" />
            <include refid="search.routingitem.name.lov.sql-where" />
        ) TOT
    </select>
   <!--작업지시투입관리 화면에서의 품목별 공정명 가져오기 2016.12.01-->

   <!--작업지시투입관리 화면에서의 설비명 가져오기 2016.12.01-->
   <sql id="search.workcenter.name.lov.sql-select">
        SELECT RANK() OVER(ORDER BY WC.ORG_ID, WC.COMPANY_ID, WC.SEQ, WC.WORK_DEPT, WC.WORK_CENTER_CODE) AS RN
                ,WC.ORG_ID AS ORGID
                ,WC.COMPANY_ID AS COMPANYID
                ,WC.WORK_CENTER_CODE AS VALUE
                ,WC.WORK_CENTER_NAME AS LABEL
                ,WC.MODEL_STANDARD AS MODELSTANDARD
                ,WC.WORK_DEPT AS WORKDEPT
                ,(SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CODE SC
                   WHERE SC.ORG_ID = WC.ORG_ID
                     AND SC.COMPANY_ID = WC.COMPANY_ID
                     AND SC.BIG_CODE = 'CMM'
                     AND SC.MIDDLE_CODE = 'WORK_DEPT'
                     AND SC.SMALL_CODE = WC.WORK_DEPT) AS WORKDEPTNAME
                ,WC.ROUTING_CODE AS ROUTINGCODE
                ,(SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CODE SC
                   WHERE SC.ORG_ID = WC.ORG_ID
                     AND SC.COMPANY_ID = WC.COMPANY_ID
                     AND SC.BIG_CODE = 'MFG'
                     AND SC.MIDDLE_CODE = 'ROUTING_GROUP'
                     AND SC.SMALL_CODE = WC.ROUTING_CODE) AS ROUTINGNAME
                ,NULL AS CHANGEWORKDEPT
                ,NULL AS CHANGEWORKDEPTNAME
                ,(CASE WHEN SYSDATE BETWEEN WC.EFFECTIVE_START_DATE AND WC.EFFECTIVE_END_DATE THEN
                         'Y'
                       ELSE
                         'N'
                       END) AS SAVEYN
          FROM CB_WORK_CENTER WC
    </sql>

    <sql id="search.workcenter.name.lov.sql-where">
         WHERE SYSDATE BETWEEN WC.EFFECTIVE_START_DATE AND WC.EFFECTIVE_END_DATE
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                WC.WORK_CENTER_NAME LIKE '%' || #keyword# || '%'
            </isNotEqual>
        </isNotEmpty>
        <isNotEmpty property="SEARCHGUBUN">
            <isEqual property="SEARCHGUBUN" compareValue="OUT" prepend="AND">
                WC.WORK_DEPT IS NOT NULL
            </isEqual>
        </isNotEmpty>
        <isNotEmpty property="MONITORINGGUBUN" prepend="AND">
                WC.WORK_DEPT IN ('A', 'B')
        </isNotEmpty>
        <isNotEmpty property="ORGID" prepend="AND">
                WC.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
                WC.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="WORKDEPT" prepend="AND">
                WC.WORK_DEPT = #WORKDEPT#
        </isNotEmpty>
        <isNotEmpty property="WORKCENTERCODE" prepend="AND">
                WC.WORK_CENTER_CODE = #WORKCENTERCODE#
        </isNotEmpty>
        <isNotEmpty property="WORKCENTERCODEIF" prepend="AND">
                WC.WORK_CENTER_CODE_IF = #WORKCENTERCODEIF#
        </isNotEmpty>
       ORDER BY WC.ORG_ID, WC.COMPANY_ID, WC.SEQ, WC.WORK_DEPT, WC.WORK_CENTER_CODE
    </sql>

    <select id="search.workcenter.name.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.workcenter.name.lov.sql-select" />
            <include refid="search.workcenter.name.lov.sql-where" />
    </select>

    <select id="search.workcenter.name.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.workcenter.name.lov.sql-select" />
            <include refid="search.workcenter.name.lov.sql-where" />
        ) TOT
    </select>
   <!--작업지시투입관리 화면에서의 설비명 가져오기 2016.12.01-->
 
    <!--작업지시투입관리 화면에서의 공정별 설비명 가져오기 2016.12.01-->
   <sql id="search.equipment.name.lov.sql-select">
        SELECT CEM.EQUIPMENT_NAME  AS EQUIPMENTNAME
					      ,CEM.EQUIPMENT_CODE  AS EQUIPMENTCODE
					      ,SC.WORK_CENTER_CODE AS WORKCENTERCODE
					      ,SC.WORK_CENTER_NAME AS WORKCENTERNAME
			  FROM CB_WORK_CENTER SC
			      ,CB_EQUIPMENT_MASTER CEM
    </sql>

    <sql id="search.equipment.name.lov.sql-where">
         WHERE SC.ORG_ID = CEM.ORG_ID
            AND SC.COMPANY_ID = CEM.COMPANY_ID
            AND SC.WORK_CENTER_CODE = CEM.WORK_CENTER_CODE
            AND SYSDATE BETWEEN SC.EFFECTIVE_START_DATE AND SC.EFFECTIVE_END_DATE
            AND CEM.USE_YN = 'Y'
	          AND CEM.ITEM_CODE = #ITEMCODE#
	          AND CEM.ROUTING_ID = #ROUTINGID#
        <isNotEmpty property="ORGID" prepend="AND">
                SC.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
                SC.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                SC.WORK_CENTER_NAME LIKE #keyword# || '%'
            </isNotEqual>
        </isNotEmpty>
            ORDER BY  SC.WORK_CENTER_CODE
    </sql>

    <select id="search.equipment.name.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.equipment.name.lov.sql-select" />
            <include refid="search.equipment.name.lov.sql-where" />
    </select>

    <select id="search.equipment.name.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.equipment.name.lov.sql-select" />
            <include refid="search.equipment.name.lov.sql-where" />
        ) TOT
    </select>
   <!--작업지시투입관리 화면에서의 공정별 설비명 가져오기 2016.12.01-->
   

    
    <!-- 제품 / 자재 / 공구 불러오기 Lov 시작-->
    <sql id="search.itemcodeorder.lov.sql-select">
        SELECT RANK() OVER(ORDER BY ORG_ID, COMPANY_ID, GROUP_CODE, BIG_CODE, MIDDLE_CODE, SMALL_CODE, MODEL_NAME, ORDER_NAME, ITEM_NAME, ITEM_CODE) AS RN
					      ,ORG_ID AS ORGID
					      ,COMPANY_ID AS COMPANYID
					      ,GROUP_CODE AS GROUPCODE
					      ,BIG_CODE AS BIGCODE
					      ,BIG_NAME AS BIGNAME
					      ,MIDDLE_CODE AS MIDDLECODE
					      ,MIDDLE_NAME AS MIDDLENAME
					      ,SMALL_CODE AS SMALLCODE
					      ,SMALL_NAME AS SMALLNAME
					      ,ITEM_CODE AS ITEMCODE
					      ,ITEM_NAME AS ITEMNAME
					      ,DRAWING_NO AS DRAWINGNO
					      ,ORDER_NAME AS ORDERNAME
					      ,SALES_PRICE AS SALESPRICE
					      ,UOM AS UOM
					      ,UOM_NAME AS UOMNAME
					      ,ITEM_TYPE AS ITEMTYPE
					      ,ITEM_TYPE_NAME AS ITEMTYPENAME
					      ,MODEL AS MODEL
					      ,MODEL_NAME AS MODELNAME
					      ,CAR_TYPE AS CARTYPE
					      ,CAR_TYPE_NAME AS CARTYPENAME
					      ,CUSTOMER_CODE AS CUSTOMERCODE
					      ,CUSTOMER_NAME AS CUSTOMERNAME
					      ,EFFECTIVE_START_DATE AS EFFECTIVESTARTDATE
					      ,EFFECTIVE_END_DATE AS EFFECTIVEENDDATE
					      ,REMARKS
					      ,ORDER_INSPECTION_YN AS ORDERINSPECTIONYN
					      ,SCM_INSPECTION_YN AS SCMINSPECTIONYN
					      ,INVENTORY_MANAGE_YN AS INVENTORYMANAGEYN
					      ,SAFETY_INVENTORY AS SAFETYINVENTORY
					      ,ITEM_STANDARD AS ITEMSTANDARD
					      ,MATERIAL_TYPE AS MATERIALTYPE
					      ,TOOL_LIFE AS TOOLLIFE
                ,TO_CHAR(TOOL_LIFE, 'FM999,999,999,999') || ' EA' AS TOOLLIFE1
					      ,USE_YN AS USEYN
					      ,ROUTING_GROUP AS ROUTINGGROUP
					      ,ROUTING_ID AS ROUTINGID
					      ,WORK_CENTER_CODE AS WORKCENTERCODE
					      ,WORK_CENTER_NAME AS WORKCENTERNAME
                ,SUB_ITEM AS SUBITEM
                ,SUB_ITEM_NAME AS SUBITEMNAME
			  FROM CB_ITEM_MASTER_V
    </sql>
    
    <sql id="search.itemcodeorder.lov.sql-where">
         WHERE SYSDATE BETWEEN EFFECTIVE_START_DATE AND EFFECTIVE_END_DATE
        <isNotEmpty property="ORGID" prepend="AND">
            ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            COMPANY_ID = #COMPANYID#
        </isNotEmpty>
       <isNotEmpty property="MATGROUPCODE" prepend="AND">
            GROUP_CODE IN ('M', 'T')
        </isNotEmpty>
        <isNotEmpty property="MATGROUPCODE2" prepend="AND">
            GROUP_CODE IN ('M')
        </isNotEmpty>
       <isNotEmpty property="GROUPCODE" prepend="AND">
            GROUP_CODE = #GROUPCODE#
        </isNotEmpty>
       <isNotEmpty property="ITEMTYPE" prepend="AND">
            ITEM_TYPE = #ITEMTYPE#
        </isNotEmpty>
        <isNotEmpty property="GUBUN" prepend="AND">
                ITEM_TYPE IN (SELECT SC.SMALL_CODE
                                       FROM CB_SMALL_CODE SC
                                      WHERE SC.ORG_ID = ORG_ID
                                         AND SC.COMPANY_ID = COMPANY_ID
                                         AND SC.BIG_CODE = 'CMM'
                                         AND SC.MIDDLE_CODE = 'ITEM_TYPE'
                                         AND SC.ATTRIBUTE1 = 'A' )
        </isNotEmpty>
        <isNotEmpty property="MODELNAME" prepend="AND">
            MODEL_NAME LIKE '%' || #MODELNAME# || '%'
        </isNotEmpty>
        <isNotEmpty property="ITEMCODE" prepend="AND">
            ITEM_CODE LIKE  '%' || #ITEMCODE# || '%'
        </isNotEmpty>
        <isNotEmpty property="ITEMNAME" prepend="AND">
            ITEM_NAME LIKE '%' || #ITEMNAME# || '%'
        </isNotEmpty>
        <isNotEmpty property="ORDERNAME" prepend="AND">
            ORDER_NAME LIKE '%' || #ORDERNAME# || '%'
        </isNotEmpty>
        <isNotEmpty property="ITEMSTANDARD" prepend="AND">
            ITEM_STANDARD LIKE '%' || #ITEMSTANDARD# || '%'
        </isNotEmpty>
        <isNotEmpty property="CUSTOMERNAME" prepend="AND">
            CUSTOMER_NAME LIKE '%' || #CUSTOMERNAME# || '%'
        </isNotEmpty>
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%">
              <isEqual property="GUBUN" compareValue="ITEMCODE" prepend="AND">
                ITEM_CODE LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="GUBUN" compareValue="ITEMNAME" prepend="AND">
                ITEM_NAME LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="GUBUN" compareValue="ORDERNAME" prepend="AND">
                ORDER_NAME LIKE '%' || #keyword# || '%'
              </isEqual>
            </isNotEqual>
            <!-- <isNotEqual property="keyword" compareValue="%" prepend="AND">
                ITEM_NAME LIKE '%' || #keyword# || '%'
            </isNotEqual> -->
        </isNotEmpty>
        ORDER BY ORG_ID, COMPANY_ID, GROUP_CODE, BIG_CODE, MIDDLE_CODE, SMALL_CODE, MODEL_NAME, ORDER_NAME, ITEM_NAME, ITEM_CODE
    </sql>

    <select id="search.itemcodeorder.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap" remapResults="true">
            <include refid="search.itemcodeorder.lov.sql-select" />
            <include refid="search.itemcodeorder.lov.sql-where" />
    </select>
    
    <select id="search.itemcodeorder.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.itemcodeorder.lov.sql-select" />
            <include refid="search.itemcodeorder.lov.sql-where" />
        ) TOT
    </select>
    <!-- 제품 / 자재 / 공구 불러오기 Lov 끝 -->

    <!-- SMALL_CODE Lov 시작 -->
    <sql id="search.smallcode.lov.sql-select">
        SELECT RANK() OVER(ORDER BY (SELECT MC.MIDDLE_NAME
                                                   FROM CB_MIDDLE_CODE MC
                                                  WHERE MC.ORG_ID = SC.ORG_ID
                                                    AND MC.COMPANY_ID = SC.COMPANY_ID
                                                    AND MC.BIG_CODE = SC.BIG_CODE
                                                    AND MC.MIDDLE_CODE = SC.MIDDLE_CODE)
					        <isNotEmpty property="GUBUN" prepend=",">
					         SMALL_CODE
					        </isNotEmpty>
					        <isEmpty property="GUBUN" prepend=",">
					         SMALL_NAME
					        </isEmpty>
					        ) AS RN
					       ,ORG_ID AS ORGID
					       ,COMPANY_ID AS COMPANYID
                 ,BIG_CODE AS BIGCODE
                 ,(SELECT BC.BIG_NAME
                     FROM CB_BIG_CODE BC
                    WHERE BC.ORG_ID = SC.ORG_ID
                      AND BC.COMPANY_ID = SC.COMPANY_ID
                      AND BC.BIG_CODE = SC.BIG_CODE) AS BIGNAME
                 ,MIDDLE_CODE AS MIDDLECODE
                 ,(SELECT MC.MIDDLE_NAME
                    FROM CB_MIDDLE_CODE MC
                   WHERE MC.ORG_ID = SC.ORG_ID
                     AND MC.COMPANY_ID = SC.COMPANY_ID
                     AND MC.BIG_CODE = SC.BIG_CODE
                     AND MC.MIDDLE_CODE = SC.MIDDLE_CODE) AS MIDDLENAME
                 ,SMALL_CODE AS ID
                 ,SMALL_CODE AS VALUE
                 ,SMALL_NAME AS LABEL
                 ,ATTRIBUTE1 AS ATTRIBUTE1
                 ,DECODE(MIDDLE_CODE
                        ,'ROUTING_NAME' ,(SELECT SC1.SMALL_NAME
                                            FROM CB_SMALL_CODE SC1
                                           WHERE SC1.ORG_ID = SC.ORG_ID
                                             AND SC1.COMPANY_ID = SC.COMPANY_ID
                                             AND SC1.BIG_CODE = 'MFG'
                                             AND SC1.MIDDLE_CODE = 'ROUTING_GROUP'
                                             AND SC1.SMALL_CODE = SC.ATTRIBUTE1)
                        ,NULL) AS ROUTINGGROUPNAME
                 ,ATTRIBUTE2 AS ATTRIBUTE2
                 ,ATTRIBUTE3 AS ATTRIBUTE3
                 ,ATTRIBUTE4 AS ATTRIBUTE4
                 ,ATTRIBUTE5 AS ATTRIBUTE5
                 ,DECODE(MIDDLE_CODE
                        ,'FAULT_TYPE' ,SC.SMALL_NAME || DECODE(ATTRIBUTE5, NULL, NULL, ' ( ' || ATTRIBUTE5 || ' )')
                        ,NULL) AS FAULTTYPENAME
                 ,ATTRIBUTE6 AS ATTRIBUTE6
                 ,ATTRIBUTE7 AS ATTRIBUTE7
                 ,ATTRIBUTE8 AS ATTRIBUTE8
                 ,ATTRIBUTE9 AS ATTRIBUTE9
                 ,ATTRIBUTE10 AS ATTRIBUTE10
                 ,REMARKS AS REMARKS
          FROM CB_SMALL_CODE SC
    </sql>

    <sql id="search.smallcode.lov.sql-where">
         WHERE USE_YN = 'Y'
           AND ORG_ID = #ORGID#
           AND COMPANY_ID = #COMPANYID#
        <isNotEmpty property="BIGCD" prepend="AND">
           BIG_CODE = #BIGCD#
        </isNotEmpty>
        <isNotEmpty property="MIDDLECD" prepend="AND">
           MIDDLE_CODE = #MIDDLECD#
        </isNotEmpty>
        <isNotEmpty property="ATTRIBUTE1" prepend="AND">
           ATTRIBUTE1 = #ATTRIBUTE1#
        </isNotEmpty>
        <isNotEmpty property="ATTRIBUTE2" prepend="AND">
           ATTRIBUTE2 = #ATTRIBUTE2#
        </isNotEmpty>
        <isNotEmpty property="ATTRIBUTE3" prepend="AND">
           ATTRIBUTE3 = #ATTRIBUTE3#
        </isNotEmpty>
        <isNotEmpty property="ATTRIBUTE4" prepend="AND">
           ATTRIBUTE4 = #ATTRIBUTE4#
        </isNotEmpty>
        <isNotEmpty property="ATTRIBUTE5" prepend="AND">
           ATTRIBUTE5 = #ATTRIBUTE5#
        </isNotEmpty>
        <isNotEmpty property="ATTRIBUTE6" prepend="AND">
           ATTRIBUTE6 = #ATTRIBUTE6#
        </isNotEmpty>
        <isNotEmpty property="ATTRIBUTE7" prepend="AND">
           ATTRIBUTE7 = #ATTRIBUTE7#
        </isNotEmpty>
        <isNotEmpty property="ATTRIBUTE8" prepend="AND">
           ATTRIBUTE8 = #ATTRIBUTE8#
        </isNotEmpty>
        <isNotEmpty property="ATTRIBUTE9" prepend="AND">
           ATTRIBUTE9 = #ATTRIBUTE9#
        </isNotEmpty>
        <isNotEmpty property="GROUPCD">
		        <isNotEmpty property="ITEMTYPE" prepend="AND">
                ATTRIBUTE1 IN ( #GROUPCD# , 'Z' )
		        </isNotEmpty>
		        <isEmpty property="ITEMTYPE" prepend="AND">
                ATTRIBUTE1 = #GROUPCD#
		        </isEmpty>
        </isNotEmpty>
        <isNotEmpty property="keyword">
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                ( SMALL_CODE LIKE '%' || #keyword# || '%'
                OR SMALL_NAME LIKE '%' || #keyword# || '%' )
            </isNotEqual>
        </isNotEmpty>
        <isNotEmpty property="USEDIVTYPE">
            <isEqual property="USEDIVTYPE" compareValue="ETC">
                <isNotEmpty property="USEDIV2" prepend="AND">
                    SMALL_CODE NOT IN (#USEDIV1#, #USEDIV2#)
                </isNotEmpty>
                <isEmpty property="USEDIV2" prepend="AND">
                    SMALL_CODE NOT IN (#USEDIV1#)
                </isEmpty>
            </isEqual>
        </isNotEmpty>
        <isNotEmpty property="TYPE">
          <isNotEmpty property="TYPE2">
            <isNotEmpty property="TYPE1" prepend="AND">
               SMALL_CODE IN (#TYPE1#, #TYPE2#)
            </isNotEmpty>
            <isEmpty property="TYPE1" prepend="AND">
              SMALL_CODE = #TYPE2#
            </isEmpty>
          </isNotEmpty>
        </isNotEmpty>
        <isNotEmpty property="BOMGUBUN" prepend="AND">
              (ATTRIBUTE1 = 'M' 
               OR SMALL_CODE = 'C')
        </isNotEmpty>
        <isNotEmpty property="WORKSTATUS">
          <isEqual property="WORKSTATUS" compareValue="START" prepend="AND">
            SMALL_CODE IN ('PROGRESS', 'CANCEL')
          </isEqual>
        </isNotEmpty>
        <isNotEmpty property="ROUTINGGROUP" prepend="AND">
              ATTRIBUTE1 IN (SELECT SC1.SMALL_CODE
                                    FROM CB_SMALL_CODE SC1
                                   WHERE SC1.ORG_ID = SC.ORG_ID
                                     AND SC1.COMPANY_ID = SC.COMPANY_ID
                                     AND SC1.BIG_CODE = 'MFG'
                                     AND SC1.MIDDLE_CODE = 'ROUTING_GROUP'
                                     AND SC1.SMALL_NAME LIKE '%' || #ROUTINGGROUP# || '%')
        </isNotEmpty>
        <isNotEmpty property="GUBUN" prepend="ORDER BY">
         SMALL_CODE
        </isNotEmpty>
        <isEmpty property="GUBUN" prepend="ORDER BY">
         SMALL_NAME
        <isNotEmpty property="ORDERATTRIBUTE1" prepend=",">
         ATTRIBUTE1
        </isNotEmpty>
        </isEmpty>
    </sql>

    <select id="search.smallcode.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
          <include refid="search.smallcode.lov.sql-select" />
          <include refid="search.smallcode.lov.sql-where" />
    </select>

    <select id="search.smallcode.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
        <include refid="search.smallcode.lov.sql-select" />
        <include refid="search.smallcode.lov.sql-where" />
        ) TOT
    </select>
    
    <select id="search.smallcode.group.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
        SELECT LISTAGG(VALUE, ',') WITHIN GROUP (ORDER BY VALUE) AS VALUE
                 ,LISTAGG(LABEL, ',') WITHIN GROUP (ORDER BY VALUE) AS LABEL
           FROM (
          <include refid="search.smallcode.lov.sql-select" />
          <include refid="search.smallcode.lov.sql-where" />
          ) A
    </select>
    
    <select id="search.smallcode.first.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
        SELECT *
          FROM (
          <include refid="search.smallcode.lov.sql-select" />
          <include refid="search.smallcode.lov.sql-where" />
         )
         WHERE RN = 1
    </select>
    
    <!-- SMALL_CODE Lov 끝 -->
    
    <!-- MIDDLE_CODE Lov 시작 -->
    <sql id="search.middlecode.lov.sql-select">
        SELECT MIDDLE_CODE AS ID,
                 MIDDLE_CODE AS VALUE,
                 MIDDLE_NAME AS LABEL,
                 BIG_CODE AS BIGCODE,
                 (SELECT BIG_NAME
                    FROM CB_BIG_CODE BC
                   WHERE BC.ORG_ID = MC.ORG_ID
                     AND BC.COMPANY_ID = MC.COMPANY_ID
                     AND BC.BIG_CODE = MC.BIG_CODE) AS BIGNAME
          FROM CB_MIDDLE_CODE MC
    </sql>

    <sql id="search.middlecode.lov.sql-where">
         WHERE USE_YN = 'Y'
           AND ORG_ID = #ORGID#
           AND COMPANY_ID = #COMPANYID#
        <isNotEmpty property="BIGCD" prepend="AND">
           BIG_CODE = #BIGCD#
        </isNotEmpty>
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                ( MIDDLE_CODE LIKE '%' || #keyword# || '%'
                OR MIDDLE_NAME LIKE '%' || #keyword# || '%' )
            </isNotEqual>
        </isNotEmpty>
          ORDER BY /*(SELECT BIG_NAME
                          FROM CB_BIG_CODE BC
                         WHERE BC.ORG_ID = MC.ORG_ID
                           AND BC.COMPANY_ID = MC.COMPANY_ID
                           AND BC.BIG_CODE = MC.BIG_CODE), BIGCODE, */MIDDLE_NAME, MIDDLE_CODE
    </sql>

    <select id="search.middlecode.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
       <include refid="search.middlecode.lov.sql-select" />
       <include refid="search.middlecode.lov.sql-where" />
    </select>

    <select id="search.middlecode.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
        <include refid="search.middlecode.lov.sql-select" />
        <include refid="search.middlecode.lov.sql-where" />
        ) TOT
    </select>
    <!-- MIDDLE_CODE Lov 끝 -->
    
    <!-- BIG_CODE Lov 시작 -->
    <sql id="search.bigcode.lov.sql-select">
        SELECT BIG_CODE AS ID,
                 BIG_CODE AS VALUE,
                 BIG_NAME AS LABEL
          FROM CB_BIG_CODE
    </sql>

    <sql id="search.bigcode.lov.sql-where">
         WHERE USE_YN = 'Y'
           AND ORG_ID = #ORGID#
           AND COMPANY_ID = #COMPANYID#
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                ( BIG_CODE LIKE '%' || #keyword# || '%'
                OR BIG_NAME LIKE '%' || #keyword# || '%' )
            </isNotEqual>
        </isNotEmpty>
          ORDER BY BIG_NAME, BIG_CODE
    </sql>

    <select id="search.bigcode.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
       <include refid="search.bigcode.lov.sql-select" />
       <include refid="search.bigcode.lov.sql-where" />
    </select>

    <select id="search.bigcode.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
        <include refid="search.bigcode.lov.sql-select" />
        <include refid="search.bigcode.lov.sql-where" />
        ) TOT
    </select>
    <!-- BIG_CODE Lov 끝 -->
    
    <!-- CHECK BIG_CODE Lov 시작 -->
    <sql id="search.check.bigcode.lov.sql-select">
        SELECT BIG_CODE AS ID,
                 BIG_CODE AS VALUE,
                 BIG_NAME AS LABEL
          FROM CB_CHECK_BIG_CODE
    </sql>

    <sql id="search.check.bigcode.lov.sql-where">
         WHERE ORG_ID = #ORGID#
           AND COMPANY_ID = #COMPANYID#
        <isNotEmpty property="BIGCD" prepend="AND">
            BIG_CODE = #BIGCD#
        </isNotEmpty>
        <isNotEmpty property="REMARKS" prepend="AND">
            REMARKS = #REMARKS#
        </isNotEmpty>
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                ( BIG_CODE LIKE #keyword# || '%'
                OR BIG_NAME LIKE #keyword# || '%' )
            </isNotEqual>
        </isNotEmpty>
        <isNotEmpty property="HISTORYCHECK" prepend="AND">
            BIG_CODE IN ('F', 'H', 'O')
        </isNotEmpty>
        ORDER BY BIG_CODE
    </sql>

    <select id="search.check.bigcode.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
       <include refid="search.check.bigcode.lov.sql-select" />
       <include refid="search.check.bigcode.lov.sql-where" />
    </select>

    <select id="search.check.bigcode.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
        <include refid="search.check.bigcode.lov.sql-select" />
        <include refid="search.check.bigcode.lov.sql-where" />
        ) TOT
    </select>
    <!-- CHECK BIG_CODE Lov 끝 -->
    
    <!-- CHECK MIDDLE_CODE Lov 시작 -->
    <sql id="search.check.middlecode.lov.sql-select">
        SELECT MIDDLE_CODE AS ID,
                 MIDDLE_CODE AS VALUE,
                 MIDDLE_NAME AS LABEL
          FROM CB_CHECK_MIDDLE_CODE
    </sql>

    <sql id="search.check.middlecode.lov.sql-where">
         WHERE ORG_ID = #ORGID#
           AND COMPANY_ID = #COMPANYID#
        <isNotEmpty property="BIGCD" prepend="AND">   
           BIG_CODE = #BIGCD#
        </isNotEmpty>
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                ( MIDDLE_CODE LIKE #keyword# || '%'
                OR MIDDLE_NAME LIKE #keyword# || '%' )
            </isNotEqual>
        </isNotEmpty>
        ORDER BY MIDDLE_CODE
    </sql>

    <select id="search.check.middlecode.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
        <include refid="search.check.middlecode.lov.sql-select" />
        <include refid="search.check.middlecode.lov.sql-where" />
    </select>

    <select id="search.check.middlecode.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
        <include refid="search.check.middlecode.lov.sql-select" />
        <include refid="search.check.middlecode.lov.sql-where" />
        ) TOT
    </select>
    <!-- CHECK MIDDLE_CODE Lov 끝 -->
    
<!--     2016.12.21 수정 -->
    <!-- CHECK SMALL_CODE Lov 시작 -->
    <sql id="search.check.smallcode.lov.sql-select">
        SELECT ROWNUM AS RNO,
                 SMALL_CODE AS ID,
                 SMALL_CODE AS VALUE,
                 SMALL_NAME AS LABEL
          FROM CB_CHECK_SMALL_CODE
    </sql>

    <sql id="search.check.smallcode.lov.sql-where">
         WHERE ORG_ID = #ORGID#
         AND COMPANY_ID = #COMPANYID#
        <isNotEmpty property="BIGCD">
            AND BIG_CODE = #BIGCD#
            AND MIDDLE_CODE = (SELECT MIDDLE_CODE
                        FROM CB_CHECK_MIDDLE_CODE
                       WHERE BIG_CODE = #BIGCD#
                         AND MIDDLE_CODE = #MIDDLECD#)
        </isNotEmpty>
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                ( SMALL_CODE LIKE #keyword# || '%'
                OR SMALL_NAME LIKE #keyword# || '%' )
            </isNotEqual>
        </isNotEmpty>
    </sql>

    <select id="search.check.smallcode.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
        <include refid="search.check.smallcode.lov.sql-select" />
        <include refid="search.check.smallcode.lov.sql-where" />
        ORDER BY 1
    </select>

    <select id="search.check.smallcode.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
        <include refid="search.check.smallcode.lov.sql-select" />
        <include refid="search.check.smallcode.lov.sql-where" />
        ) TOT
    </select>
    <!-- CHECK SMALL_CODE Lov 끝 -->
    
    <!-- Dummy Lov 시작 -->
    <sql id="search.dummy.yn.lov.sql-select">
        SELECT *
          FROM (SELECT 'Y' AS VALUE
                            ,#PARAM1# AS LABEL
                    FROM DUAL
                  <isNotEmpty property="PARAM2" prepend="UNION ALL">
                   SELECT 'N' AS VALUE
                            ,#PARAM2# AS LABEL
                    FROM DUAL
                  </isNotEmpty>
                  )
    </sql>

    <sql id="search.dummy.yn.lov.sql-where">
         WHERE 1 = 1
    </sql>

    <select id="search.dummy.yn.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
        <include refid="search.dummy.yn.lov.sql-select" />
        <include refid="search.dummy.yn.lov.sql-where" />
    </select>

    <select id="search.dummy.yn.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
        <include refid="search.dummy.yn.lov.sql-select" />
        <include refid="search.dummy.yn.lov.sql-where" />
        ) TOT
    </select>
    
    <sql id="search.dummy.okng2.lov.sql-select">
        SELECT *
          FROM (SELECT 'OK' AS VALUE
                            ,#PARAM1# AS LABEL
                    FROM DUAL
                  <isNotEmpty property="PARAM2" prepend="UNION ALL">
                   SELECT 'NG' AS VALUE
                            ,#PARAM2# AS LABEL
                    FROM DUAL
                  </isNotEmpty>
                  )
    </sql>

    <sql id="search.dummy.okng2.lov.sql-where">
         WHERE 1 = 1
    </sql>

    <select id="search.dummy.okng2.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
        <include refid="search.dummy.okng2.lov.sql-select" />
        <include refid="search.dummy.okng2.lov.sql-where" />
    </select>

    <select id="search.dummy.okng2.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
        <include refid="search.dummy.okng2.lov.sql-select" />
        <include refid="search.dummy.okng2.lov.sql-where" />
        ) TOT
    </select>
    
    
    <sql id="search.dummy.okng.lov.sql-select">
        SELECT *
          FROM (SELECT '1' AS ID, 'OK' AS VALUE, 'OK' AS LABEL
                  FROM DUAL
                UNION ALL
                SELECT '2' AS ID, 'NG' AS VALUE, 'NG' AS LABEL
                  FROM DUAL)
    </sql>

    <sql id="search.dummy.okng.lov.sql-where">
         WHERE 1 = 1
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                ( VALUE LIKE #keyword# || '%'
                OR LABEL LIKE #keyword# || '%' )
            </isNotEqual>
        </isNotEmpty>
    </sql>

    <select id="search.dummy.okng.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
        <include refid="search.dummy.okng.lov.sql-select" />
        <include refid="search.dummy.okng.lov.sql-where" />
    </select>

    <select id="search.dummy.okng.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
        <include refid="search.dummy.okng.lov.sql-select" />
        <include refid="search.dummy.okng.lov.sql-where" />
        ) TOT
    </select>
    
    
    <sql id="search.dummy.number.lov.sql-select">
        <![CDATA[
        /*SELECT 0 AS RN
              ,NULL AS VALUE
              ,NULL AS LABEL
          FROM DUAL
          UNION ALL*/
        SELECT LEVEL AS RN
					      ,(#MAXVALUE# + #CHECKINTERVAL#) - ((LEVEL - 1) * #CHECKINTERVAL#) AS VALUE
					      ,(#MAXVALUE# + #CHECKINTERVAL#) - ((LEVEL - 1) * #CHECKINTERVAL#) AS LABEL
				  FROM DUAL
				CONNECT BY LEVEL <=  ( #INTERVALCNT# + 3 )
        UNION ALL
        SELECT 999 AS RN
              ,NULL AS VALUE
              ,NULL AS LABEL
          FROM DUAL
				]]>
    </sql>

    <select id="search.dummy.number.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
        <include refid="search.dummy.number.lov.sql-select" />
        ORDER BY RN
    </select>

    <select id="search.dummy.number.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
        <include refid="search.dummy.number.lov.sql-select" />
        ) TOT
    </select>
    <!-- Dummy Lov 끝 -->
    
    <sql id="search.customer.name.lov.sql-select">
        SELECT RANK() OVER(ORDER BY CC.ORG_ID, CC.COMPANY_ID, CC.USE_YN DESC, CC.CUSTOMER_NAME) AS RN
             ,CC.CUSTOMER_CODE AS ID
             ,CC.CUSTOMER_CODE AS VALUE
             ,CC.CUSTOMER_NAME AS LABEL
             ,CC.LICENSE_NO AS LICENSENO
                 ,CC.CUSTOMER_TYPE AS CUSTOMERTYPE
                 ,(SELECT SC.SMALL_NAME
                     FROM CB_SMALL_CODE SC
                    WHERE SC.ORG_ID = CC.ORG_ID
                      AND SC.COMPANY_ID = CC.COMPANY_ID
                      AND SC.BIG_CODE = 'CMM'
                      AND SC.MIDDLE_CODE = 'CUSTOMER_TYPE'
                      AND SC.SMALL_CODE = CC.CUSTOMER_TYPE) AS CUSTOMERTYPENAME
             ,CC.PHONE_NUMBER AS PHONENUMBER
             ,CC.ZIP_CODE||' '||CC.ADDRESS AS ADDRESS
             ,DECODE(CC.FREIGHT_POINT, NULL, CC.ZIP_CODE||' '||CC.ADDRESS, CC.FREIGHT_POINT) AS FREIGHT
             ,CC.UNIT_PRICE_DIV AS UNITPRICEDIV
             ,(SELECT SC.SMALL_NAME
                FROM CB_SMALL_CODE SC
               WHERE SC.ORG_ID = CC.ORG_ID
                  AND SC.COMPANY_ID = CC.COMPANY_ID
                  AND SC.BIG_CODE = 'CMM'
                  AND SC.MIDDLE_CODE = 'UNIT_DIV'
                  AND SC.SMALL_CODE = CC.UNIT_PRICE_DIV) AS UNITPRICEDIVNAME
             ,(SELECT MIN(CM1.MEMBER_ID)
                 FROM CB_CUSTOMER_MEMBER CM1
                WHERE CM1.ORG_ID = CC.ORG_ID
                  AND CM1.COMPANY_ID = CC.COMPANY_ID
                  AND CM1.CUSTOMER_CODE = CC.CUSTOMER_CODE) AS CUSTOMERPERSON
             ,(SELECT CM.MEMBER_NAME
                 FROM CB_CUSTOMER_MEMBER CM
                WHERE CM.ORG_ID = CC.ORG_ID
                  AND CM.COMPANY_ID = CC.COMPANY_ID
                  AND CM.CUSTOMER_CODE = CC.CUSTOMER_CODE
                  AND CM.MEMBER_ID = (SELECT MIN(CM1.MEMBER_ID)
                                        FROM CB_CUSTOMER_MEMBER CM1
                                       WHERE CM1.ORG_ID = CC.ORG_ID
                                         AND CM1.COMPANY_ID = CC.COMPANY_ID
                                         AND CM1.CUSTOMER_CODE = CC.CUSTOMER_CODE)) AS CUSTOMERPERSONNAME
      FROM CB_CUSTOMER CC
    </sql>

    <sql id="search.customer.name.lov.sql-where">
         WHERE 1 = 1
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                ( CC.SEARCH_DESC || CC.CUSTOMER_NAME ) LIKE '%' || #keyword# || '%'
            </isNotEqual>
        </isNotEmpty>
        <isNotEmpty property="ORGID" prepend="AND">
                ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
                COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="CUSTOMERTYPE" prepend="AND">
           CUSTOMER_TYPE IN ('A' ,'P', 'T')
        </isNotEmpty>
        <isNotEmpty property="CUSTOMERTYPE1" prepend="AND">
           CUSTOMER_TYPE IN ('A' , 'S')
        </isNotEmpty>
        <isNotEmpty property="CUSTOMERTYPE2" prepend="AND">
           CUSTOMER_TYPE IN ('O', 'T')
        </isNotEmpty>
        <isNotEmpty property="CUSTOMERTYPE3" prepend="AND">
           CUSTOMER_TYPE IN ('A' ,'P', 'T', 'O')
        </isNotEmpty>
        <isNotEmpty property="CUSTOMERNAME" prepend="AND">
           CC.CUSTOMER_NAME LIKE '%' || #CUSTOMERNAME# || '%'
        </isNotEmpty>
        <isNotEmpty property="CUSTOMERNAME2" prepend="AND">
           CC.CUSTOMER_NAME = #CUSTOMERNAME2#
        </isNotEmpty>
        <isNotEmpty property="USEYN" prepend="AND">
           CC.USE_YN = #USEYN#
        </isNotEmpty>
        <isNotEmpty property="CUSTOMERDIV" prepend="AND">
           CC.CUSTOMER_DIV = #CUSTOMERDIV#
        </isNotEmpty>
            ORDER BY CC.ORG_ID, CC.COMPANY_ID, CC.USE_YN DESC, CC.CUSTOMER_NAME
    </sql>

    <select id="search.customer.name.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.customer.name.lov.sql-select" />
            <include refid="search.customer.name.lov.sql-where" />
    </select>

    <select id="search.customer.name.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.customer.name.lov.sql-select" />
            <include refid="search.customer.name.lov.sql-where" />
        ) TOT
    </select>
    
    <sql id="search.customer.member.lov.sql-select">
        SELECT RANK() OVER(ORDER BY CM.ORG_ID, CM.COMPANY_ID, CM.CUSTOMER_CODE, CM.MEMBER_ID) AS RN
		             ,CM.MEMBER_ID AS ID
		             ,CM.MEMBER_ID AS VALUE
		             ,CM.MEMBER_NAME AS LABEL
		             ,CM.CUSTOMER_CODE AS CUSTOMERCODE
		             ,CM.DEPT_NAME AS DEPTNAME
                 ,CM.POSITION_NAME AS POSITIONNAME
                 ,CM.PHONE_NUMBER AS PHONENUMBER
		             ,CM.CELL_NUMBER AS CELLNUMBER
		             ,CM.EMAIL AS EMAIL
      FROM CB_CUSTOMER_MEMBER CM
    </sql>

    <sql id="search.customer.member.lov.sql-where">
         WHERE SYSDATE BETWEEN CM.EFFECTIVE_START_DATE AND NVL(CM.EFFECTIVE_END_DATE, TO_DATE('4999-12-31', 'YYYY-MM-DD'))
            AND CM.CUSTOMER_CODE = #CUSTOMERCODE#
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                CM.MEMBER_NAME LIKE '%' || #keyword# || '%'
            </isNotEqual>
        </isNotEmpty>
        <isNotEmpty property="ORGID" prepend="AND">
                ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
                COMPANY_ID = #COMPANYID#
        </isNotEmpty>
            ORDER BY CM.ORG_ID, CM.COMPANY_ID, CM.CUSTOMER_CODE, CM.MEMBER_ID
    </sql>

    <select id="search.customer.member.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.customer.member.lov.sql-select" />
            <include refid="search.customer.member.lov.sql-where" />
    </select>

    <select id="search.customer.member.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.customer.member.lov.sql-select" />
            <include refid="search.customer.member.lov.sql-where" />
        ) TOT
    </select>
    
    <sql id="search.worker.name.lov.sql-select">
        SELECT HM.EMPLOYEE_NUMBER AS ID,
           HM.EMPLOYEE_NUMBER AS VALUE,
           HM.KR_NAME AS LABEL,
           HM.DEPARTMENT_CODE AS DEPTCODE,
           (SELECT SC.SMALL_NAME
              FROM CB_SMALL_CODE SC
             WHERE SC.BIG_CODE = 'CMM'
               AND SC.MIDDLE_CODE = 'DEPT_CODE'
               AND SC.SMALL_CODE = HM.DEPARTMENT_CODE) AS DEPTNAME
      FROM CB_HUMANRESOURCE_MANAGER HM
    </sql>

    <sql id="search.worker.name.lov.sql-where">
         WHERE 1 = 1
        <isNotEmpty property="NOTEMP" prepend="AND">
                HM.EMPLOYEE_NUMBER != #NOTEMP#
        </isNotEmpty>
        <isNotEmpty property="INSPECTORTYPE2">
          <isNotEmpty property="INSPECTORTYPE" prepend="AND">
              HM.INSPECTOR_TYPE IN ( #INSPECTORTYPE#, #INSPECTORTYPE2# )
          </isNotEmpty>
          <isEmpty property="INSPECTORTYPE" prepend="AND">
              HM.INSPECTOR_TYPE = #INSPECTORTYPE2#
          </isEmpty>
        </isNotEmpty>
        <isEmpty property="INSPECTORTYPE2">
            <isNotEmpty property="INSPECTORTYPE" prepend="AND">
                 HM.INSPECTOR_TYPE = #INSPECTORTYPE#
            </isNotEmpty>
        </isEmpty>
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                HM.KR_NAME LIKE #keyword# || '%'
            </isNotEqual>
        </isNotEmpty>
        <isNotEmpty property="DEPT" prepend="AND">
                HM.DEPARTMENT_CODE = #DEPT#
        </isNotEmpty>
        <isNotEmpty property="DEPTCODE" prepend="AND">
                HM.DEPARTMENT_CODE = #DEPTCODE#
        </isNotEmpty>
        <isNotEmpty property="ROLEUSER" prepend="AND">
                HM.EMPLOYEE_NUMBER = #ROLEUSER#
        </isNotEmpty>
       AND HM.EMPLOYEE_NUMBER IN (SELECT HV.EMPLOYEE_NUMBER
                                                  FROM CB_HUMANRESOURCE_MANAGER_V HV
                                                 WHERE 1=1
        <isNotEmpty property="ORGID" prepend="AND">
                HV.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
                HV.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
                                   )
    </sql>

    <select id="search.worker.name.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.worker.name.lov.sql-select" />
            <include refid="search.worker.name.lov.sql-where" />
            ORDER BY HM.KR_NAME
    </select>

    <select id="search.worker.name.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.worker.name.lov.sql-select" />
            <include refid="search.worker.name.lov.sql-where" />
            ORDER BY HM.KR_NAME
        ) TOT
    </select>
    
    <sql id="search.worker.equip.name.lov.sql-select">
        SELECT HM.EMPLOYEE_NUMBER AS ID
                ,HM.EMPLOYEE_NUMBER AS VALUE
                ,HM.KR_NAME AS LABEL
                ,HM.DEPARTMENT_CODE AS DEPTCODE
                ,(SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CODE SC
                   WHERE SC.BIG_CODE = 'CMM'
                     AND SC.MIDDLE_CODE = 'DEPT_CODE'
                     AND SC.SMALL_CODE = HM.DEPARTMENT_CODE) AS DEPTNAME
                ,HME.WORK_CENTER_CODE AS WORKCENTERCODE
                ,WC.WORK_CENTER_NAME AS WORKCENTERNAME
        FROM CB_HUMANRESOURCE_MANAGER HM
              ,CB_HUMANRESOURCE_MANAGER_EQUIP HME
              ,CB_WORK_CENTER WC
    </sql>

    <sql id="search.worker.equip.name.lov.sql-where">
         WHERE HM.EMPLOYEE_NUMBER = HME.EMPLOYEE_NUMBER
           AND HME.ORG_ID = WC.ORG_ID
           AND HME.COMPANY_ID = WC.COMPANY_ID
           AND HME.WORK_CENTER_CODE = WC.WORK_CENTER_CODE
           AND SYSDATE BETWEEN HM.EFFECTIVE_START_DATE AND HM.EFFECTIVE_END_DATE
           AND HME.USE_YN = 'Y'
        <isNotEmpty property="INSPECTORTYPE2">
          <isNotEmpty property="INSPECTORTYPE" prepend="AND">
              HM.INSPECTOR_TYPE IN ( #INSPECTORTYPE#, #INSPECTORTYPE2# )
          </isNotEmpty>
          <isEmpty property="INSPECTORTYPE" prepend="AND">
              HM.INSPECTOR_TYPE = #INSPECTORTYPE2#
          </isEmpty>
        </isNotEmpty>
        <isEmpty property="INSPECTORTYPE2">
            <isNotEmpty property="INSPECTORTYPE" prepend="AND">
                 HM.INSPECTOR_TYPE = #INSPECTORTYPE#
            </isNotEmpty>
        </isEmpty>
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                HM.KR_NAME LIKE #keyword# || '%'
            </isNotEqual>
        </isNotEmpty>
        <isNotEmpty property="DEPTCODE" prepend="AND">
                HM.DEPARTMENT_CODE = #DEPTCODE#
        </isNotEmpty>
        <isNotEmpty property="ROLEUSER" prepend="AND">
                HM.EMPLOYEE_NUMBER = #ROLEUSER#
        </isNotEmpty>
        <isNotEmpty property="WORKCENTERCODE" prepend="AND">
                HME.WORK_CENTER_CODE = #WORKCENTERCODE#
        </isNotEmpty>
        <isNotEmpty property="WORKDEPT" prepend="AND">
                WC.WORK_DEPT = #WORKDEPT#
        </isNotEmpty>
        <isNotEmpty property="EQUIPMENTCODE" prepend="AND">
                HME.WORK_CENTER_CODE IN (SELECT EM.WORK_CENTER_CODE
							                                         FROM CB_EQUIPMENT_MASTER EM
							                                        WHERE EM.USE_YN = 'Y'
																								        <isNotEmpty property="ORGID" prepend="AND">
																								                EM.ORG_ID = #ORGID#
																								        </isNotEmpty>
																								        <isNotEmpty property="COMPANYID" prepend="AND">
																								                EM.COMPANY_ID = #COMPANYID#
																								        </isNotEmpty>
							                                          AND EM.EQUIPMENT_CODE = #EQUIPMENTCODE#
							                                      )
        </isNotEmpty>
       AND HM.EMPLOYEE_NUMBER IN (SELECT HV.EMPLOYEE_NUMBER
                                                  FROM CB_HUMANRESOURCE_MANAGER_V HV
                                                 WHERE 1=1
        <isNotEmpty property="ORGID" prepend="AND">
                HV.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
                HV.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
                                   )
                                   
    </sql>

    <select id="search.worker.equip.name.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.worker.equip.name.lov.sql-select" />
            <include refid="search.worker.equip.name.lov.sql-where" />
            ORDER BY HM.KR_NAME
    </select>

    <select id="search.worker.equip.name.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.worker.equip.name.lov.sql-select" />
            <include refid="search.worker.equip.name.lov.sql-where" />
            ORDER BY HM.KR_NAME
        ) TOT
    </select>
    
    
    <sql id="search.worker.pc.list.lov.sql-select">
    <![CDATA[
      SELECT /*+ rule */
				       HM.EMPLOYEE_NUMBER AS VALUE
				      ,HM.KR_NAME AS LABEL
		  FROM CB_HUMANRESOURCE_MANAGER HM
    ]]>
    </sql>

    <sql id="search.worker.pc.list.lov.sql-where">
         WHERE SYSDATE BETWEEN HM.EFFECTIVE_START_DATE AND NVL(HM.EFFECTIVE_END_DATE, TO_DATE('4999-12-31', 'YYYY-MM-DD'))
        <isNotEmpty property="DEPARTMENTCODE" prepend="AND">
             HM.DEPARTMENT_CODE = #DEPARTMENTCODE#
        </isNotEmpty>
        <isNotEmpty property="POSITIONCODE" prepend="AND">
             HM.POSITION_CODE = #POSITIONCODE#
        </isNotEmpty>
        <isNotEmpty property="INSPECTORTYPE" prepend="AND">
             HM.INSPECTOR_TYPE = #INSPECTORTYPE#
        </isNotEmpty>
					   AND HM.EMPLOYEE_NUMBER IN (SELECT HME.EMPLOYEE_NUMBER
												                                FROM CB_HUMANRESOURCE_MANAGER_EQUIP HME
												                                    ,CB_WORK_CENTER WC
												                               WHERE HME.ORG_ID = WC.ORG_ID
												                                 AND HME.COMPANY_ID = WC.COMPANY_ID
												                                 AND HME.WORK_CENTER_CODE = WC.WORK_CENTER_CODE
												                                 AND SYSDATE BETWEEN WC.EFFECTIVE_START_DATE AND NVL(WC.EFFECTIVE_END_DATE, TO_DATE('4999-12-31', 'YYYY-MM-DD'))
												                                 AND HME.USE_YN = 'Y'
																					            <isNotEmpty property="ORGID" prepend="AND">
																					                 WC.ORG_ID = #ORGID#
																					            </isNotEmpty>
                                                      <isNotEmpty property="COMPANYID" prepend="AND">
                                                           WC.COMPANY_ID = #COMPANYID#
                                                      </isNotEmpty>
                                                      <isNotEmpty property="WORKDEPT" prepend="AND">
                                                           WC.WORK_DEPT = #WORKDEPT#
                                                      </isNotEmpty>
												                               )
        <isNotEmpty property="GUBUN">
				    <isEqual property="GUBUN" compareValue="VALUE" prepend="ORDER BY ">
				       HM.EMPLOYEE_NUMBER
				    </isEqual>
            <isEqual property="GUBUN" compareValue="LABEL" prepend="ORDER BY ">
               HM.KR_NAME
            </isEqual>
        </isNotEmpty>
    </sql>

    <select id="search.worker.pc.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.worker.pc.list.lov.sql-select" />
            <include refid="search.worker.pc.list.lov.sql-where" />
    </select>

    <select id="search.worker.pc.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.worker.pc.list.lov.sql-select" />
            <include refid="search.worker.pc.list.lov.sql-where" />
        ) TOT
    </select>
    
    <!-- 대 / 중 / 소분류 시작 -->
    <sql id="search.smallclass.lov.sql-select">
        SELECT SMALL_CODE AS ID,
                 SMALL_CODE AS VALUE,
                 SMALL_NAME AS LABEL
          FROM CB_SMALL_CLASS
    </sql>

    <sql id="search.smallclass.lov.sql-where">
         WHERE GROUP_CODE = #GROUPCODE#
        <isNotEmpty property="ORGID" prepend="AND">
            ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="BIGCODE" prepend="AND">
           BIG_CODE = #BIGCODE#
        </isNotEmpty>
        <isNotEmpty property="BIGNAME" prepend="AND">
           BIG_CODE IN (SELECT BIG_CODE
                               FROM CB_BIG_CLASS
                              WHERE 1=1
                                <isNotEmpty property="ORGID" prepend="AND">
                                    ORG_ID = #ORGID#
                                </isNotEmpty>
                                <isNotEmpty property="COMPANYID" prepend="AND">
                                    COMPANY_ID = #COMPANYID#
                                </isNotEmpty>
                                AND BIG_NAME LIKE  '%' || #BIGNAME# || '%')
        </isNotEmpty>
        <isNotEmpty property="MIDDLECODE" prepend="AND">
           MIDDLE_CODE = #MIDDLECODE#
        </isNotEmpty>
        <isNotEmpty property="MIDDLENAME" prepend="AND">
           MIDDLE_CODE IN (SELECT MIDDLE_CODE
		                               FROM CB_MIDDLE_CLASS
		                              WHERE 1=1
		                                <isNotEmpty property="ORGID" prepend="AND">
		                                    ORG_ID = #ORGID#
		                                </isNotEmpty>
		                                <isNotEmpty property="COMPANYID" prepend="AND">
		                                    COMPANY_ID = #COMPANYID#
		                                </isNotEmpty>
														        <isNotEmpty property="BIGNAME" prepend="AND">
														           BIG_CODE IN (SELECT BIG_CODE
														                               FROM CB_BIG_CLASS
														                              WHERE 1=1
														                                <isNotEmpty property="ORGID" prepend="AND">
														                                    ORG_ID = #ORGID#
														                                </isNotEmpty>
														                                <isNotEmpty property="COMPANYID" prepend="AND">
														                                    COMPANY_ID = #COMPANYID#
														                                </isNotEmpty>
														                                AND BIG_NAME LIKE  '%' || #BIGNAME# || '%')
														        </isNotEmpty>
		                                AND MIDDLE_NAME LIKE  '%' || #MIDDLENAME# || '%')
        </isNotEmpty>
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                ( SMALL_CODE LIKE #keyword# || '%'
                OR SMALL_NAME LIKE #keyword# || '%' )
            </isNotEqual>
        </isNotEmpty>
        <isNotEmpty property="GUBUN" prepend="ORDER BY">
         SMALL_CODE
        </isNotEmpty>
        <isEmpty property="GUBUN" prepend="ORDER BY">
        SMALL_NAME
        </isEmpty>
    </sql>

    <select id="search.smallclass.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.smallclass.lov.sql-select" />
            <include refid="search.smallclass.lov.sql-where" />
    </select>

    <select id="search.smallclass.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
          <include refid="search.smallclass.lov.sql-select" />
          <include refid="search.smallclass.lov.sql-where" />
        ) TOT
    </select>

    <select id="search.smallclass.distinct.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
        SELECT DISTINCT LABEL
           FROM (
            <include refid="search.smallclass.lov.sql-select" />
            <include refid="search.smallclass.lov.sql-where" />
        )
        ORDER BY LABEL
    </select>

    <select id="search.smallclass.distinct.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            SELECT DISTINCT LABEL
               FROM (
                <include refid="search.smallclass.lov.sql-select" />
                <include refid="search.smallclass.lov.sql-where" />
            )
        ) TOT
    </select>
    
    <sql id="search.middleclass.lov.sql-select">
        SELECT MIDDLE_CODE AS ID,
                 MIDDLE_CODE AS VALUE,
                 MIDDLE_NAME AS LABEL,
                 DECODE(REMARKS, NULL, MIDDLE_NAME, MIDDLE_NAME || ' (' || REMARKS || ')' ) AS REMARKS
          FROM CB_MIDDLE_CLASS
    </sql>

    <sql id="search.middleclass.lov.sql-where">
         WHERE GROUP_CODE = #GROUPCODE#
        <isNotEmpty property="ORGID" prepend="AND">
            ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="BIGCODE" prepend="AND">
           BIG_CODE = #BIGCODE#
        </isNotEmpty>
        <isNotEmpty property="BIGNAME" prepend="AND">
           BIG_CODE IN (SELECT BIG_CODE
                               FROM CB_BIG_CLASS
                              WHERE 1=1
												        <isNotEmpty property="ORGID" prepend="AND">
												            ORG_ID = #ORGID#
												        </isNotEmpty>
												        <isNotEmpty property="COMPANYID" prepend="AND">
												            COMPANY_ID = #COMPANYID#
												        </isNotEmpty>
                                AND BIG_NAME LIKE  '%' || #BIGNAME# || '%')
        </isNotEmpty>
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                ( MIDDLE_CODE LIKE #keyword# || '%'
                OR MIDDLE_NAME LIKE #keyword# || '%' )
            </isNotEqual>
        </isNotEmpty>
        <isNotEmpty property="GUBUN" prepend="ORDER BY">
         MIDDLE_CODE
        </isNotEmpty>
        <isEmpty property="GUBUN" prepend="ORDER BY">
        MIDDLE_NAME
        </isEmpty>
    </sql>

    <select id="search.middleclass.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.middleclass.lov.sql-select" />
            <include refid="search.middleclass.lov.sql-where" />
    </select>

    <select id="search.middleclass.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.middleclass.lov.sql-select" />
            <include refid="search.middleclass.lov.sql-where" />
        ) TOT
    </select>
    
    <select id="search.middleclass.distinct.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
        SELECT DISTINCT LABEL
           FROM (
            <include refid="search.middleclass.lov.sql-select" />
            <include refid="search.middleclass.lov.sql-where" />
        )
        ORDER BY LABEL
    </select>

    <select id="search.middleclass.distinct.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            SELECT DISTINCT LABEL
               FROM (
                <include refid="search.middleclass.lov.sql-select" />
                <include refid="search.middleclass.lov.sql-where" />
            )
        ) TOT
    </select>
    
    <sql id="search.bigclass.lov.sql-select">
        SELECT BIG_CODE AS ID,
                 BIG_CODE AS VALUE,
                 BIG_NAME AS LABEL,
                 GROUP_CODE AS GROUPCODE
          FROM CB_BIG_CLASS
    </sql>

    <sql id="search.bigclass.lov.sql-where">
         WHERE 1 = 1
        <isNotEmpty property="GROUPCODE" prepend="AND">
            GROUP_CODE = #GROUPCODE#
        </isNotEmpty>
        <isNotEmpty property="ORGID" prepend="AND">
            ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                ( BIG_CODE LIKE #keyword# || '%'
                OR BIG_NAME LIKE #keyword# || '%' )
            </isNotEqual>
        </isNotEmpty>
        <isNotEmpty property="ITEMTYPE" prepend="AND">
            (ORG_ID, COMPANY_ID, GROUP_CODE, BIG_CODE) IN (SELECT ORG_ID, COMPANY_ID, GROUP_CODE, BIG_CODE
																								                                FROM CB_ITEM_MASTER
																								                               WHERE 1=1
        <isNotEmpty property="ORGID" prepend="AND">
            ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            COMPANY_ID = #COMPANYID#
        </isNotEmpty>
																								                                 AND ITEM_TYPE = #ITEMTYPE#
                                                                              GROUP BY ORG_ID, COMPANY_ID, GROUP_CODE, BIG_CODE)
        </isNotEmpty>
        <isNotEmpty property="GUBUN" prepend="ORDER BY">
            GROUP_CODE, BIG_CODE
        </isNotEmpty>
        <isEmpty property="GUBUN" prepend="ORDER BY">
            GROUP_CODE, BIG_NAME
        </isEmpty>
    </sql>

    <select id="search.bigclass.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.bigclass.lov.sql-select" />
            <include refid="search.bigclass.lov.sql-where" />
    </select>

    <select id="search.bigclass.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.bigclass.lov.sql-select" />
            <include refid="search.bigclass.lov.sql-where" />
        ) TOT
    </select>
    
    <select id="search.bigclass.distinct.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
        SELECT DISTINCT LABEL
           FROM (
            <include refid="search.bigclass.lov.sql-select" />
            <include refid="search.bigclass.lov.sql-where" />
        )
        ORDER BY LABEL
    </select>

    <select id="search.bigclass.distinct.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
		        SELECT DISTINCT LABEL
		           FROM (
		            <include refid="search.bigclass.lov.sql-select" />
		            <include refid="search.bigclass.lov.sql-where" />
		        )
        ) TOT
    </select>
    <!-- 대 / 중 / 소분류 끝 -->
    
    <sql id="search.porno.list.lov.sql-select">
        SELECT RANK() OVER(ORDER BY ORGID, COMPANYID, REQUESTDATE DESC, PORNO DESC) AS RN
                  ,ORGID
                  ,ORGNAME
                  ,COMPANYID
                  ,COMPANYNAME
                  ,PORNO
                  ,REQUESTDATE
                  ,REQUESTPERSON
                  ,REQUESTPERSONNAME
                  ,CUSTOMERCODE
                  ,CUSTOMERNAME
                  ,REMARKS
                  ,CONFIRMSTATUS
                  ,CONFIRMSTATUSNAME
                  ,ORDERFINISHYN
			           ,(SELECT SUM(SUPPLY_PRICE) FROM CB_PURCHASE_D PD WHERE PD.ORG_ID = PH.ORGID AND PD.COMPANY_ID = PH.COMPANYID AND PD.POR_NO = PH.PORNO) AS SUPPLYPRICE
			           ,(SELECT SUM(ADDITIONAL_TAX) FROM CB_PURCHASE_D PD WHERE PD.ORG_ID = PH.ORGID AND PD.COMPANY_ID = PH.COMPANYID AND PD.POR_NO = PH.PORNO) AS ADDITIONALTAX
			           ,(SELECT SUM(ADDITIONAL_TAX + SUPPLY_PRICE) FROM CB_PURCHASE_D PD WHERE PD.ORG_ID = PH.ORGID AND PD.COMPANY_ID = PH.COMPANYID AND PD.POR_NO = PH.PORNO) AS TOTAL
          FROM CB_PURCHASE_LIST_V PH
    </sql>

    <sql id="search.porno.list.lov.sql-where">
         WHERE 1 = 1
        <isNotEmpty property="ORGID" prepend="AND">
            ORGID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            COMPANYID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="PORNO" prepend="AND">
            PORNO = #PORNO#
        </isNotEmpty>
         ORDER BY ORGID, COMPANYID, PORNO, REQUESTDATE
    </sql>

    <select id="search.porno.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.porno.list.lov.sql-select" />
            <include refid="search.porno.list.lov.sql-where" />
    </select>

    <select id="search.porno.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.porno.list.lov.sql-select" />
            <include refid="search.porno.list.lov.sql-where" />
        ) TOT
    </select>
    
    <!-- 입고번호 Lov -->
    <sql id="search.transno.list.lov.sql-select">
    <![CDATA[
    SELECT RANK() OVER(ORDER BY TH.TRANS_NO, TH.TRANS_DATE) AS RN
            ,TH.ORG_ID AS ORGID
            ,TH.COMPANY_ID AS COMPANYID
            ,TH.TRANS_NO AS TRANSNO
            ,TO_CHAR(TH.TRANS_DATE, 'YYYY-MM-DD') AS TRANSDATE
            ,TO_CHAR(TH.TRADE_DATE, 'YYYY-MM-DD') AS TRADEDATE
            ,TH.CUSTOMER_CODE AS CUSTOMERCODE
            ,CC.CUSTOMER_NAME AS CUSTOMERNAME
            ,TH.TRANS_DIV AS TRANSDIV
            ,CB_COMMON_STANDARD_PKG.CB_FIND_SMALL_NAME_1(TH.ORG_ID
                                                        ,TH.COMPANY_ID
                                                        ,'MAT'
                                                        ,'TRANS_DIV'
                                                        ,TH.TRANS_DIV
                                                        ,'LABEL') AS TRANSDIVNAME
            ,TH.CUSTOMER_CODE_S AS CUSTOMERCODES
            ,(SELECT CC1.CUSTOMER_NAME
                FROM CB_CUSTOMER CC1
               WHERE CC1.ORG_ID = TH.ORG_ID
                 AND CC1.COMPANY_ID = TH.COMPANY_ID
                 AND CC1.CUSTOMER_CODE = TH.CUSTOMER_CODE_S) AS CUSTOMERNAMES
            ,TH.PAID_YN AS PAIDYN
            ,CB_COMMON_STANDARD_PKG.CB_FIND_SMALL_NAME_1(TH.ORG_ID
                                                        ,TH.COMPANY_ID
                                                        ,'MAT'
                                                        ,'PAID_YN'
                                                        ,TH.PAID_YN
                                                        ,'LABEL') AS PAIDYNNAME
            ,TH.REMARKS AS REMARKS
      FROM CB_TRANS_H TH
             ,CB_CUSTOMER CC
    ]]>
    </sql>

    <sql id="search.transno.list.lov.sql-where">
         WHERE TH.ORG_ID = CC.ORG_ID (+)
            AND TH.COMPANY_ID = CC.COMPANY_ID (+)
            AND TH.CUSTOMER_CODE = CC.CUSTOMER_CODE (+)
        <isNotEmpty property="ORGID" prepend="AND">
            TH.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            TH.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="CUSTOMERCODE" prepend="AND">
            TH.CUSTOMER_CODE = #CUSTOMERCODE#
        </isNotEmpty>
        <isNotEmpty property="TRANSDATE" prepend="AND">
            TH.TRANS_DATE = TO_DATE(#TRANSDATE#, 'YYYY-MM-DD')
        </isNotEmpty>
        <isNotEmpty property="TRANSNO" prepend="AND">
            TH.TRANS_NO = #TRANSNO#
        </isNotEmpty>
        <isNotEmpty property="keyword">
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                TH.TRANS_NO LIKE '%' || #keyword# || '%'
            </isNotEqual>
        </isNotEmpty>
    </sql>

    <select id="search.transno.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.transno.list.lov.sql-select" />
            <include refid="search.transno.list.lov.sql-where" />
    </select>

    <select id="search.transno.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.transno.list.lov.sql-select" />
            <include refid="search.transno.list.lov.sql-where" />
        ) TOT
    </select>

    
     
    <sql id="search.pono.list.lov.sql-select">
        SELECT RANK() OVER(ORDER BY OH.ORG_ID, OH.COMPANY_ID, OH.PO_NO DESC ) AS RN
                 ,OH.ORG_ID AS ORGID
                 ,OH.COMPANY_ID AS COMPANYID
                 ,OH.PO_NO AS PONO
                 ,TO_CHAR(OH.PO_DATE, 'YYYY-MM-DD') AS PODATE
                 ,OH.PO_STATUS AS POSTATUS
                 ,(SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CODE SC
                   WHERE SC.ORG_ID = OH.ORG_ID
                     AND SC.COMPANY_ID = OH.COMPANY_ID
                     AND SC.BIG_CODE = 'MAT'
                     AND SC.MIDDLE_CODE = 'STATUS_CODE'
                     AND SC.SMALL_CODE = OH.PO_STATUS) AS POSTATUSNAME
                 ,OH.CUSTOMER_CODE AS CUSTOMERCODE
                 ,(SELECT CC.CUSTOMER_NAME
                    FROM CB_CUSTOMER CC
                   WHERE CC.ORG_ID = OH.ORG_ID
                     AND CC.COMPANY_ID = OH.COMPANY_ID
                     AND CC.CUSTOMER_CODE = OH.CUSTOMER_CODE) AS CUSTOMERNAME
                 ,OH.CUSTOMER_PERSON AS CUSTOMERPERSON
                 ,(SELECT CM.MEMBER_NAME
                     FROM CB_CUSTOMER_MEMBER CM
                    WHERE CM.ORG_ID = OH.ORG_ID
                      AND CM.COMPANY_ID = OH.COMPANY_ID
                      AND CM.CUSTOMER_CODE = OH.CUSTOMER_CODE
                      AND CM.MEMBER_ID = OH.CUSTOMER_PERSON) AS CUSTOMERPERSONNAME
                 ,OH.PO_PERSON AS POPERSON
                 ,(SELECT HM.KR_NAME
                    FROM CB_HUMANRESOURCE_MANAGER HM
                   WHERE HM.EMPLOYEE_NUMBER = OH.PO_PERSON) AS POPERSONNAME
                 ,OH.USE_DIV AS USEDIV
                 ,(SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CODE SC
                   WHERE SC.ORG_ID = OH.ORG_ID
                     AND SC.COMPANY_ID = OH.COMPANY_ID
                     AND SC.BIG_CODE = 'MAT'
                     AND SC.MIDDLE_CODE = 'ORDER_DIV'
                     AND SC.SMALL_CODE = OH.USE_DIV) AS USEDIVNAME
                 ,OH.TAX_DIV AS TAXDIV
                 ,(SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CODE SC
                   WHERE SC.ORG_ID = OH.ORG_ID
                     AND SC.COMPANY_ID = OH.COMPANY_ID
                     AND SC.BIG_CODE = 'CMM'
                     AND SC.MIDDLE_CODE = 'TAX_DIV'
                     AND SC.SMALL_CODE = OH.TAX_DIV) AS TAXDIVNAME
                 ,OH.DELIVERY_LOCATION AS DELIVERYLOCATION
                 ,(SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CODE SC
                   WHERE SC.ORG_ID = OH.ORG_ID
                     AND SC.COMPANY_ID = OH.COMPANY_ID
                     AND SC.BIG_CODE = 'MAT'
                     AND SC.MIDDLE_CODE = 'DELIVERY_LOCATION'
                     AND SC.SMALL_CODE = OH.DELIVERY_LOCATION) AS DELIVERYLOCATIONNAME
                 ,(SELECT SUM(NVL(OD.SUPPLY_PRICE, 0) + NVL(OD.ADDITIONAL_TAX, 0)) AS TOTAL
                     FROM CB_ORDER_D OD
                    WHERE OD.ORG_ID = OH.ORG_ID
                       AND OD.COMPANY_ID = OH.COMPANY_ID
                       AND OD.PO_NO = OH.PO_NO) AS TOTAL
                 ,OH.REMARKS AS REMARKS
        FROM CB_ORDER_H OH
    </sql>

    <sql id="search.pono.list.lov.sql-where">
         WHERE 1 = 1
        <isNotEmpty property="ORGID" prepend="AND">
            OH.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            OH.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="PONO" prepend="AND">
            OH.PO_NO = #PONO#
        </isNotEmpty>
        <isNotEmpty property="POTO">
            <isNotEmpty property="POFROM" prepend="AND">
               OH.PO_DATE BETWEEN TO_DATE(#POFROM#, 'YYYY-MM-DD') AND TO_DATE(#POTO#, 'YYYY-MM-DD')
            </isNotEmpty>
            <isEmpty property="POFROM" prepend="AND">
               OH.PO_DATE = TO_DATE(#POTO#, 'YYYY-MM-DD')
            </isEmpty>
        </isNotEmpty>
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                OH.PO_NO LIKE #keyword# || '%'
            </isNotEqual>
        </isNotEmpty>
        ORDER BY OH.PO_NO, OH.PO_DATE
    </sql>

    <select id="search.pono.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.pono.list.lov.sql-select" />
            <include refid="search.pono.list.lov.sql-where" />
    </select>

    <select id="search.pono.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.pono.list.lov.sql-select" />
            <include refid="search.pono.list.lov.sql-where" />
        ) TOT
    </select>
    
    <!--자재요청화면에서 요청번호 가져오기 -->
    <sql id="search.reqno.list.lov.sql-select">
        SELECT ORGID
                 ,ORGNAME
                 ,COMPANYID
                 ,COMPANYNAME
                 ,PORNO
                 ,REQUESTDATE
                 ,REQUESTPERSON
                 ,REQUESTPERSONNAME
                 ,CUSTOMERCODE
                 ,CUSTOMERNAME
                 ,REMARKS
                 ,CONFIRMSTATUS
                 ,CONFIRMSTATUSNAME
                 ,ORDERFINISHYN
         FROM CB_PURCHASE_LIST_V PH
    </sql>

    <sql id="search.reqno.list.lov.sql-where">
         WHERE 1 = 1
          <isNotEmpty property="ORGID" prepend="AND">
            PH.ORGID = #ORGID#
        </isNotEmpty>
          <isNotEmpty property="COMPANYID" prepend="AND">
            PH.COMPANYID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="REQTO">
             <isNotEmpty property="POFROM" prepend="AND">
                REQUESTDATE BETWEEN #REQFROM# AND #REQTO#
             </isNotEmpty>
             <isEmpty property="REQFROM" prepend="AND">
                REQUESTDATE = #REQTO#
             </isEmpty>
         </isNotEmpty>
         <isNotEmpty property="PORNO" prepend="AND">
            PH.PORNO = #PORNO#
        </isNotEmpty>
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                PH.PORNO LIKE  #keyword# || '%'
            </isNotEqual>
        </isNotEmpty>
        ORDER BY PH.PORNO 
    </sql>

    <select id="search.reqno.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.reqno.list.lov.sql-select" />
            <include refid="search.reqno.list.lov.sql-where" />
    </select>

    <select id="search.reqno.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.reqno.list.lov.sql-select" />
            <include refid="search.reqno.list.lov.sql-where" />
        ) TOT
    </select>
     
    <!-- 입고번호 LIST Lov -->
    <sql id="search.transno.list2.lov.sql-select">
        SELECT RANK() OVER(ORDER BY TH.TRANS_NO, TH.TRANS_DATE) AS RN
            ,TH.ORG_ID AS ORGID
            ,TH.COMPANY_ID AS COMPANYID
            ,TH.TRANS_NO AS TRANSNO
      FROM CB_TRANS_H TH
    </sql>

    <sql id="search.transno.list2.lov.sql-where">
         WHERE 1 = 1
             <isNotEmpty property="ORGID" prepend="AND">
                    TH.ORG_ID = #ORGID#
             </isNotEmpty>
             <isNotEmpty property="COMPANYID" prepend="AND">
                    TH.COMPANY_ID = #COMPANYID#
             </isNotEmpty>
             <isNotEmpty property="TRANSTO">
             <isNotEmpty property="TRANSFROM" prepend="AND">
                TRANS_DATE BETWEEN TO_DATE(#TRANSFROM#,'YYYY-MM-DD') AND TO_DATE(#TRANSTO#,'YYYY-MM-DD')
             </isNotEmpty>
             <isEmpty property="TRANSFROM" prepend="AND">
                TRANS_DATE = TO_DATE(#TRANSTO#,'YYYY-MM-DD')
             </isEmpty>
         </isNotEmpty>
         <isNotEmpty property="TRANSNO" prepend="AND">
            TH.TRANS_NO = #TRANSNO#
        </isNotEmpty>
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                TH.TRANS_NO LIKE '%' || #keyword# || '%'
            </isNotEqual>
        </isNotEmpty>
    </sql>

    <select id="search.transno.list2.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.transno.list2.lov.sql-select" />
            <include refid="search.transno.list2.lov.sql-where" />
    </select>

    <select id="search.transno.list2.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.transno.list2.lov.sql-select" />
            <include refid="search.transno.list2.lov.sql-where" />
        ) TOT
    </select>


    <sql id="search.login.name.lov.sql-where">
         WHERE 1 = 1
        <isNotEmpty property="ROLEUSER" prepend="AND">
                HM.EMPLOYEE_NUMBER = #ROLEUSER#
        </isNotEmpty>
        AND HM.EMPLOYEE_NUMBER IN (SELECT HV.EMPLOYEE_NUMBER
                                                  FROM CB_HUMANRESOURCE_MANAGER_V HV
                                                 WHERE 1=1
        <isNotEmpty property="ORGID" prepend="AND">
                HV.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
                HV.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
                                   )
    </sql>

    <select id="search.login.name.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.worker.name.lov.sql-select" />
            <include refid="search.login.name.lov.sql-where" />
            ORDER BY HM.KR_NAME
    </select>
    
    <sql id="search.shipped.list.lov.sql-select">
        SELECT SH.SHIP_NO AS SHIPNO,
           SH.CONFIRM_YN AS CONFIRMYN,
           TO_CHAR(SH.SHIP_DATE, 'YYYY-MM-DD') AS SHIPDATE,
           SH.CUSTOMER_CODE AS CUSTOMERCODE,
           SH.PHONE_NUMBER AS PHONENUMBER,
           SH.SHIP_PERSON AS SHIPPERSON,
           (SELECT HM.KR_NAME
              FROM CB_HUMANRESOURCE_MANAGER HM
             WHERE HM.EMPLOYEE_NUMBER = SH.SHIP_PERSON) AS SHIPPERSONNAME,
           SH.DELIVERY_LOCATION AS DELIVERYLOCATION,
           SH.REMARKS AS REMARKS
      FROM CB_SHIPPING_H SH
    </sql>

    <sql id="search.shipped.list.lov.sql-where">
         WHERE 1 = 1
        <isNotEmpty property="CUSTOMERCODE" prepend="AND">
            SH.CUSTOMER_CODE = #CUSTOMERCODE#
        </isNotEmpty>
        <isNotEmpty property="SHIPDATE" prepend="AND">
            SH.SHIP_DATE = TO_DATE(#SHIPDATE#, 'YYYY-MM-DD')
        </isNotEmpty>
        <isNotEmpty property="SHIPNO" prepend="AND">
            SH.SHIP_NO = #SHIPNO#
        </isNotEmpty>
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                SH.SHIP_NO LIKE #keyword# || '%'
            </isNotEqual>
        </isNotEmpty>
    </sql>

    <select id="search.shipped.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.shipped.list.lov.sql-select" />
            <include refid="search.shipped.list.lov.sql-where" />
            ORDER BY SH.SHIP_NO
    </select>

    <select id="search.shipped.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.shipped.list.lov.sql-select" />
            <include refid="search.shipped.list.lov.sql-where" />
            ORDER BY SH.SHIP_NO
        ) TOT
    </select>
    
    
  <!-- 입고제품 불러오기 Lov 시작-->
  <sql id="search.warehousing.list.lov.sql-select">
      SELECT RANK() OVER(ORDER BY ORG_ID, COMPANY_ID, WAREHOUSING_DATE DESC, ITEM_NAME, WORK_ORDER_ID DESC) AS RN 
              ,ORG_ID AS ORGID
              ,COMPANY_ID AS COMPANYID
              ,WAREHOUSING_NO AS WAREHOUSINGNO
              ,WORK_PLAN_NO AS WORKPLANNO
              ,ITEM_CODE AS ITEMCODE
              ,ITEM_NAME AS ITEMNAME
              ,ORDER_NAME AS ORDERNAME
              ,MODEL AS MODEL
              ,MODEL_NAME AS MODELNAME
              ,WORK_ORDER_ID AS WORKORDERID
              ,WORK_ORDER_SEQ AS WORKORDERSEQ
              ,CUSTOMER_LOT AS CUSTOMERLOT
              ,WAREHOUSING_DATE AS WAREHOUSINGDATE
              ,WAREHOUSING_QTY - SHIP_QTY AS WAREHOUSINGQTY
              ,REMARKS
      FROM CB_WAREHOUSING_POPUP_V
  </sql>
  
  <sql id="search.warehousing.list.lov.sql-where">
       WHERE ( WAREHOUSING_QTY - SHIP_QTY ) > 0
      <isNotEmpty property="ORGID" prepend="AND">
          ORG_ID = #ORGID#
      </isNotEmpty>
      <isNotEmpty property="COMPANYID" prepend="AND">
          COMPANY_ID = #COMPANYID#
      </isNotEmpty>
     <isNotEmpty property="WARETO">
        <isNotEmpty property="WAREFROM" prepend="AND">
          WAREHOUSING_DATE1 BETWEEN TO_DATE(#WAREFROM#, 'YYYY-MM-DD') AND TO_DATE(#WARETO#, 'YYYY-MM-DD')
        </isNotEmpty>
        <isEmpty property="WAREFROM" prepend="AND">
          WAREHOUSING_DATE1 = TO_DATE(#WARETO#, 'YYYY-MM-DD')
        </isEmpty>
      </isNotEmpty>
     <isEmpty property="WARETO">
        <isNotEmpty property="WAREFROM" prepend="AND">
          WAREHOUSING_DATE1 = TO_DATE(#WAREFROM#, 'YYYY-MM-DD')
        </isNotEmpty>
     </isEmpty>
      <isNotEmpty property="ITEMCODE" prepend="AND">
          ITEM_CODE = #ITEMCODE#
      </isNotEmpty>
     ORDER BY ORG_ID, COMPANY_ID, WAREHOUSING_DATE DESC, ITEM_NAME, WORK_ORDER_ID DESC
  </sql>

  <select id="search.warehousing.list.lov.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap" remapResults="true">
          <include refid="search.warehousing.list.lov.sql-select" />
          <include refid="search.warehousing.list.lov.sql-where" />
  </select>
  
  <select id="search.warehousing.list.lov.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.warehousing.list.lov.sql-select" />
          <include refid="search.warehousing.list.lov.sql-where" />
      ) TOT
  </select>
  <!-- 입고제품 불러오기 Lov 끝-->
    
    
    <sql id="search.equipment.list.lov.sql-select">
        SELECT EM.EQUIPMENT_CODE AS ID
                  ,EM.EQUIPMENT_CODE AS VALUE
                  ,EM.WORK_CENTER_CODE AS WORKCENTERCODE
                  ,(SELECT WC.WORK_CENTER_NAME
                      FROM CB_WORK_CENTER WC
                     WHERE WC.ORG_ID = EM.ORG_ID
                       AND WC.COMPANY_ID = EM.COMPANY_ID
                       AND WC.WORK_CENTER_CODE = EM.WORK_CENTER_CODE) AS LABEL
         FROM CB_EQUIPMENT_MASTER EM
    </sql>

    <sql id="search.equipment.list.lov.sql-where">
         WHERE EM.USE_YN = 'Y'
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                (SELECT WC.WORK_CENTER_NAME
                  FROM CB_WORK_CENTER WC
                 WHERE WC.ORG_ID = EM.ORG_ID
                   AND WC.COMPANY_ID = EM.COMPANY_ID
                   AND WC.WORK_CENTER_CODE = EM.WORK_CENTER_CODE) LIKE #keyword# || '%'
            </isNotEqual>
        </isNotEmpty>
        <isNotEmpty property="ORGID" prepend="AND">
                EM.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
                EM.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="EQUIPMENTCODE" prepend="AND">
                EM.EQUIPMENT_CODE = #EQUIPMENTCODE#
        </isNotEmpty>
        <isNotEmpty property="ITEMCODE" prepend="AND">
                EM.ITEM_CODE = #ITEMCODE#
        </isNotEmpty>
        <isNotEmpty property="ROUTINGID" prepend="AND">
                EM.ROUTING_ID = #ROUTINGID#
        </isNotEmpty>
    </sql>

    <select id="search.equipment.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.equipment.list.lov.sql-select" />
            <include refid="search.equipment.list.lov.sql-where" />
            ORDER BY EM.ORG_ID, EM.COMPANY_ID, EM.EQUIPMENT_NAME, EM.EQUIPMENT_CODE
    </select>

    <select id="search.equipment.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.equipment.list.lov.sql-select" />
            <include refid="search.equipment.list.lov.sql-where" />
            ORDER BY EM.ORG_ID, EM.COMPANY_ID, EM.EQUIPMENT_NAME, EM.EQUIPMENT_CODE
        ) TOT
    </select>
    
    <sql id="search.workcenter.list.lov.sql-select">
        SELECT WC.WORK_CENTER_CODE AS VALUE
                ,WC.WORK_CENTER_NAME AS LABEL
                ,OCV.ORG_NAME AS ORGNAME
                ,OCV.COMPANY_NAME AS COMPANYNAME
                ,GR.RN AS RN
                ,MOD(GR.RN, 3) AS MODRN
                ,WC.ROUTING_CODE AS ROUTINGGROUP
                ,(SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CODE SC
                   WHERE SC.ORG_ID = WC.ORG_ID
                     AND SC.COMPANY_ID = WC.COMPANY_ID
                     AND SC.BIG_CODE = 'MFG'
                     AND SC.MIDDLE_CODE = 'ROUTING_GROUP'
                     AND SC.SMALL_CODE = WC.ROUTING_CODE) AS ROUTINGGROUPNAME
          FROM CB_WORK_CENTER WC
              ,CB_ORG_COMPANY_V OCV
              ,(SELECT SC.SMALL_CODE AS SMALL_CODE
                          ,SC.SMALL_NAME AS SMALL_NAME
                          ,DECODE(MAX(SC.SMALL_CODE),
                                     '01',                   '1',
                                     '02',                   '2',
                                     '03',                   '3',
                                     '04',                   '1',
                                     '05',                   '2',
                                     '06',                   '3') RN
                  FROM CB_SMALL_CODE SC
                 WHERE SC.BIG_CODE = 'MFG'
                   AND SC.MIDDLE_CODE = 'ROUTING_GROUP'
                 GROUP BY SC.ORG_ID, SC.COMPANY_ID, SC.SMALL_CODE, SC.SMALL_NAME) GR
    </sql>

    <sql id="search.workcenter.list.lov.sql-where">
         WHERE WC.USE_YN = 'Y'
           AND WC.ORG_ID = OCV.ORG_ID
           AND WC.COMPANY_ID = OCV.COMPANY_ID
           AND WC.ROUTING_CODE = GR.SMALL_CODE
           AND SYSDATE BETWEEN NVL(WC.EFFECTIVE_START_DATE, TO_DATE('2018-01-01', 'YYYY-MM-DD')) AND NVL(WC.EFFECTIVE_END_DATE, TO_DATE('4999-12-31', 'YYYY-MM-DD'))
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                WC.WORK_CENTER_NAME LIKE #keyword# || '%'
            </isNotEqual>
        </isNotEmpty>
        <isNotEmpty property="ORGID" prepend="AND">
                WC.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
                WC.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="EQUIPMENTCODE" prepend="AND">
                WC.WORK_CENTER_CODE = #EQUIPMENTCODE#
        </isNotEmpty>
        <isNotEmpty property="WORKDEPT" prepend="AND">
                WC.WORK_DEPT = #WORKDEPT#
        </isNotEmpty>
    </sql>

    <select id="search.workcenter.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.workcenter.list.lov.sql-select" />
            <include refid="search.workcenter.list.lov.sql-where" />
            ORDER BY WC.ORG_ID, WC.COMPANY_ID, WC.SEQ
    </select>

    <select id="search.workcenter.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.workcenter.list.lov.sql-select" />
            <include refid="search.workcenter.list.lov.sql-where" />
        ) TOT
    </select>
    
    <sql id="search.relno.list.lov.sql-select">
        SELECT RANK() OVER(ORDER BY RH.ORG_ID, RH.COMPANY_ID, RH.RELEASE_NO) AS RN
                ,RH.ORG_ID AS ORGID
                ,RH.COMPANY_ID AS COMPANYID
                ,RH.RELEASE_NO AS RELEASENO
                ,TO_CHAR(RH.RELEASE_DATE, 'YYYY-MM-DD') AS RELEASEDATE
                ,RH.USE_DIV AS USEDIV
                ,(SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CODE SC
                   WHERE SC.ORG_ID = RH.ORG_ID
                     AND SC.COMPANY_ID = RH.COMPANY_ID
                     AND SC.BIG_CODE = 'MAT'
                     AND SC.MIDDLE_CODE = 'USE_DIV'
                     AND SC.SMALL_CODE = RH.USE_DIV) AS USEDIVNAME
                ,RH.RELEASE_PERSON AS RELEASEPERSON
                ,(SELECT HV.KR_NAME
                    FROM CB_HUMANRESOURCE_MANAGER_V HV
                   WHERE HV.ORG_ID = RH.ORG_ID
                     AND HV.COMPANY_ID = RH.COMPANY_ID
                     AND HV.EMPLOYEE_NUMBER = RH.RELEASE_PERSON) AS RELEASEPERSONNAME
                ,RH.REMARKS AS REMARKS
                ,RH.WORK_ORDER_ID AS WORKORDERID
                ,RH.ITEM_CODE AS ITEMCODE
                ,CIM.ITEM_NAME AS ITEMNAME
                ,CIM.ORDER_NAME AS ORDERNAME
        FROM CB_RELEASE_H RH , CB_ITEM_MASTER CIM
    </sql>

    <sql id="search.relno.list.lov.sql-where">
         WHERE RH.ORG_ID = CIM.ORG_ID (+)
            AND RH.COMPANY_ID = CIM.COMPANY_ID (+)
            AND RH.ITEM_CODE = CIM.ITEM_CODE (+)
        <isNotEmpty property="ORGID" prepend="AND">
            RH.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            RH.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="USEDIV">
            <isEqual property="USEDIV" compareValue="E" prepend="AND">
                    RH.USE_DIV IN ('E', 'F')
            </isEqual>
            <isNotEqual property="USEDIV" compareValue="E" prepend="AND">
                   RH.USE_DIV = #USEDIV#
            </isNotEqual>
          </isNotEmpty>
          <isNotEmpty property="USEDIV2" prepend="AND">
             RH.USE_DIV = #USEDIV2#
          </isNotEmpty>
        <isNotEmpty property="SEARCHTO">
            <isNotEmpty property="SEARCHFROM" prepend="AND">
               RH.RELEASE_DATE BETWEEN TO_DATE(#SEARCHFROM#, 'YYYY-MM-DD') AND TO_DATE(#SEARCHTO#, 'YYYY-MM-DD')
            </isNotEmpty>
            <isEmpty property="SEARCHFROM" prepend="AND">
               RH.RELEASE_DATE = TO_DATE(#SEARCHTO#, 'YYYY-MM-DD')
            </isEmpty>
        </isNotEmpty>
        <isNotEmpty property="RELEASENO" prepend="AND">
           RH.RELEASE_NO = #RELEASENO#
        </isNotEmpty>
        <isNotEmpty property="keyword">
          <isNotEqual compareProperty="keyword" compareValue="%" prepend="AND">
             RH.WORK_ORDER_ID LIKE '%' || #keyword# || '%'
          </isNotEqual>
        </isNotEmpty>
    </sql>

    <select id="search.relno.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.relno.list.lov.sql-select" />
            <include refid="search.relno.list.lov.sql-where" />
    </select>

    <select id="search.relno.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.relno.list.lov.sql-select" />
            <include refid="search.relno.list.lov.sql-where" />
        ) TOT
    </select>
 
 <sql id="search.prod.relno.list.lov.sql-select">
        SELECT RANK() OVER(ORDER BY RH.ORG_ID, RH.COMPANY_ID, RH.RELEASE_NO) AS RN
                ,RH.ORG_ID AS ORGID
                ,RH.COMPANY_ID AS COMPANYID
                ,RH.RELEASE_NO AS RELEASENO
                ,TO_CHAR(RH.RELEASE_DATE, 'YYYY-MM-DD') AS RELEASEDATE
                ,RH.USE_DIV AS USEDIV
                ,DECODE(RH.USE_DIV
                       ,'EP', '제품입고'
                       ,'FP', '제품출고'
                       ,(SELECT SC.SMALL_NAME
                          FROM CB_SMALL_CODE SC
                         WHERE SC.ORG_ID = RH.ORG_ID
                           AND SC.COMPANY_ID = RH.COMPANY_ID
                           AND SC.BIG_CODE = 'MAT'
                           AND SC.MIDDLE_CODE = 'USE_DIV'
                           AND SC.SMALL_CODE = RH.USE_DIV)) AS USEDIVNAME
                ,RH.RELEASE_PERSON AS RELEASEPERSON
                ,(SELECT HV.KR_NAME
                    FROM CB_HUMANRESOURCE_MANAGER_V HV
                   WHERE HV.ORG_ID = RH.ORG_ID
                     AND HV.COMPANY_ID = RH.COMPANY_ID
                     AND HV.EMPLOYEE_NUMBER = RH.RELEASE_PERSON) AS RELEASEPERSONNAME
                ,RH.REMARKS AS REMARKS
                ,RH.WORK_ORDER_ID AS WORKORDERID
                ,RH.ITEM_CODE AS ITEMCODE
                ,CIM.ITEM_NAME AS ITEMNAME
                ,CIM.ORDER_NAME AS ORDERNAME
        FROM CB_RELEASE_H RH , CB_ITEM_MASTER CIM
    </sql>

    <sql id="search.prod.relno.list.lov.sql-where">
         WHERE RH.ORG_ID = CIM.ORG_ID(+)
            AND RH.COMPANY_ID = CIM.COMPANY_ID(+)
            AND RH.ITEM_CODE = CIM.ITEM_CODE(+)
        <isNotEmpty property="ORGID" prepend="AND">
            RH.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            RH.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isEmpty property="USEDIV" prepend="AND">
             RH.USE_DIV IN ('EP', 'FP')
        </isEmpty>
          <isNotEmpty property="USEDIV" prepend="AND">
             RH.USE_DIV = #USEDIV#
          </isNotEmpty>
        <isNotEmpty property="SEARCHTO">
            <isNotEmpty property="SEARCHFROM" prepend="AND">
               RH.RELEASE_DATE BETWEEN TO_DATE(#SEARCHFROM#, 'YYYY-MM-DD') AND TO_DATE(#SEARCHTO#, 'YYYY-MM-DD')
            </isNotEmpty>
            <isEmpty property="SEARCHFROM" prepend="AND">
               RH.RELEASE_DATE = TO_DATE(#SEARCHTO#, 'YYYY-MM-DD')
            </isEmpty>
        </isNotEmpty>
        <isNotEmpty property="RELEASENO" prepend="AND">
           RH.RELEASE_NO = #RELEASENO#
        </isNotEmpty>
        <isNotEmpty property="keyword">
          <isNotEqual compareProperty="keyword" compareValue="%" prepend="AND">
             RH.RELEASE_NO LIKE '%' || #keyword# || '%'
          </isNotEqual>
        </isNotEmpty>
            ORDER BY RH.ORG_ID, RH.COMPANY_ID, RH.RELEASE_NO
    </sql>

    <select id="search.prod.relno.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.prod.relno.list.lov.sql-select" />
            <include refid="search.prod.relno.list.lov.sql-where" />
    </select>

    <select id="search.prod.relno.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.prod.relno.list.lov.sql-select" />
            <include refid="search.prod.relno.list.lov.sql-where" />
        ) TOT
    </select>
 
   <sql id="search.relno.list.lov.sql-select2">
        SELECT DISTINCT RH.WORK_ORDER_ID AS WORKORDERID
        FROM CB_RELEASE_H RH
    </sql>

    <sql id="search.relno.list.lov.sql-where2">
         WHERE WORK_ORDER_ID IS NOT NULL 
        <isNotEmpty property="ORGID" prepend="AND">
            RH.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            RH.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
          <isNotEmpty property="USEDIV2" prepend="AND">
             RH.USE_DIV = #USEDIV2#
          </isNotEmpty>
        <isNotEmpty property="SEARCHTO">
            <isNotEmpty property="SEARCHFROM" prepend="AND">
               RH.RELEASE_DATE BETWEEN TO_DATE(#SEARCHFROM#, 'YYYY-MM-DD') AND TO_DATE(#SEARCHTO#, 'YYYY-MM-DD')
            </isNotEmpty>
            <isEmpty property="SEARCHFROM" prepend="AND">
               RH.RELEASE_DATE = TO_DATE(#SEARCHTO#, 'YYYY-MM-DD')
            </isEmpty>
        </isNotEmpty>
         <isNotEmpty property="keyword">
           <isNotEqual compareProperty="keyword" compareValue="%" prepend="AND">
              RH.WORK_ORDER_ID LIKE '%' || #keyword# || '%'
           </isNotEqual>
         </isNotEmpty>

    </sql>

    <select id="search.relno.list.lov.select2" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.relno.list.lov.sql-select2" />
            <include refid="search.relno.list.lov.sql-where2" />
            ORDER BY   RH.WORK_ORDER_ID
    </select>

    <select id="search.relno.list.lov.count2" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.relno.list.lov.sql-select2" />
            <include refid="search.relno.list.lov.sql-where2" />
        ) TOT
    </select>
        
    
    
  <!-- 생산출고바코드 Lov 시작-->
    <sql id="search.barcodeorder.lov.sql-select">
        SELECT RANK() OVER(ORDER BY ORGID, COMPANYID, LOTNO) AS RN
                  ,ITEMCODE
                  ,ITEMNAME
                  ,ORDERNAME
                  ,LOTNO
                  ,DECODE(ORDERNAME
                         ,NULL, ITEMNAME
                         ,ITEMNAME || ', ' || ORDERNAME) ITEMORDERNAME
                  ,UOM
                  ,UOMNAME
                  ,LOTQTY AS LOTQTY
                  ,(RELEASEQTY - RETURNQTY) AS RELEASEQTY
                  ,(LOTQTY - RELEASEQTY + RETURNQTY ) AS INPUTQTY
          FROM CB_TRANS_LOT_H_V
    </sql>
    
    <sql id="search.barcodeorder.lov.sql-where">
         WHERE LOTNO IS NOT NULL
            AND LOTQTY - RELEASEQTY + RETURNQTY  > 0
        <isNotEmpty property="ORGID" prepend="AND">
            ORGID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            COMPANYID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="ITEMCODE" prepend="AND">
            ITEMCODE LIKE  '%' || #ITEMCODE# || '%'
        </isNotEmpty>
        <isNotEmpty property="ITEMNAME" prepend="AND">
            ITEMNAME LIKE '%' || #ITEMNAME# || '%'
        </isNotEmpty>
        <isNotEmpty property="ORDERNAME" prepend="AND">
            ORDERNAME LIKE '%' || #ORDERNAME# || '%'
        </isNotEmpty>
        <isNotEmpty property="LOTNO" prepend="AND">
            LOTNO LIKE  '%' || #LOTNO# || '%'
        </isNotEmpty>
        <isNotEmpty property="keyword" >
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                ITEMNAME LIKE '%' || #keyword# || '%'
            </isNotEqual>
        </isNotEmpty>
    </sql>

    <select id="search.barcodeorder.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap" remapResults="true">
            <include refid="search.barcodeorder.lov.sql-select" />
            <include refid="search.barcodeorder.lov.sql-where" />
            ORDER BY ORGID, COMPANYID, LOTNO
    </select>
    
    <select id="search.barcodeorder.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.barcodeorder.lov.sql-select" />
            <include refid="search.barcodeorder.lov.sql-where" />
        ) TOT
    </select>
  <!-- 생산출고 Lov 끝 -->
  
  <!-- 검사기준정보 Lov 시작-->
    <sql id="search.checkmaster.lov.sql-select">
        SELECT RANK() OVER(ORDER BY ORG_ID, COMPANY_ID, ITEM_CODE, CHECK_BIG, ORDER_NO) AS RN,
                 ORG_ID AS ORGID,
                 COMPANY_ID AS COMPANYID,
                 CHECK_SEQ AS CHECKSEQ,
                 ITEM_CODE AS ITEMCODE,
                 CHECK_BIG AS CHECKBIG,
                 (SELECT CB.BIG_NAME
                    FROM CB_CHECK_BIG_CODE CB
                   WHERE CB.ORG_ID = CCM.ORG_ID
                     AND CB.COMPANY_ID = CCM.COMPANY_ID
                     AND CB.BIG_CODE = CCM.CHECK_BIG) AS CHECKBIGNAME,
                 CHECK_MIDDLE AS CHECKMIDDLE,
                 (SELECT CM.MIDDLE_NAME
                    FROM CB_CHECK_MIDDLE_CODE CM
                   WHERE CM.ORG_ID = CCM.ORG_ID
                     AND CM.COMPANY_ID = CCM.COMPANY_ID
                     AND CM.BIG_CODE = CCM.CHECK_BIG
                     AND CM.MIDDLE_CODE = CCM.CHECK_MIDDLE) AS CHECKMIDDLENAME,
                 CHECK_SMALL AS CHECKSMALL,
                 (SELECT CS.SMALL_NAME
                    FROM CB_CHECK_SMALL_CODE CS
                   WHERE CS.ORG_ID = CCM.ORG_ID
                     AND CS.COMPANY_ID = CCM.COMPANY_ID
                     AND CS.BIG_CODE = CCM.CHECK_BIG
                     AND CS.MIDDLE_CODE = CCM.CHECK_MIDDLE
                     AND CS.SMALL_CODE = CCM.CHECK_SMALL) AS CHECKSMALLNAME,
                 ROUTING_ID AS ROUTINGID,
                 ROUTING_NO AS ROUTINGNO,
                 (SELECT  (SELECT SC.SMALL_NAME
                               FROM CB_SMALL_CODE SC
                              WHERE SC.ORG_ID = RC.ORG_ID
                                AND SC.COMPANY_ID = RC.COMPANY_ID
                                AND SC.BIG_CODE = 'MFG'
                                AND SC.MIDDLE_CODE = 'ROUTING_NAME'
                                AND SC.SMALL_CODE = RC.ROUTING_NO)
                    FROM CB_ROUTING_CONTROL RC
                   WHERE RC.ORG_ID = CCM.ORG_ID
                     AND RC.COMPANY_ID = CCM.COMPANY_ID
                     AND RC.ROUTING_ID = CCM.ROUTING_ID) AS ROUTINGNAME,
                 CHECK_UOM AS UOM,
                 (SELECT CC.SMALL_NAME
                    FROM CB_SMALL_CODE CC
                   WHERE CC.ORG_ID = CCM.ORG_ID
                     AND CC.COMPANY_ID = CCM.COMPANY_ID
                     AND CC.BIG_CODE = 'CMM'
                     AND CC.MIDDLE_CODE = 'UOM'
                     AND CC.SMALL_CODE = CCM.CHECK_UOM) AS UOMNAME,
                 STANDARD_VALUE AS STANDARDVALUE,
                 MAX_VALUE AS MAXVALUE,
                 MIN_VALUE AS MINVALUE,
                 TO_CHAR(EFFECTIVE_START_DATE, 'YYYY-MM-DD') AS EFFECTIVESTARTDATE,
                 TO_CHAR(EFFECTIVE_END_DATE, 'YYYY-MM-DD') AS EFFECTIVEENDDATE,
                 CREATED_BY AS CREATEDBY,
                 TO_CHAR(CREATION_DATE, 'YYYY-MM-DD') AS CREATIONDATE,
                 LAST_UPDATED_BY AS LASTUPDATEDBY,
                 TO_CHAR(LAST_UPDATE_DATE, 'YYYY-MM-DD') AS LASTUPDATEDATE,
                 CCM.CHECK_QTY AS CHECKQTY,
                 CCM.ORDER_NO AS ORDERNO,
                 CCM.SPECIAL_CHECK AS SPECIALCHECK,
                 (SELECT CC.SMALL_NAME
                    FROM CB_SMALL_CODE CC
                   WHERE CC.ORG_ID = CCM.ORG_ID
                     AND CC.COMPANY_ID = CCM.COMPANY_ID
                     AND CC.BIG_CODE = 'QM'
                     AND CC.MIDDLE_CODE = 'SPECIAL_CHECK'
                     AND CC.SMALL_CODE = CCM.SPECIAL_CHECK) AS SPECIALCHECKNAME,
                 CCM.CHECK_METHOD_TYPE AS CHECKMETHODTYPE,
                 (SELECT CC.SMALL_NAME
                    FROM CB_SMALL_CODE CC
                   WHERE CC.ORG_ID = CCM.ORG_ID
                     AND CC.COMPANY_ID = CCM.COMPANY_ID
                     AND CC.BIG_CODE = 'QM'
                     AND CC.MIDDLE_CODE = 'CHECK_METHOD_TYPE'
                     AND CC.SMALL_CODE = CCM.CHECK_METHOD_TYPE) AS CHECKMETHODTYPENAME,
                 CCM.FML_CREATE_CODE AS FMLCREATECODE,
                 (SELECT CC.SMALL_NAME
                    FROM CB_SMALL_CODE CC
                   WHERE CC.ORG_ID = CCM.ORG_ID
                     AND CC.COMPANY_ID = CCM.COMPANY_ID
                     AND CC.BIG_CODE = 'QM'
                     AND CC.MIDDLE_CODE = 'FML_TYPE'
                     AND CC.SMALL_CODE = CCM.FML_CREATE_CODE) AS FMLCREATENAME,
                 CCM.CHECK_STANDARD AS CHECKSTANDARD,
                 CCM.CHECK_CYCLE AS CHECKCYCLE,
                 (SELECT CC.SMALL_NAME
                    FROM CB_SMALL_CODE CC
                   WHERE CC.ORG_ID = CCM.ORG_ID
                     AND CC.COMPANY_ID = CCM.COMPANY_ID
                     AND CC.BIG_CODE = 'QM'
                     AND CC.MIDDLE_CODE = 'CHECK_CYCLE'
                     AND CC.SMALL_CODE = CCM.CHECK_CYCLE) AS CHECKCYCLENAME,
                 CCM.CHECK_INTERVAL AS CHECKINTERVAL,
                 CCM.INTERVAL_CNT AS INTERVALCNT,
                 CCM.EXT_STANDARD AS EXTSTANDARD
       FROM CB_CHECK_MASTER CCM
    </sql>
    
    <sql id="search.checkmaster.lov.sql-where">
         WHERE SYSDATE BETWEEN EFFECTIVE_START_DATE AND EFFECTIVE_END_DATE 
        <isNotEmpty property="ORGID" prepend="AND">
            ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="ITEMCODE" prepend="AND">
            ITEM_CODE = #ITEMCODE#
        </isNotEmpty>
        <isNotEmpty property="ROUTINGID" prepend="AND">
            ROUTING_ID = #ROUTINGID#
        </isNotEmpty>
        <isNotEmpty property="CHECKBIG" prepend="AND">
            CHECK_BIG = #CHECKBIG#
        </isNotEmpty>
        <isNotEmpty property="GUBUN" prepend="AND">
            SPECIAL_CHECK = #GUBUN#
        </isNotEmpty>
        ORDER BY ORG_ID, COMPANY_ID, ITEM_CODE, CHECK_BIG, ORDER_NO
    </sql>

    <select id="search.checkmaster.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap" remapResults="true">
            <include refid="search.checkmaster.lov.sql-select" />
            <include refid="search.checkmaster.lov.sql-where" />
    </select>
    
    <select id="search.checkmaster.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.checkmaster.lov.sql-select" />
            <include refid="search.checkmaster.lov.sql-where" />
        ) TOT
    </select>
  <!-- 검사기준정보 Lov 끝 -->
  
  <!-- 작업반 Lov 시작 -->
  <sql id="search.work.dept.list.lov.sql-select">
      SELECT GW.ORG_ID AS ORGID
              ,OCV.ORG_NAME AS ORGNAME
              ,GW.COMPANY_ID AS COMPANYID
              ,OCV.COMPANY_NAME AS COMPANYNAME
              ,GW.WORK_DEPT AS VALUE
              ,SC.SMALL_NAME AS LABEL
      FROM (SELECT WC.ORG_ID     AS ORG_ID
                        ,WC.COMPANY_ID AS COMPANY_ID
                        ,WC.WORK_DEPT  AS WORK_DEPT
                FROM CB_WORK_CENTER WC
               WHERE WC.USE_YN = 'Y'
               GROUP BY WC.ORG_ID, WC.COMPANY_ID, WC.WORK_DEPT) GW
            ,CB_ORG_COMPANY_V OCV
            ,CB_SMALL_CODE SC
  </sql>

  <sql id="search.work.dept.list.lov.sql-where">
       WHERE GW.ORG_ID = OCV.ORG_ID
         AND GW.COMPANY_ID = OCV.COMPANY_ID
         AND GW.ORG_ID = SC.ORG_ID
         AND GW.COMPANY_ID = SC.COMPANY_ID
         AND GW.WORK_DEPT = SC.SMALL_CODE
         AND SC.BIG_CODE = 'CMM'
         AND SC.MIDDLE_CODE = 'WORK_DEPT'
      <isNotEmpty property="ORGID" prepend="AND">
              GW.ORG_ID = #ORGID#
      </isNotEmpty>
      <isNotEmpty property="COMPANYID" prepend="AND">
              GW.COMPANY_ID = #COMPANYID#
      </isNotEmpty>
      <isNotEmpty property="WORKDEPT" prepend="AND">
              GW.WORK_DEPT = #WORKDEPT#
      </isNotEmpty>
  </sql>

  <select id="search.work.dept.list.lov.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
          <include refid="search.work.dept.list.lov.sql-select" />
          <include refid="search.work.dept.list.lov.sql-where" />
          ORDER BY GW.ORG_ID, GW.COMPANY_ID, TO_NUMBER(SC.ATTRIBUTE1)
  </select>

  <select id="search.work.dept.list.lov.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.work.dept.list.lov.sql-select" />
          <include refid="search.work.dept.list.lov.sql-where" />
      ) TOT
  </select>
  <!-- 작업반 Lov 끝 -->
  
  <!-- 공구명 조회 Lov 시작 -->
  <sql id="search.tool.name.lov.sql-select">
  <![CDATA[
      SELECT RANK() OVER(ORDER BY ORG_ID, COMPANY_ID, WORK_CENTER_CODE, ROUTING_ID, ITEM_CODE) AS RN
				      ,ORG_ID AS ORGID
				      ,COMPANY_ID AS COMPANYID
				      ,CHECK_SEQ AS CHECKSEQ
				      ,WORK_CENTER_CODE AS WORKCENTERCODE
				      ,WORK_CENTER_NAME AS WORKCENTERNAME
				      ,EQUIPMENT_CODE AS EQUIPMENTCODE
				      ,EQUIPMENT_NAME AS EQUIPMENTNAME
				      ,ROUTING_ID AS ROUTINGID
				      ,ROUTING_NO AS ROUTINGNO
				      ,ROUTING_NAME AS ROUTINGNAME
				      ,ITEM_CODE AS ITEMCODE
				      ,ITEM_NAME AS ITEMNAME
				      ,ITEM_STANDARD AS ITEMSTANDARD
				      ,TOOL_LIFE AS TOOLLIFE
              ,PAGE_QTY AS PAGEQTY
              ,EQUIP_QTY AS EQUIPQTY
              ,MONTHLY_PROD_QTY AS MONTHLYPRODQTY
				      ,CHECK_CODE1 AS CHECKCODE1
				      ,CHECK_NAME1 AS CHECKNAME1
				      ,CHECK_STANDARD1 AS CHECKSTANDARD1
				      ,STANDARD_VALUE1 AS STANDARDVALUE1
				      ,MAX_VALUE1 AS MAXVALUE1
				      ,MIN_VALUE1 AS MINVALUE1
				      ,CHECK_METHOD_TYPE1 AS CHECKMETHODTYPE1
				      ,CHECK_METHOD_NAME1 AS CHECKMETHODNAME1
				      ,CHECK_CODE2 AS CHECKCODE2
				      ,CHECK_NAME2 AS CHECKNAME2
				      ,CHECK_STANDARD2 AS CHECKSTANDARD2
				      ,STANDARD_VALUE2 AS STANDARDVALUE2
				      ,MAX_VALUE2 AS MAXVALUE2
				      ,MIN_VALUE2 AS MINVALUE2
				      ,CHECK_METHOD_TYPE2 AS CHECKMETHODTYPE2
				      ,CHECK_METHOD_NAME2 AS CHECKMETHODNAME2
				      ,CHECK_CODE3 AS CHECKCODE3
				      ,CHECK_NAME3 AS CHECKNAME3
				      ,CHECK_STANDARD3 AS CHECKSTANDARD3
				      ,STANDARD_VALUE3 AS STANDARDVALUE3
				      ,MAX_VALUE3 AS MAXVALUE3
				      ,MIN_VALUE3 AS MINVALUE3
				      ,CHECK_METHOD_TYPE3 AS CHECKMETHODTYPE3
				      ,CHECK_METHOD_NAME3 AS CHECKMETHODNAME3
				      ,CHECK_CODE4 AS CHECKCODE4
				      ,CHECK_NAME4 AS CHECKNAME4
				      ,CHECK_STANDARD4 AS CHECKSTANDARD4
				      ,STANDARD_VALUE4 AS STANDARDVALUE4
				      ,MAX_VALUE4 AS MAXVALUE4
				      ,MIN_VALUE4 AS MINVALUE4
				      ,CHECK_METHOD_TYPE4 AS CHECKMETHODTYPE4
				      ,CHECK_METHOD_NAME4 AS CHECKMETHODNAME4
		  FROM CB_TOOL_CHECK_MASTER_V TCM
    ]]>
  </sql>

  <sql id="search.tool.name.lov.sql-where">
       WHERE SYSDATE BETWEEN TCM.EFFECTIVE_START_DATE AND TCM.EFFECTIVE_END_DATE
      <isNotEmpty property="ORGID" prepend="AND">
              ORG_ID = #ORGID#
      </isNotEmpty>
      <isNotEmpty property="COMPANYID" prepend="AND">
              COMPANY_ID = #COMPANYID#
      </isNotEmpty>
      <isNotEmpty property="ROUTINGID" prepend="AND">
              ROUTING_ID = #ROUTINGID#
      </isNotEmpty>
      <isNotEmpty property="ITEMCODE" prepend="AND">
              ITEM_CODE = #ITEMCODE#
      </isNotEmpty>
      ORDER BY ORG_ID, COMPANY_ID, WORK_CENTER_CODE, ROUTING_ID, ITEM_CODE
  </sql>

  <select id="search.tool.name.lov.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
          <include refid="search.tool.name.lov.sql-select" />
          <include refid="search.tool.name.lov.sql-where" />
  </select>

  <select id="search.tool.name.lov.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.tool.name.lov.sql-select" />
          <include refid="search.tool.name.lov.sql-where" />
      ) TOT
  </select>
  <!-- 공구명 조회 Lov 종료 -->
  
  <!-- 공구변경현황관리 : 공구명 조회 Lov 시작 -->
  <sql id="search.change.tool.name.lov.sql-select">
  <![CDATA[
      SELECT RANK() OVER(ORDER BY ORG_ID, COMPANY_ID, ITEM_CODE, ITEM_NAME, ITEM_STANDARD, TOOL_LIFE, CHECK_SEQ) AS RN
				      ,ORG_ID AS ORGID
				      ,COMPANY_ID AS COMPANYID
				      ,ITEM_CODE AS ITEMCODE
				      ,ITEM_NAME AS ITEMNAME
				      ,ITEM_STANDARD AS ITEMSTANDARD
				      ,NVL(TOOL_LIFE, 0) || ' EA' AS TOOLLIFE
				      ,CHECK_SEQ AS CHECKSEQ
              ,CHECK_NAME1 AS CHECKNAME1
              ,CHECK_STANDARD1 AS CHECKSTANDARD1
              ,CHECK_METHOD_NAME1 AS CHECKMETHODNAME1
              ,CHECK_NAME2 AS CHECKNAME2
              ,CHECK_STANDARD2 AS CHECKSTANDARD2
              ,CHECK_METHOD_NAME2 AS CHECKMETHODNAME2
              ,CHECK_NAME3 AS CHECKNAME3
              ,CHECK_STANDARD3 AS CHECKSTANDARD3
              ,CHECK_METHOD_NAME3 AS CHECKMETHODNAME3
              ,CHECK_NAME4 AS CHECKNAME4
              ,CHECK_STANDARD4 AS CHECKSTANDARD4
              ,CHECK_METHOD_NAME4 AS CHECKMETHOD4
				      /*,MAX(CHECK_NAME1) AS CHECKNAME1
				      ,MAX(CHECK_STANDARD1) AS CHECKSTANDARD1
				      ,MAX(CHECK_METHOD_NAME1) AS CHECKMETHODNAME1
				      ,MAX(CHECK_NAME2) AS CHECKNAME2
				      ,MAX(CHECK_STANDARD2) AS CHECKSTANDARD2
				      ,MAX(CHECK_METHOD_NAME2) AS CHECKMETHODNAME2
				      ,MAX(CHECK_NAME3) AS CHECKNAME3
				      ,MAX(CHECK_STANDARD3) AS CHECKSTANDARD3
				      ,MAX(CHECK_METHOD_NAME3) AS CHECKMETHODNAME3
				      ,MAX(CHECK_NAME4) AS CHECKNAME4
				      ,MAX(CHECK_STANDARD4) AS CHECKSTANDARD4
				      ,MAX(CHECK_METHOD_NAME4) AS CHECKMETHOD4*/
      FROM CB_TOOL_CHECK_MASTER_V TCM
    ]]>
  </sql>

  <sql id="search.change.tool.name.lov.sql-where">
       WHERE SYSDATE BETWEEN EFFECTIVE_START_DATE AND EFFECTIVE_END_DATE
      <isNotEmpty property="ORGID" prepend="AND">
              ORG_ID = #ORGID#
      </isNotEmpty>
      <isNotEmpty property="COMPANYID" prepend="AND">
              COMPANY_ID = #COMPANYID#
      </isNotEmpty>
      <isNotEmpty property="ROUTINGID" prepend="AND">
              ROUTING_ID = #ROUTINGID#
      </isNotEmpty>
      <isNotEmpty property="ITEMCODE" prepend="AND">
              ITEM_CODE = #ITEMCODE#
      </isNotEmpty>
      <isNotEmpty property="keyword">
        <isNotEqual property="keyword" compareValue="%">
          <isEqual property="GUBUN" compareValue="ITEMNAME" prepend="AND">
            ITEM_NAME LIKE '%' || #keyword# || '%'
          </isEqual>
          <isEqual property="GUBUN" compareValue="ITEMCODE" prepend="AND">
            ITEM_CODE LIKE '%' || #keyword# || '%'
          </isEqual>
        </isNotEqual>
      </isNotEmpty>
<!--       GROUP BY ORG_ID, COMPANY_ID, ITEM_CODE, ITEM_NAME, ITEM_STANDARD, TOOL_LIFE -->
      ORDER BY ORG_ID, COMPANY_ID, ITEM_CODE, ITEM_NAME, ITEM_STANDARD, TOOL_LIFE, CHECK_SEQ
  </sql>

  <select id="search.change.tool.name.lov.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
          <include refid="search.change.tool.name.lov.sql-select" />
          <include refid="search.change.tool.name.lov.sql-where" />
  </select>

  <select id="search.change.tool.name.lov.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.change.tool.name.lov.sql-select" />
          <include refid="search.change.tool.name.lov.sql-where" />
      ) TOT
  </select>
  <!-- 공구변경현황관리 : 공구명 조회 Lov 종료 -->
  
  <!-- LOT 이력 관리 LOT NO Lov 시작 -->
  <sql id="search.history.lotno.lov.sql-select">
      SELECT ORG_ID AS ORGID
				      ,COMPANY_ID AS COMPANYID
				      ,LOT_NO AS LOTNO
				      ,ITEM_CODE AS ITEMCODE
				      ,ORDER_NAME AS ORDERNAME
				      ,ITEM_NAME AS ITEMNAME
				      ,MIN(WORK_START_DATE) AS WORKSTARTDATE
				      ,MAX(WORK_END_DATE) AS WORKENDDATE
				      ,MAX(PRODUCED_QTY) AS PRODUCEDQTY
				      ,MAX(IMPORT_QTY) AS IMPORTQTY
				      ,MAX(FAULT_QTY) AS FAULTQTY
				      ,MAX(CUSTOMER_LOT) AS CUSTOMERLOT
				      ,MAX(TRANS_LOT) AS TRANSLOT
				      ,MAX(LAST_LOT_NO) AS LASTLOTNO
				      ,MAX(WAREHOUSING_LOT) AS WAREHOUSINGLOT
			  FROM CB_LOT_HISTORY_WORK_V
  </sql>

  <sql id="search.history.lotno.lov.sql-where">
       WHERE 1 = 1
<!--           AND LOT_NO = FIRST_LOT_NO -->
      <isNotEmpty property="ORGID" prepend="AND">
              ORG_ID = #ORGID#
      </isNotEmpty>
      <isNotEmpty property="COMPANYID" prepend="AND">
              COMPANY_ID = #COMPANYID#
      </isNotEmpty>
      <isNotEmpty property="SEARCHTO">
          <isNotEmpty property="SEARCHFROM" prepend="AND">
              (NVL(WORK_START_DATE, TO_DATE(#SEARCHFROM#, 'YYYY-MM-DD')) <![CDATA[ >= ]]> TO_DATE(#SEARCHFROM#, 'YYYY-MM-DD')
              AND NVL(WORK_END_DATE, TO_DATE(#SEARCHTO#, 'YYYY-MM-DD')) <![CDATA[ <= ]]> TO_DATE(#SEARCHTO#, 'YYYY-MM-DD'))
          </isNotEmpty>
          <isEmpty property="SEARCHFROM" prepend="AND">
              NVL(WORK_END_DATE, TO_DATE(#SEARCHTO#, 'YYYY-MM-DD')) <![CDATA[ <= ]]> TO_DATE(#SEARCHTO#, 'YYYY-MM-DD')
          </isEmpty>
      </isNotEmpty>
      <isEmpty property="SEARCHTO">
          <isNotEmpty property="SEARCHFROM" prepend="AND">
              NVL(WORK_START_DATE, TO_DATE(#SEARCHFROM#, 'YYYY-MM-DD')) <![CDATA[ >= ]]> TO_DATE(#SEARCHFROM#, 'YYYY-MM-DD')
          </isNotEmpty>
      </isEmpty>
      <isNotEmpty property="ITEMCODE" prepend="AND">
              ITEM_CODE = #ITEMCODE#
      </isNotEmpty>
      <isNotEmpty property="keyword">
          <isNotEqual property="keyword" compareValue="%" prepend="AND">
              LOT_NO LIKE '%' || #keyword# || '%'
          </isNotEqual>
      </isNotEmpty>
      GROUP BY ORG_ID, COMPANY_ID, ITEM_CODE, ITEM_NAME, ORDER_NAME, LOT_NO
      ORDER BY LOT_NO DESC
  </sql>

  <select id="search.history.lotno.lov.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
          <include refid="search.history.lotno.lov.sql-select" />
          <include refid="search.history.lotno.lov.sql-where" />
  </select>

  <select id="search.history.lotno.lov.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.history.lotno.lov.sql-select" />
          <include refid="search.history.lotno.lov.sql-where" />
      ) TOT
  </select>
  <!-- LOT 이력 관리 LOT NO Lov 끝 -->
  
  <!-- 제품 Lov 시작 -->
  <sql id="search.ordermanage.item.list.lov.sql-select">
        SELECT RANK() OVER(ORDER BY IM.ORG_ID, IM.COMPANY_ID, IM.BIG_CODE, IM.MIDDLE_CODE, IM.SMALL_CODE, IM.CAR_TYPE, IM.ITEM_NAME, IM.ITEM_CODE) AS RN
                 ,IM.BIG_CODE AS BIGCODE
                 ,(SELECT BC.BIG_NAME
                    FROM CB_BIG_CLASS BC
                   WHERE BC.GROUP_CODE = IM.GROUP_CODE
                     AND BC.BIG_CODE = IM.BIG_CODE) AS BIGNAME
                 ,IM.MIDDLE_CODE AS MIDDLECODE
                 ,(SELECT MC.MIDDLE_NAME
                    FROM CB_MIDDLE_CLASS MC
                   WHERE MC.GROUP_CODE = IM.GROUP_CODE
                     AND MC.BIG_CODE = IM.BIG_CODE
                     AND MC.MIDDLE_CODE = IM.MIDDLE_CODE) AS MIDDLENAME
                 ,IM.SMALL_CODE AS SMALLCODE
                 ,(SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CLASS SC
                   WHERE SC.GROUP_CODE = IM.GROUP_CODE
                     AND SC.BIG_CODE = IM.BIG_CODE
                     AND SC.MIDDLE_CODE = IM.MIDDLE_CODE
                     AND SC.SMALL_CODE = IM.SMALL_CODE) AS SMALLNAME
                 ,IM.ITEM_CODE AS ITEMCODE
                 ,IM.ORDER_NAME AS ORDERNAME
                 ,IM.DRAWING_NO AS DRAWINGNO
                 ,IM.ITEM_NAME AS ITEMNAME
                 ,IM.CAR_TYPE AS CARTYPE
                 ,(SELECT SC.SMALL_NAME
                     FROM CB_SMALL_CODE SC
                    WHERE SC.ORG_ID = IM.ORG_ID
                       AND SC.COMPANY_ID = IM.COMPANY_ID
                       AND SC.BIG_CODE = 'CMM'
                       AND SC.MIDDLE_CODE = 'MODEL'
                       AND SC.SMALL_CODE = IM.CAR_TYPE) AS CARTYPENAME
                 ,IM.MATERIAL_TYPE AS MATERIALTYPE
                 ,IM.UOM AS UOM
                 ,(SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CODE SC
                   WHERE SC.BIG_CODE = 'CMM'
                     AND SC.MIDDLE_CODE = 'UOM'
                     AND SC.SMALL_CODE = IM.UOM) AS UOMNAME
                 ,IM.ITEM_STANDARD AS ITEMSTANDARD
                 ,IM.ITEM_STANDARD_DETAIL AS ITEMSTANDARDDETAIL
                 ,(SELECT SP.UNIT_PRICE_A
                    FROM CB_SALES_PRICE SP
                   WHERE IM.ORG_ID = SP.ORG_ID
                      AND IM.COMPANY_ID = SP.COMPANY_ID
                      AND IM.ITEM_CODE = SP.ITEM_CODE
                      AND SYSDATE BETWEEN SP.EFFECTIVE_START_DATE AND SP.EFFECTIVE_END_DATE
                      AND SP.PRICE_SEQ = (SELECT MAX(PRICE_SEQ)
									                                 FROM CB_SALES_PRICE B
									                                WHERE B.ORG_ID = IM.ORG_ID
									                                  AND B.COMPANY_ID = IM.COMPANY_ID
									                                  AND B.ITEM_CODE = IM.ITEM_CODE
									                                  AND SYSDATE BETWEEN NVL(B.EFFECTIVE_START_DATE, TO_DATE('2016-01-01', 'YYYY-MM-DD'))
									                                      AND NVL(B.EFFECTIVE_END_DATE, TO_DATE('4999-12-31', 'YYYY-MM-DD'))
									                               )
                      ) AS UNITPRICEA
                 ,IM.WEIGHT AS WEIGHT
                 ,(SELECT IV.PRESENT_INVENTORY_QTY
                     FROM CB_INVENTORY_V IV
                    WHERE IM.BIG_CODE = IV.BIG_CODE
                      AND IM.MIDDLE_CODE = IV.MIDDLE_CODE
                      AND IM.SMALL_CODE = IV.SMALL_CODE
                      AND IM.ITEM_CODE = IV.ITEM_CODE) AS PRESENTINVENTORYQTY
              FROM CB_ITEM_MASTER IM
  </sql>

  <sql id="search.ordermanage.item.list.lov.sql-where">
     WHERE IM.GROUP_CODE = 'A'
       AND TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD'), 'YYYY-MM-DD') BETWEEN IM.EFFECTIVE_START_DATE
       AND IM.EFFECTIVE_END_DATE
      <isNotEmpty property="ORGID" prepend="AND">
              IM.ORG_ID = #ORGID#
      </isNotEmpty>
      <isNotEmpty property="COMPANYID" prepend="AND">
              IM.COMPANY_ID = #COMPANYID#
      </isNotEmpty>
      <isNotEmpty property="BIGCODE" prepend="AND">
              IM.BIG_CODE = #BIGCODE#
      </isNotEmpty>
      <isNotEmpty property="MIDDLECODE" prepend="AND">
              IM.MIDDLE_CODE = #MIDDLECODE#
      </isNotEmpty>
      <isNotEmpty property="SMALLCODE" prepend="AND">
              IM.SMALL_CODE = #SMALLCODE#
      </isNotEmpty>
      <isNotEmpty property="ITEMTYPE" prepend="AND">
              IM.ITEM_TYPE = #ITEMTYPE#
      </isNotEmpty>
      <isNotEmpty property="ORDERNAME" prepend="AND">
              IM.ORDER_NAME LIKE '%' || #ORDERNAME# || '%'
      </isNotEmpty>
      <isNotEmpty property="ITEMNAME" prepend="AND">
              IM.ITEM_NAME LIKE '%' || #ITEMNAME# || '%'
      </isNotEmpty>
      <isNotEmpty property="CARTYPENAME" prepend="AND">
              (SELECT SC.SMALL_NAME
				          FROM CB_SMALL_CODE SC
				         WHERE SC.ORG_ID = IM.ORG_ID
				           AND SC.COMPANY_ID = IM.COMPANY_ID
				           AND SC.BIG_CODE = 'CMM'
				           AND SC.MIDDLE_CODE = 'MODEL'
				           AND SC.SMALL_CODE = IM.CAR_TYPE) LIKE '%'||#CARTYPENAME#||'%'
      </isNotEmpty>
      <isNotEmpty property="ITEMSTANDARDDETAIL" prepend="AND">
              IM.ITEM_STANDARD_DETAIL LIKE '%' || #ITEMSTANDARDDETAIL# || '%'
      </isNotEmpty>
  </sql>

  <select id="search.ordermanage.item.list.lov.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
          <include refid="search.ordermanage.item.list.lov.sql-select" />
          <include refid="search.ordermanage.item.list.lov.sql-where" />
  </select>

  <select id="search.ordermanage.item.list.lov.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.ordermanage.item.list.lov.sql-select" />
          <include refid="search.ordermanage.item.list.lov.sql-where" />
      ) TOT
  </select>
  <!-- 제품 Lov 끝 -->
  
  <sql id="search.order.shipregistmanagelistpopuplist.sql-select">
        SELECT RANK() OVER(ORDER BY OD.ORG_ID, OD.COMPANY_ID, OD.SO_NO, OD.SO_SEQ) AS RN
              ,OD.ORG_ID AS ORGID
              ,OD.COMPANY_ID AS COMPANYID
              ,IMV.BIG_CODE AS BIGCODE
              ,IMV.BIG_NAME AS BIGNAME
              ,IMV.MIDDLE_CODE AS MIDDLECODE
              ,IMV.MIDDLE_NAME AS MIDDLENAME
              ,IMV.SMALL_CODE AS SMALLCODE
              ,IMV.SMALL_NAME AS SMALLNAME
              ,OD.ITEM_CODE AS ITEMCODE
              ,IMV.ORDER_NAME AS ORDERNAME
              ,IMV.DRAWING_NO AS DRAWINGNO
              ,IMV.ITEM_NAME AS ITEMNAME
              ,IMV.CAR_TYPE AS CARTYPE
              ,IMV.CAR_TYPE_NAME AS CARTYPENAME
              ,IMV.MATERIAL_TYPE AS MATERIALTYPE
              ,IMV.UOM AS UOM
              ,IMV.UOM_NAME AS UOMNAME
              ,OD.SO_NO AS SONO
              ,OD.SO_SEQ AS SOSEQ
              ,IMV.SHIPMENT_INSPECTION_YN AS SHIPMENTINSPECTIONYN
              ,OD.SO_QTY AS SOQTY
              ,OD.UNIT_PRICE AS UNITPRICE
              ,((OD.SO_QTY - NVL((SELECT NVL(SUM(SD.SHIP_QTY), 0)
                                   FROM CB_SHIPPING_D SD 
                                  WHERE SD.ORG_ID = OD.ORG_ID 
                                    AND SD.COMPANY_ID = OD.COMPANY_ID 
                                    AND SD.SO_NO = OD.SO_NO 
                                    AND SD.SO_SEQ = OD.SO_SEQ), 0)) * OD.UNIT_PRICE) AS SUPPLYPRICE
              ,TRUNC((((OD.SO_QTY - NVL((SELECT NVL(SUM(SD.SHIP_QTY), 0)
                                   FROM CB_SHIPPING_D SD 
                                  WHERE SD.ORG_ID = OD.ORG_ID 
                                    AND SD.COMPANY_ID = OD.COMPANY_ID 
                                    AND SD.SO_NO = OD.SO_NO 
                                    AND SD.SO_SEQ = OD.SO_SEQ), 0)) * OD.UNIT_PRICE) * 0.1), 0) AS ADDITIONALTAX
              ,((OD.SO_QTY - NVL((SELECT NVL(SUM(SD.SHIP_QTY), 0)
                                   FROM CB_SHIPPING_D SD 
                                  WHERE SD.ORG_ID = OD.ORG_ID 
                                    AND SD.COMPANY_ID = OD.COMPANY_ID 
                                    AND SD.SO_NO = OD.SO_NO 
                                    AND SD.SO_SEQ = OD.SO_SEQ), 0)) * OD.UNIT_PRICE) + TRUNC((((OD.SO_QTY - NVL((SELECT NVL(SUM(SD.SHIP_QTY), 0)
                                                                                                             FROM CB_SHIPPING_D SD 
                                                                                                            WHERE SD.ORG_ID = OD.ORG_ID 
                                                                                                              AND SD.COMPANY_ID = OD.COMPANY_ID 
                                                                                                              AND SD.SO_NO = OD.SO_NO 
                                                                                                              AND SD.SO_SEQ = OD.SO_SEQ), 0)) * OD.UNIT_PRICE) * 0.1), 0) AS TOTAL
              ,NVL((SELECT NVL(SUM(SD.SHIP_QTY), 0)
                       FROM CB_SHIPPING_D SD 
                      WHERE SD.ORG_ID = OD.ORG_ID 
                        AND SD.COMPANY_ID = OD.COMPANY_ID 
                        AND SD.SO_NO = OD.SO_NO 
                        AND SD.SO_SEQ = OD.SO_SEQ), 0) AS SHIPQTY
              ,(OD.SO_QTY - NVL((SELECT NVL(SUM(SD.SHIP_QTY), 0)
                                   FROM CB_SHIPPING_D SD 
                                  WHERE SD.ORG_ID = OD.ORG_ID 
                                    AND SD.COMPANY_ID = OD.COMPANY_ID 
                                    AND SD.SO_NO = OD.SO_NO 
                                    AND SD.SO_SEQ = OD.SO_SEQ), 0)) AS UNSOLDQTY
              ,OH.SO_STATUS
                ,OH.TAX_DIV AS TAXDIV
                ,(SELECT SC.SMALL_NAME
                   FROM CB_SMALL_CODE SC
                  WHERE SC.ORG_ID = OH.ORG_ID
                    AND SC.COMPANY_ID = OH.COMPANY_ID
                    AND SC.BIG_CODE = 'CMM'
                    AND SC.MIDDLE_CODE = 'TAX_DIV'
                    AND SC.SMALL_CODE = OH.TAX_DIV) AS TAXDIVNAME
              ,CB_SHIP_PKG.CB_NEW_MAT_LOT_NO_FIND(OD.ORG_ID
								                                                 ,OD.COMPANY_ID
								                                                 ,OD.ITEM_CODE
								                                                 ,1) AS LOTNOPOST
          FROM CB_SALES_ORDER_H OH 
              ,CB_SALES_ORDER_D OD
              ,CB_ITEM_MASTER_V IMV
  </sql>
  
  <sql id="search.order.shipregistmanagelistpopuplist.sql-where">
         WHERE OH.ORG_ID = OD.ORG_ID
            AND OH.COMPANY_ID = OD.COMPANY_ID
            AND OH.SO_NO = OD.SO_NO
            AND OD.ORG_ID = IMV.ORG_ID
            AND OD.COMPANY_ID = IMV.COMPANY_ID
            AND OD.ITEM_CODE = IMV.ITEM_CODE
            AND OH.SO_STATUS = 'STAND BY' 
				    AND (OD.SO_NO, OD.SO_SEQ) NOT IN
				       (SELECT SD.SO_NO, SD.SO_SEQ
				          FROM CB_SHIPPING_D SD
				         WHERE SD.ORG_ID = OD.COMPANY_ID
				           AND SD.COMPANY_ID = OD.COMPANY_ID
				           AND SD.SO_NO = OD.SO_NO
				           AND SD.SO_SEQ = OD.SO_SEQ
				           AND OD.SO_QTY <![CDATA[ <= ]]> NVL((SELECT NVL(SUM(CSD.SHIP_QTY), 0)
				                                  FROM CB_SHIPPING_D CSD
				                                 WHERE CSD.ORG_ID = SD.ORG_ID
				                                   AND CSD.COMPANY_ID = SD.COMPANY_ID
				                                   AND CSD.SO_NO = SD.SO_NO
				                                   AND CSD.SO_SEQ = SD.SO_SEQ),
				                                0))
					  AND OD.SO_QTY > NVL((SELECT NVL(SUM(SD.SHIP_QTY), 0)
									                            FROM CB_SHIPPING_D SD
									                           WHERE SD.ORG_ID = OD.ORG_ID
									                             AND SD.COMPANY_ID = OD.COMPANY_ID
									                             AND SD.SO_NO = OD.SO_NO
									                             AND SD.SO_SEQ = OD.SO_SEQ), 0)
        <isNotEmpty property="ORGID" prepend="AND">
                OD.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
                OD.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="BIGCODE" prepend="AND">
                IMV.BIG_CODE = #BIGCODE#
        </isNotEmpty>
        <isNotEmpty property="MIDDLECODE" prepend="AND">
                IMV.MIDDLE_CODE = #MIDDLECODE#
        </isNotEmpty>
        <isNotEmpty property="SMALLCODE" prepend="AND">
                IMV.SMALL_CODE = #SMALLCODE#
        </isNotEmpty>
        <isNotEmpty property="ITEMNAME" prepend="AND">
                IMV.ITEM_NAME LIKE '%'||#ITEMNAME#||'%'
        </isNotEmpty>
        <isNotEmpty property="ORDERNAME" prepend="AND">
                IMV.ORDER_NAME LIKE '%'||#ORDERNAME#||'%'
        </isNotEmpty>
        <isNotEmpty property="CUSTOMERCODE" prepend="AND">
                OH.CUSTOMER_CODE = #CUSTOMERCODE#
        </isNotEmpty>
           ORDER BY OD.ORG_ID, OD.COMPANY_ID, OD.SO_NO, OD.SO_SEQ
  </sql>

  <select id="search.order.shipregistmanagelistpopuplist.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
          <include refid="search.order.shipregistmanagelistpopuplist.sql-select" />
          <include refid="search.order.shipregistmanagelistpopuplist.sql-where" />
  </select>

  <select id="search.order.shipregistmanagelistpopuplist.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.order.shipregistmanagelistpopuplist.sql-select" />
          <include refid="search.order.shipregistmanagelistpopuplist.sql-where" />
      ) TOT
  </select>
  
  <sql id="search.order.shipregistmanagelistpopuplist2.sql-select">
          <![CDATA[
			SELECT RANK() OVER(ORDER BY AL.ORGID, AL.COMPANYID, AL.TRXSOURCENO, AL.TRXSOURCENOSEQ) AS RN
			      ,AL.ORGID AS ORGID
			      ,AL.COMPANYID AS COMPANYID
			      ,TO_CHAR(WO.WORK_END_DATE, 'YYYY-MM-DD') AS WORKENDDATE
			      ,AL.TRXSOURCENO AS WORKORDERID
			      ,AL.TRXSOURCENOSEQ AS WORKORDERSEQ
			      ,AL.SONO AS SONO
			      ,AL.SOSEQ AS SOSEQ
            ,NVL((SELECT OH.TAX_DIV
		                 FROM CB_SALES_ORDER_H OH
		                WHERE OH.ORG_ID = AL.ORGID
		                  AND OH.COMPANY_ID = AL.COMPANYID
		                  AND OH.SO_NO = AL.SONO), '01') AS TAXDIV
			      ,AL.ITEMCODE AS ITEMCODE
			      ,IM.ORDER_NAME AS ORDERNAME
			      ,IM.DRAWING_NO AS DRAWINGNO
			      ,IM.ITEM_NAME AS ITEMNAME
			      ,IM.CAR_TYPE AS CARTYPE
			      ,IM.CAR_TYPE_NAME AS CARTYPENAME
			      ,IM.ITEM_STANDARD_DETAIL AS ITEMSTANDARDDETAIL
			      ,IM.UOM AS UOM
			      ,IM.UOM_NAME AS UOMNAME
			      ,AL.SOQTY AS SOQTY
			      ,AL.TRXQTY AS TRXQTY
			      ,AL.PRESHIPQTY AS PRESHIPQTY
			      ,AL.TRXQTY - AL.PRESHIPQTY AS SHIPQTY
			      ,NVL(IM.SALES_PRICE, 0) AS UNITPRICE
			      ,(AL.TRXQTY - AL.PRESHIPQTY) * NVL(IM.SALES_PRICE, 0) AS SUPPLYPRICE
			      ,((AL.TRXQTY - AL.PRESHIPQTY) * NVL(IM.SALES_PRICE, 0)) * 0.1 AS ADDITIONALTAX
			      ,((AL.TRXQTY - AL.PRESHIPQTY) * NVL(IM.SALES_PRICE, 0)) + (((AL.TRXQTY - AL.PRESHIPQTY) * NVL(IM.SALES_PRICE, 0)) * 0.1) AS TOTAL
			  FROM (SELECT AA.ORGID AS ORGID
			              ,AA.COMPANYID AS COMPANYID
			              ,AA.ITEMCODE AS ITEMCODE
			              ,AA.TRXSOURCENO AS TRXSOURCENO
			              ,AA.TRXSOURCENOSEQ AS TRXSOURCENOSEQ
			              ,SUM(AA.TRXQTY) AS TRXQTY
			              ,(SELECT OD.SO_QTY
			                 FROM CB_WORK_ORDER_HEADER WOH
			                     ,CB_PROD_PLAN PP
			                     ,CB_SALES_ORDER_D OD
			                WHERE WOH.ORG_ID = AA.ORGID
			                  AND WOH.COMPANY_ID = AA.COMPANYID
			                  AND WOH.WORK_ORDER_ID = AA.TRXSOURCENO
			                  AND WOH.ORG_ID = PP.ORG_ID
			                  AND WOH.COMPANY_ID = PP.COMPANY_ID
			                  AND WOH.WORK_PLAN_NO = PP.WORK_PLAN_NO
			                  AND PP.ORG_ID = OD.ORG_ID
			                  AND PP.COMPANY_ID = OD.COMPANY_ID
			                  AND PP.SO_NO = OD.SO_NO
			                  AND PP.SO_SEQ = OD.SO_SEQ) AS SOQTY
			              ,(SELECT OD.SO_NO
			                 FROM CB_WORK_ORDER_HEADER WOH
			                     ,CB_PROD_PLAN PP
			                     ,CB_SALES_ORDER_D OD
			                WHERE WOH.ORG_ID = AA.ORGID
			                  AND WOH.COMPANY_ID = AA.COMPANYID
			                  AND WOH.WORK_ORDER_ID = AA.TRXSOURCENO
			                  AND WOH.ORG_ID = PP.ORG_ID
			                  AND WOH.COMPANY_ID = PP.COMPANY_ID
			                  AND WOH.WORK_PLAN_NO = PP.WORK_PLAN_NO
			                  AND PP.ORG_ID = OD.ORG_ID
			                  AND PP.COMPANY_ID = OD.COMPANY_ID
			                  AND PP.SO_NO = OD.SO_NO
			                  AND PP.SO_SEQ = OD.SO_SEQ) AS SONO
			              ,(SELECT OD.SO_SEQ
			                 FROM CB_WORK_ORDER_HEADER WOH
			                     ,CB_PROD_PLAN PP
			                     ,CB_SALES_ORDER_D OD
			                WHERE WOH.ORG_ID = AA.ORGID
			                  AND WOH.COMPANY_ID = AA.COMPANYID
			                  AND WOH.WORK_ORDER_ID = AA.TRXSOURCENO
			                  AND WOH.ORG_ID = PP.ORG_ID
			                  AND WOH.COMPANY_ID = PP.COMPANY_ID
			                  AND WOH.WORK_PLAN_NO = PP.WORK_PLAN_NO
			                  AND PP.ORG_ID = OD.ORG_ID
			                  AND PP.COMPANY_ID = OD.COMPANY_ID
			                  AND PP.SO_NO = OD.SO_NO
			                  AND PP.SO_SEQ = OD.SO_SEQ) AS SOSEQ                  
			              ,NVL((SELECT SUM(SD.SHIP_QTY)
			                      FROM CB_SHIPPING_D SD
			                     WHERE SD.ORG_ID = AA.ORGID
			                       AND SD.COMPANY_ID = AA.COMPANYID
			                       AND SD.WORK_ORDER_ID = AA.TRXSOURCENO
			                       AND SD.WORK_ORDER_SEQ = AA.TRXSOURCENOSEQ), 0) AS PRESHIPQTY
			          FROM (SELECT IT.ORG_ID AS ORGID
			                      ,IT.COMPANY_ID AS COMPANYID
			                      ,IT.ITEM_CODE AS ITEMCODE
			                      ,IT.TRX_SOURCE_NO AS TRXSOURCENO
			                      ,IT.TRX_SOURCE_NO_SEQ AS TRXSOURCENOSEQ
			                      ,IT.TRX_SOURCE_NO_SEQ_D AS TRXSOURCENOSEQD
			                      ,IT.TRX_QTY AS TRXQTY
			                      ,IT.TRX_GUBUN AS TRXGUBUN
			                  FROM CB_ITEM_TRANSACTION IT
			                 WHERE IT.ORG_ID = #ORGID#
			                   AND IT.COMPANY_ID = #COMPANYID#
			                   AND IT.TRX_TYPE = '작업실적'
			                   AND IT.TRX_GUBUN = 'IN'
			                 UNION ALL
			                SELECT IT.ORG_ID AS ORGID
			                      ,IT.COMPANY_ID AS COMPANYID
			                      ,IT.ITEM_CODE AS ITEMCODE
			                      ,IT.TRX_SOURCE_NO AS TRXSOURCENO
			                      ,IT.TRX_SOURCE_NO_SEQ AS TRXSOURCENOSEQ
			                      ,IT.TRX_SOURCE_NO_SEQ_D AS TRXSOURCENOSEQD
			                      ,IT.TRX_QTY * (-1) AS TRXQTY
			                      ,IT.TRX_GUBUN AS TRXGUBUN
			                  FROM CB_ITEM_TRANSACTION IT
			                 WHERE IT.ORG_ID = #ORGID#
			                   AND IT.COMPANY_ID = #COMPANYID#
			                   AND IT.TRX_TYPE = '작업실적'
			                   AND IT.TRX_GUBUN = 'OUT')AA
			         WHERE 1=1
			         GROUP BY AA.ORGID
			                 ,AA.COMPANYID
			                 ,AA.ITEMCODE
			                 ,AA.TRXSOURCENO
			                 ,AA.TRXSOURCENOSEQ)AL
			        ,CB_WORK_ORDER WO
			        ,CB_WORK_ORDER_HEADER WOH
			        ,CB_ITEM_MASTER_V IM
          ]]>
  </sql>
  
  <sql id="search.order.shipregistmanagelistpopuplist2.sql-where">
       WHERE AL.ORGID = WO.ORG_ID
         AND AL.COMPANYID = WO.COMPANY_ID
         AND AL.TRXSOURCENO = WO.WORK_ORDER_ID
         AND AL.TRXSOURCENOSEQ = WO.WORK_ORDER_SEQ
         AND WO.ORG_ID = WOH.ORG_ID
         AND WO.COMPANY_ID = WOH.COMPANY_ID
         AND WO.WORK_ORDER_ID = WOH.WORK_ORDER_ID
         AND AL.ORGID = IM.ORG_ID
         AND AL.COMPANYID = IM.COMPANY_ID
         AND AL.ITEMCODE = IM.ITEM_CODE
         AND IM.ITEM_TYPE = 'A'
<!--          AND WO.WORK_STATUS = 'COMPLETE' -->
         AND AL.TRXQTY - PRESHIPQTY > 0
        <isNotEmpty property="ORGID" prepend="AND">
                AL.ORGID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
                AL.COMPANYID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="BIGCODE" prepend="AND">
                IM.BIG_CODE = #BIGCODE#
        </isNotEmpty>
        <isNotEmpty property="MIDDLECODE" prepend="AND">
                IM.MIDDLE_CODE = #MIDDLECODE#
        </isNotEmpty>
        <isNotEmpty property="SMALLCODE" prepend="AND">
                IM.SMALL_CODE = #SMALLCODE#
        </isNotEmpty>
        <isNotEmpty property="ITEMNAME" prepend="AND">
                IM.ITEM_NAME LIKE '%'||#ITEMNAME#||'%'
        </isNotEmpty>
        <isNotEmpty property="ORDERNAME" prepend="AND">
                IM.ORDER_NAME LIKE '%'||#ORDERNAME#||'%'
        </isNotEmpty>
       ORDER BY AL.ORGID, AL.COMPANYID, AL.TRXSOURCENO, AL.TRXSOURCENOSEQ
  </sql>

  <select id="search.order.shipregistmanagelistpopuplist2.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
          <include refid="search.order.shipregistmanagelistpopuplist2.sql-select" />
          <include refid="search.order.shipregistmanagelistpopuplist2.sql-where" />
  </select>

  <select id="search.order.shipregistmanagelistpopuplist2.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.order.shipregistmanagelistpopuplist2.sql-select" />
          <include refid="search.order.shipregistmanagelistpopuplist2.sql-where" />
      ) TOT
  </select>
  
  
    <sql id="search.sonofing.number.list.lov.sql-select">
       SELECT OH.SO_NO  AS SONO
         FROM CB_SALES_ORDER_H OH

  </sql>
  
  <sql id="search.sonofing.number.list.lov.sql-where">
       WHERE OH.ORG_ID = #ORGID#
          AND OH.COMPANY_ID = #COMPANYID#
        <isEqual property="GUBUN" compareValue="SONO" prepend="AND">
          OH.SO_NO LIKE '%' || #keyword# || '%'
        </isEqual>
      ORDER BY OH.ORG_ID, OH.COMPANY_ID, OH.SO_NO
  </sql>

  <select id="search.sonofing.number.list.lov.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
          <include refid="search.sonofing.number.list.lov.sql-select" />
          <include refid="search.sonofing.number.list.lov.sql-where" />
  </select>

  <select id="search.sonofing.number.list.lov.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.sonofing.number.list.lov.sql-select" />
          <include refid="search.sonofing.number.list.lov.sql-where" />
      ) TOT
  </select>
  
    <!-- 출고번호 가져오기 -->
    <sql id="search.ship.shipno.lov.sql-select">
        SELECT SH.SHIP_NO AS SHIPNO
          FROM CB_SHIPPING_H SH
    </sql>

    <sql id="search.ship.shipno.lov.sql-where">
         WHERE 1 = 1
        <isNotEmpty property="ORGID" prepend="AND">
            SH.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            SH.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="keyword" prepend="AND">
            SH.SHIP_NO LIKE '%' || #keyword# || '%'
        </isNotEmpty>
         <isNotEmpty property="SEARCHTO">
             <isNotEmpty property="SEARCHFROM" prepend="AND">
                SHIP_DATE BETWEEN TO_DATE(#SEARCHFROM#,'YYYY-MM-DD')  AND TO_DATE(#SEARCHTO#,'YYYY-MM-DD')
             </isNotEmpty>
             <isEmpty property="SEARCHFROM" prepend="AND">
                SHIP_DATE = TO_DATE(#SEARCHTO#,'YYYY-MM-DD')
             </isEmpty>
         </isNotEmpty>
        ORDER BY SH.ORG_ID, SH.COMPANY_ID, SH.SHIP_NO
    </sql>

    <select id="search.ship.shipno.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.ship.shipno.lov.sql-select" />
            <include refid="search.ship.shipno.lov.sql-where" />
    </select>

    <select id="search.ship.shipno.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.ship.shipno.lov.sql-select" />
            <include refid="search.ship.shipno.lov.sql-where" />
        ) TOT
    </select>
    <!-- 출고번호 가져오기 끝 -->
    
    
    <!-- 자주검사/공정순회검사 결과조회 가져오기 -->
    <sql id="search.check.result.popup.sql-select">
        SELECT DECODE(TMP.RN
							             ,1, DENSE_RANK() OVER(ORDER BY FD.ORG_ID, FD.COMPANY_ID, FM.CHECK_BIG, (SELECT RC.ROUTING_OP
							                                                                                       FROM CB_ROUTING_CONTROL RC
							                                                                                      WHERE RC.ORG_ID = CM.ORG_ID
							                                                                                        AND RC.COMPANY_ID = CM.COMPANY_ID
							                                                                                        AND RC.ROUTING_ID = CM.ROUTING_ID), CM.ORDER_NO)
							             ,NULL) AS RN
					      ,(CASE
					         WHEN TMP.RN =
					              (DECODE(CM.INTERVAL_CNT, NULL, 10, 0, 10, CM.INTERVAL_CNT) + 2) THEN
					          'Y'
					         ELSE
					          'N'
					       END) AS LASTYN
					      ,FD.ORG_ID AS ORGID
					      ,FD.COMPANY_ID AS COMPANYID
					      ,FD.FML_ID AS FMLID
					      ,FD.ORDER_NO AS ORDERNO
					      ,FD.CHECK_LIST_ID AS CHECKLISTID
					      ,FD.WORK_ORDER_ID AS WORKORDERID
					      ,FD.WORK_ORDER_SEQ AS WORKORDERSEQ
					      ,(SELECT WOH.WORK_STATUS
					         FROM CB_WORK_ORDER_HEADER WOH
					                ,CB_WORK_ORDER WO
					        WHERE WOH.ORG_ID = WO.ORG_ID
					            AND WOH.COMPANY_ID = WO.COMPANY_ID
					            AND WOH.WORK_ORDER_ID = WO.WORK_ORDER_ID
					            AND WO.ORG_ID = FD.ORG_ID
					            AND WO.COMPANY_ID = FD.COMPANY_ID
					            AND WO.WORK_ORDER_ID = FD.WORK_ORDER_ID
					            AND WO.WORK_ORDER_SEQ = FD.WORK_ORDER_SEQ) AS WORKSTATUS
					      ,FD.ITEM_CODE AS ITEMCODE
					      ,FM.CHECK_BIG AS CHECKBIG
					      ,FM.FML_TYPE AS FMLTYPE
					      ,(SELECT SC.SMALL_NAME
					          FROM CB_SMALL_CODE SC
					         WHERE SC.ORG_ID = FD.ORG_ID
					           AND SC.COMPANY_ID = FD.COMPANY_ID
					           AND SC.BIG_CODE = 'QM'
					           AND SC.MIDDLE_CODE = 'FML_DIVISION'
					           AND SC.SMALL_CODE = FM.FML_TYPE) AS FMLTYPENAME
					      ,CM.CHECK_MIDDLE AS CHECKMIDDLE
					      ,CM.CHECK_SMALL AS CHECKSMALL
					      ,DECODE(TMP.RN
					             ,1, (SELECT CS.SMALL_NAME
					                    FROM CB_CHECK_SMALL_CODE CS
					                   WHERE CS.ORG_ID = CM.ORG_ID
					                     AND CS.COMPANY_ID = CM.COMPANY_ID
					                     AND CS.BIG_CODE = CM.CHECK_BIG
					                     AND CS.MIDDLE_CODE = CM.CHECK_MIDDLE
					                     AND CS.SMALL_CODE = CM.CHECK_SMALL)
					             ,NULL) AS CHECKSMALLNAME
					      ,CM.SPECIAL_CHECK AS SPECIALCHECK
					      ,(SELECT SC.SMALL_NAME
					          FROM CB_SMALL_CODE SC
					         WHERE SC.ORG_ID = CM.ORG_ID
					           AND SC.COMPANY_ID = CM.COMPANY_ID
					           AND SC.BIG_CODE = 'QM'
					           AND SC.MIDDLE_CODE = 'SPECIAL_CHECK'
					           AND SC.SMALL_CODE = CM.SPECIAL_CHECK) AS SPECIALCHECKNAME
					      ,CM.CHECK_STANDARD AS CHECKSTANDARD
					      ,CM.STANDARD_VALUE AS STANDARDVALUE
					      ,CM.MAX_VALUE AS MAXVALUE
					      ,CM.MIN_VALUE AS MINVALUE
					      ,CM.CHECK_CYCLE AS CHECKCYCLE
					      ,DECODE(TMP.RN
					             ,1, (SELECT SC.SMALL_NAME
					                    FROM CB_SMALL_CODE SC
					                   WHERE SC.ORG_ID = CM.ORG_ID
					                     AND SC.COMPANY_ID = CM.COMPANY_ID
					                     AND SC.BIG_CODE = 'QM'
					                     AND SC.MIDDLE_CODE = 'CHECK_CYCLE'
					                     AND SC.SMALL_CODE = CM.CHECK_CYCLE)
					             ,NULL) AS CHECKCYCLENAME
					      ,DECODE(CM.CHECK_INTERVAL
					             ,NULL, ((NVL(CM.MAX_VALUE, 0) - NVL(CM.MIN_VALUE, 0)) / 10)
					             ,CM.CHECK_INTERVAL) AS CHECKINTERVAL
					      ,DECODE(CM.INTERVAL_CNT
					             ,NULL, 10
					             ,0, 10
					             ,CM.INTERVAL_CNT) AS INTERVALCNT
					      ,DECODE(FD.CHECK_QTY, NULL, CM.CHECK_QTY, 0, CM.CHECK_QTY, FD.CHECK_QTY) AS CHECKQTY
					      ,CM.CHECK_METHOD_TYPE AS CHECKMETHODTYPE
					      ,(SELECT CC.SMALL_NAME
					          FROM CB_SMALL_CODE CC
					         WHERE CC.ORG_ID = CM.ORG_ID
					           AND CC.COMPANY_ID = CM.COMPANY_ID
					           AND CC.BIG_CODE = 'QM'
					           AND CC.MIDDLE_CODE = 'CHECK_METHOD_TYPE'
					           AND CC.SMALL_CODE = CM.CHECK_METHOD_TYPE) AS CHECKMETHODTYPENAME
					      /*,(CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) AS MANAGEAREA*/
					      ,(CM.MAX_VALUE + DECODE(CM.CHECK_INTERVAL,
											                              NULL,
											                              ((NVL(CM.MAX_VALUE, 0) - NVL(CM.MIN_VALUE, 0)) / 10),
											                              CM.CHECK_INTERVAL)) -
					       ((TMP.RN - 1) * DECODE(CM.CHECK_INTERVAL,
									                              NULL,
									                              ((NVL(CM.MAX_VALUE, 0) - NVL(CM.MIN_VALUE, 0)) / 10),
									                              CM.CHECK_INTERVAL)) AS MANAGEAREA
					      ,FD.CHECK_RESULT1 AS CHECKRESULT1
					      ,FD.CHECK_RESULT2 AS CHECKRESULT2
					      ,FD.CHECK_RESULT3 AS CHECKRESULT3
					      ,FD.CHECK_RESULT4 AS CHECKRESULT4
					      ,FD.CHECK_RESULT5 AS CHECKRESULT5
					      ,FD.CHECK_RESULT6 AS CHECKRESULT6
					      ,FD.CHECK_RESULT7 AS CHECKRESULT7
					      ,FD.CHECK_RESULT8 AS CHECKRESULT8
					      ,FD.CHECK_RESULT9 AS CHECKRESULT9
					      ,FD.CHECK_RESULT10 AS CHECKRESULT10
					      ,FD.CHECK_RESULT11 AS CHECKRESULT11
					      ,FD.CHECK_RESULT12 AS CHECKRESULT12
					      ,FD.CHECK_RESULT13 AS CHECKRESULT13
					      ,FD.CHECK_RESULT14 AS CHECKRESULT14
					      ,FD.CHECK_RESULT15 AS CHECKRESULT15
					      ,FD.CHECK_RESULT16 AS CHECKRESULT16
					      ,FD.CHECK_RESULT17 AS CHECKRESULT17
					      ,FD.CHECK_RESULT18 AS CHECKRESULT18
					      ,FD.CHECK_RESULT19 AS CHECKRESULT19
					      ,FD.CHECK_RESULT20 AS CHECKRESULT20
					      ,FD.CHECK_RESULT21 AS CHECKRESULT21
					      ,FD.CHECK_RESULT22 AS CHECKRESULT22
					      ,FD.CHECK_RESULT23 AS CHECKRESULT23
					      ,FD.CHECK_RESULT24 AS CHECKRESULT24
					      ,FD.CHECK_RESULT25 AS CHECKRESULT25
					      ,FD.CHECK_RESULT26 AS CHECKRESULT26
					      ,FD.CHECK_RESULT27 AS CHECKRESULT27
					      ,FD.CHECK_RESULT28 AS CHECKRESULT28
					      ,FD.CHECK_RESULT29 AS CHECKRESULT29
					      ,FD.CHECK_RESULT30 AS CHECKRESULT30
					      ,FD.CHECK_RESULT31 AS CHECKRESULT31
					      ,FD.CHECK_RESULT32 AS CHECKRESULT32
					      ,FD.CHECK_RESULT33 AS CHECKRESULT33
					      ,FD.CHECK_RESULT34 AS CHECKRESULT34
					      ,FD.CHECK_RESULT35 AS CHECKRESULT35
					      ,FD.CHECK_RESULT36 AS CHECKRESULT36
					      ,FD.CHECK_RESULT37 AS CHECKRESULT37
					      ,FD.CHECK_RESULT38 AS CHECKRESULT38
					      ,FD.CHECK_RESULT39 AS CHECKRESULT39
					      ,FD.CHECK_RESULT40 AS CHECKRESULT40
					      ,FD.CHECK_RESULT41 AS CHECKRESULT41
					      ,FD.CHECK_RESULT42 AS CHECKRESULT42
					      ,FD.CHECK_RESULT43 AS CHECKRESULT43
					      ,FD.CHECK_RESULT44 AS CHECKRESULT44
					      ,FD.CHECK_RESULT45 AS CHECKRESULT45
					      ,FD.CHECK_RESULT46 AS CHECKRESULT46
					      ,FD.CHECK_RESULT47 AS CHECKRESULT47
					      ,FD.CHECK_RESULT48 AS CHECKRESULT48
					      ,FD.CHECK_RESULT49 AS CHECKRESULT49
					      ,FD.CHECK_RESULT50 AS CHECKRESULT50
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT1 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK1
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT2 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK2
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT3 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK3
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT4 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK4
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT5 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK5
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT6 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK6
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT7 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK7
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT8 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK8
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT9 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK9
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT10 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK10
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT11 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK11
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT12 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK12
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT13 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK13
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT14 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK14
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT15 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK15
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT16 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK16
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT17 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK17
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT18 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK18
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT19 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK19
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT20 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK20
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT21 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK21
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT22 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK22
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT23 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK23
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT24 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK24
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT25 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK25
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT26 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK26
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT27 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK27
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT28 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK28
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT29 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK29
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT30 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK30
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT31 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK31
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT32 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK32
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT33 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK33
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT34 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK34
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT35 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK35
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT36 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK36
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT37 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK37
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT38 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK38
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT39 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK39
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT40 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK40
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT41 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK41
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT42 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK42
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT43 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK43
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT44 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK44
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT45 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK45
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT46 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK46
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT47 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK47
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT48 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK48
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT49 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK49
                ,(CASE WHEN (CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) = FD.CHECK_RESULT50 THEN
                         'V'
                       ELSE
                         ''
                       END) AS CHK50
					      ,FD.CHECK_YN AS CHECKYN
					      ,(SELECT SC.SMALL_NAME
					          FROM CB_SMALL_CODE SC
					         WHERE SC.BIG_CODE = 'QM'
					           AND SC.MIDDLE_CODE = 'CHECK_YN'
					           AND SC.SMALL_CODE = FD.CHECK_YN) AS CHECKYNNAME
					      ,FM.PERSON_ID AS PERSONID
					      ,(SELECT HM.KR_NAME
					          FROM CB_HUMANRESOURCE_MANAGER_V HM
					         WHERE HM.ORG_ID = FM.ORG_ID
					           AND HM.COMPANY_ID = FM.COMPANY_ID
					           AND HM.EMPLOYEE_NUMBER = FM.PERSON_ID) AS KRNAME
					      ,FD.CHECK_RESULT_M AS CHECKRESULTM
					      ,FD.MANAGE_EMPLOYEE AS MANAGEEMPLOYEE
					      ,(SELECT HM.KR_NAME
					          FROM CB_HUMANRESOURCE_MANAGER_V HM
					         WHERE HM.ORG_ID = FD.ORG_ID
					           AND HM.COMPANY_ID = FD.COMPANY_ID
					           AND HM.EMPLOYEE_NUMBER = FD.MANAGE_EMPLOYEE) AS MANAGEKRNAME
					      ,FM.CHECK_START_TIME AS STARTTIME
					      ,FM.BP_YN AS BPYN
			  FROM CB_FML_CHECK_MASTER FM
					      ,CB_FML_CHECK_RESULT FD
					      ,CB_CHECK_MASTER CM
					      ,(SELECT LEVEL AS RN
					          FROM DUAL
					        CONNECT BY LEVEL <![CDATA[ <= ]]> 30) TMP
    </sql>

    <sql id="search.check.result.popup.sql-where">
         WHERE FM.ORG_ID = FD.ORG_ID
				   AND FM.COMPANY_ID = FD.COMPANY_ID
				   AND FM.FML_ID = FD.FML_ID
				   AND FM.WORK_ORDER_ID = FD.WORK_ORDER_ID
				   AND FM.WORK_ORDER_SEQ = FD.WORK_ORDER_SEQ
				   AND FD.ORG_ID = CM.ORG_ID
				   AND FD.COMPANY_ID = CM.COMPANY_ID
				   AND FD.ITEM_CODE = CM.ITEM_CODE
				   AND FD.CHECK_LIST_ID = CM.CHECK_SEQ
           AND CM.STANDARD_VALUE IS NOT NULL
				   AND TMP.RN <![CDATA[ <= ]]> (DECODE(CM.INTERVAL_CNT
																			                        ,NULL, 10
																			                        ,0, 10
																			                        ,CM.INTERVAL_CNT) + 2)
        <isNotEmpty property="ORGID" prepend="AND">
            FD.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            FD.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="WORKORDERID" prepend="AND">
            FD.WORK_ORDER_ID = #WORKORDERID#
        </isNotEmpty>
        <isNotEmpty property="WORKORDERSEQ" prepend="AND">
            FD.WORK_ORDER_SEQ = #WORKORDERSEQ#
        </isNotEmpty>
        <isNotEmpty property="CHECKBIG" prepend="AND">
            FM.CHECK_BIG = #CHECKBIG#
        </isNotEmpty>
        <isNotEmpty property="FMLTYPE" prepend="AND">
            FM.FML_TYPE = #FMLTYPE#
        </isNotEmpty>
        <isNotEmpty property="FMLID" prepend="AND">
            FM.FML_ID = #FMLID#
        </isNotEmpty>
        ORDER BY FD.ORG_ID, FD.COMPANY_ID, FM.CHECK_BIG, (SELECT RC.ROUTING_OP
													                                                     FROM CB_ROUTING_CONTROL RC
													                                                    WHERE RC.ORG_ID = CM.ORG_ID
													                                                      AND RC.COMPANY_ID = CM.COMPANY_ID
													                                                      AND RC.ROUTING_ID = CM.ROUTING_ID), CM.ORDER_NO, TMP.RN
    </sql>

    <select id="search.check.result.popup.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.check.result.popup.sql-select" />
            <include refid="search.check.result.popup.sql-where" />
    </select>

    <select id="search.check.result.popup.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.check.result.popup.sql-select" />
            <include refid="search.check.result.popup.sql-where" />
        ) TOT
    </select>
    <!-- 자주검사/공정순회검사 결과조회 가져오기 끝 -->
    
    <!-- 공정순회검사 결과조회 가져오기 -->
    <sql id="search.check.result.popup2.sql-select">
        SELECT DENSE_RANK() OVER(ORDER BY FD.ORG_ID, FD.COMPANY_ID, FM.CHECK_BIG, (SELECT RC.ROUTING_OP
							                                                                                                     FROM CB_ROUTING_CONTROL RC
							                                                                                                    WHERE RC.ORG_ID = CM.ORG_ID
							                                                                                                      AND RC.COMPANY_ID = CM.COMPANY_ID
							                                                                                                      AND RC.ROUTING_ID = CM.ROUTING_ID), CM.ORDER_NO) AS RN
                ,FD.ORG_ID AS ORGID
                ,FD.COMPANY_ID AS COMPANYID
                ,FD.FML_ID AS FMLID
                ,FD.ORDER_NO AS ORDERNO
                ,FD.CHECK_LIST_ID AS CHECKLISTID
                ,FD.WORK_ORDER_ID AS WORKORDERID
                ,FD.WORK_ORDER_SEQ AS WORKORDERSEQ
                ,(SELECT WOH.WORK_STATUS
                   FROM CB_WORK_ORDER_H WOH
                          ,CB_WORK_ORDER WO
                  WHERE WOH.ORG_ID = WO.ORG_ID
                      AND WOH.COMPANY_ID = WO.COMPANY_ID
                      AND WOH.WORK_ORDER_ID = WO.WORK_ORDER_ID
                      AND WO.ORG_ID = FD.ORG_ID
                      AND WO.COMPANY_ID = FD.COMPANY_ID
                      AND WO.WORK_ORDER_ID = FD.WORK_ORDER_ID
                      AND WO.WORK_ORDER_SEQ = FD.WORK_ORDER_SEQ) AS WORKSTATUS
                ,FD.ITEM_CODE AS ITEMCODE
                ,FM.CHECK_BIG AS CHECKBIG
                ,FM.FML_TYPE AS FMLTYPE
                ,(SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CODE SC
                   WHERE SC.ORG_ID = FD.ORG_ID
                     AND SC.COMPANY_ID = FD.COMPANY_ID
                     AND SC.BIG_CODE = 'QM'
                     AND SC.MIDDLE_CODE = 'FML_DIVISION'
                     AND SC.SMALL_CODE = FM.FML_TYPE) AS FMLTYPENAME
                ,CM.CHECK_MIDDLE AS CHECKMIDDLE
                ,CM.CHECK_SMALL AS CHECKSMALL
                ,(SELECT CS.SMALL_NAME
                   FROM CB_CHECK_SMALL_CODE CS
                  WHERE CS.ORG_ID = CM.ORG_ID
                    AND CS.COMPANY_ID = CM.COMPANY_ID
                    AND CS.BIG_CODE = CM.CHECK_BIG
                    AND CS.MIDDLE_CODE = CM.CHECK_MIDDLE
                    AND CS.SMALL_CODE = CM.CHECK_SMALL) AS CHECKSMALLNAME
                ,CM.SPECIAL_CHECK AS SPECIALCHECK
                ,(SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CODE SC
                   WHERE SC.ORG_ID = CM.ORG_ID
                     AND SC.COMPANY_ID = CM.COMPANY_ID
                     AND SC.BIG_CODE = 'QM'
                     AND SC.MIDDLE_CODE = 'SPECIAL_CHECK'
                     AND SC.SMALL_CODE = CM.SPECIAL_CHECK) AS SPECIALCHECKNAME
                ,CM.CHECK_STANDARD AS CHECKSTANDARD
                ,CM.STANDARD_VALUE AS STANDARDVALUE
                ,CM.MAX_VALUE AS MAXVALUE
                ,CM.MIN_VALUE AS MINVALUE
                ,CM.CHECK_CYCLE AS CHECKCYCLE
                ,(SELECT SC.SMALL_NAME
                   FROM CB_SMALL_CODE SC
                  WHERE SC.ORG_ID = CM.ORG_ID
                    AND SC.COMPANY_ID = CM.COMPANY_ID
                    AND SC.BIG_CODE = 'QM'
                    AND SC.MIDDLE_CODE = 'CHECK_CYCLE'
                    AND SC.SMALL_CODE = CM.CHECK_CYCLE) AS CHECKCYCLENAME
                ,DECODE(CM.CHECK_INTERVAL
                       ,NULL, ((NVL(CM.MAX_VALUE, 0) - NVL(CM.MIN_VALUE, 0)) / 10)
                       ,CM.CHECK_INTERVAL) AS CHECKINTERVAL
                ,DECODE(CM.INTERVAL_CNT
                       ,NULL, 10
                       ,0, 10
                       ,CM.INTERVAL_CNT) AS INTERVALCNT
                ,DECODE(FD.CHECK_QTY, NULL, CM.CHECK_QTY, 0, CM.CHECK_QTY, FD.CHECK_QTY) AS CHECKQTY
                ,CM.CHECK_METHOD_TYPE AS CHECKMETHODTYPE
                ,(SELECT CC.SMALL_NAME
                    FROM CB_SMALL_CODE CC
                   WHERE CC.ORG_ID = CM.ORG_ID
                     AND CC.COMPANY_ID = CM.COMPANY_ID
                     AND CC.BIG_CODE = 'QM'
                     AND CC.MIDDLE_CODE = 'CHECK_METHOD_TYPE'
                     AND CC.SMALL_CODE = CM.CHECK_METHOD_TYPE) AS CHECKMETHODTYPENAME
                /*,(CM.MAX_VALUE + CM.CHECK_INTERVAL) - ((TMP.RN - 1) * CM.CHECK_INTERVAL) AS MANAGEAREA*/
                ,FD.CHECK_RESULT1 AS CHECKRESULT1
                ,FD.CHECK_RESULT2 AS CHECKRESULT2
                ,FD.CHECK_RESULT3 AS CHECKRESULT3
                ,FD.CHECK_RESULT4 AS CHECKRESULT4
                ,FD.CHECK_RESULT5 AS CHECKRESULT5
                ,FD.CHECK_RESULT6 AS CHECKRESULT6
                ,FD.CHECK_RESULT7 AS CHECKRESULT7
                ,FD.CHECK_RESULT8 AS CHECKRESULT8
                ,FD.CHECK_RESULT9 AS CHECKRESULT9
                ,FD.CHECK_RESULT10 AS CHECKRESULT10
                ,FD.CHECK_RESULT11 AS CHECKRESULT11
                ,FD.CHECK_RESULT12 AS CHECKRESULT12
                ,FD.CHECK_RESULT13 AS CHECKRESULT13
                ,FD.CHECK_RESULT14 AS CHECKRESULT14
                ,FD.CHECK_RESULT15 AS CHECKRESULT15
                ,FD.CHECK_RESULT16 AS CHECKRESULT16
                ,FD.CHECK_RESULT17 AS CHECKRESULT17
                ,FD.CHECK_RESULT18 AS CHECKRESULT18
                ,FD.CHECK_RESULT19 AS CHECKRESULT19
                ,FD.CHECK_RESULT20 AS CHECKRESULT20
                ,FD.CHECK_RESULT21 AS CHECKRESULT21
                ,FD.CHECK_RESULT22 AS CHECKRESULT22
                ,FD.CHECK_RESULT23 AS CHECKRESULT23
                ,FD.CHECK_RESULT24 AS CHECKRESULT24
                ,FD.CHECK_RESULT25 AS CHECKRESULT25
                ,FD.CHECK_RESULT26 AS CHECKRESULT26
                ,FD.CHECK_RESULT27 AS CHECKRESULT27
                ,FD.CHECK_RESULT28 AS CHECKRESULT28
                ,FD.CHECK_RESULT29 AS CHECKRESULT29
                ,FD.CHECK_RESULT30 AS CHECKRESULT30
                ,FD.CHECK_RESULT31 AS CHECKRESULT31
                ,FD.CHECK_RESULT32 AS CHECKRESULT32
                ,FD.CHECK_RESULT33 AS CHECKRESULT33
                ,FD.CHECK_RESULT34 AS CHECKRESULT34
                ,FD.CHECK_RESULT35 AS CHECKRESULT35
                ,FD.CHECK_RESULT36 AS CHECKRESULT36
                ,FD.CHECK_RESULT37 AS CHECKRESULT37
                ,FD.CHECK_RESULT38 AS CHECKRESULT38
                ,FD.CHECK_RESULT39 AS CHECKRESULT39
                ,FD.CHECK_RESULT40 AS CHECKRESULT40
                ,FD.CHECK_RESULT41 AS CHECKRESULT41
                ,FD.CHECK_RESULT42 AS CHECKRESULT42
                ,FD.CHECK_RESULT43 AS CHECKRESULT43
                ,FD.CHECK_RESULT44 AS CHECKRESULT44
                ,FD.CHECK_RESULT45 AS CHECKRESULT45
                ,FD.CHECK_RESULT46 AS CHECKRESULT46
                ,FD.CHECK_RESULT47 AS CHECKRESULT47
                ,FD.CHECK_RESULT48 AS CHECKRESULT48
                ,FD.CHECK_RESULT49 AS CHECKRESULT49
                ,FD.CHECK_RESULT50 AS CHECKRESULT50
                ,FD.CHECK_YN AS CHECKYN
                ,(SELECT SC.SMALL_NAME
                    FROM CB_SMALL_CODE SC
                   WHERE SC.BIG_CODE = 'QM'
                     AND SC.MIDDLE_CODE = 'CHECK_YN'
                     AND SC.SMALL_CODE = FD.CHECK_YN) AS CHECKYNNAME
                ,FM.PERSON_ID AS PERSONID
                ,(SELECT HM.KR_NAME
                    FROM CB_HUMANRESOURCE_MANAGER_V HM
                   WHERE HM.ORG_ID = FM.ORG_ID
                     AND HM.COMPANY_ID = FM.COMPANY_ID
                     AND HM.EMPLOYEE_NUMBER = FM.PERSON_ID) AS KRNAME
                ,FD.CHECK_RESULT_M AS CHECKRESULTM
                ,FD.MANAGE_EMPLOYEE AS MANAGEEMPLOYEE
                ,(SELECT HM.KR_NAME
                    FROM CB_HUMANRESOURCE_MANAGER_V HM
                   WHERE HM.ORG_ID = FD.ORG_ID
                     AND HM.COMPANY_ID = FD.COMPANY_ID
                     AND HM.EMPLOYEE_NUMBER = FD.MANAGE_EMPLOYEE) AS MANAGEKRNAME
                ,FM.CHECK_START_TIME AS STARTTIME
                ,FM.BP_YN AS BPYN
        FROM CB_FML_CHECK_MASTER FM
                ,CB_FML_CHECK_RESULT FD
                ,CB_CHECK_MASTER CM
    </sql>

    <sql id="search.check.result.popup2.sql-where">
         WHERE FM.ORG_ID = FD.ORG_ID
           AND FM.COMPANY_ID = FD.COMPANY_ID
           AND FM.FML_ID = FD.FML_ID
           AND FM.WORK_ORDER_ID = FD.WORK_ORDER_ID
           AND FM.WORK_ORDER_SEQ = FD.WORK_ORDER_SEQ
           AND FD.ORG_ID = CM.ORG_ID
           AND FD.COMPANY_ID = CM.COMPANY_ID
           AND FD.ITEM_CODE = CM.ITEM_CODE
           AND FD.CHECK_LIST_ID = CM.CHECK_SEQ
        <isNotEmpty property="ORGID" prepend="AND">
            FD.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            FD.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="WORKORDERID" prepend="AND">
            FD.WORK_ORDER_ID = #WORKORDERID#
        </isNotEmpty>
        <isNotEmpty property="WORKORDERSEQ" prepend="AND">
            FD.WORK_ORDER_SEQ = #WORKORDERSEQ#
        </isNotEmpty>
        <isNotEmpty property="CHECKBIG" prepend="AND">
            FM.CHECK_BIG = #CHECKBIG#
        </isNotEmpty>
        <isNotEmpty property="FMLTYPE" prepend="AND">
            FM.FML_TYPE = #FMLTYPE#
        </isNotEmpty>
        <isNotEmpty property="FMLID" prepend="AND">
            FM.EMPLOYEE_SEQ IN (SELECT FM1.EMPLOYEE_SEQ
								                          FROM CB_FML_CHECK_MASTER FM1
								                         WHERE FM1.FML_ID = #FMLID#)
        </isNotEmpty>
        ORDER BY FD.ORG_ID, FD.COMPANY_ID, FM.CHECK_BIG, (SELECT RC.ROUTING_OP
                                                                               FROM CB_ROUTING_CONTROL RC
                                                                              WHERE RC.ORG_ID = CM.ORG_ID
                                                                                AND RC.COMPANY_ID = CM.COMPANY_ID
                                                                                AND RC.ROUTING_ID = CM.ROUTING_ID), CM.ORDER_NO
    </sql>

    <select id="search.check.result.popup2.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.check.result.popup2.sql-select" />
            <include refid="search.check.result.popup2.sql-where" />
    </select>

    <select id="search.check.result.popup2.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.check.result.popup2.sql-select" />
            <include refid="search.check.result.popup2.sql-where" />
        ) TOT
    </select>
    <!-- 공정순회검사 결과조회 가져오기 끝 -->
    
   <!-- 거래명세서의 거래명세서 번호 Lov 끝  -->
    <sql id="search.order.transno.lov.sql-select">
        SELECT TH.TRADE_NO AS TRADENO
          FROM CB_TRADE_H TH
    </sql>
    
    <sql id="search.order.transno.lov.sql-where">
         WHERE 1=1
        <isNotEmpty property="ORGID" prepend="AND">
            TH.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
            TH.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="keyword">
           <isNotEqual property="keyword" compareValue="%">
             AND TH.TRADE_NO LIKE '%' || #keyword# || '%'
           </isNotEqual>
        </isNotEmpty>
        <isNotEmpty property="DATETO">
          <isNotEmpty property="DATEFROM" prepend="AND">
              TH.TRADE_DATE BETWEEN TO_DATE(#DATEFROM#, 'YYYY-MM-DD') AND TO_DATE(#DATETO#, 'YYYY-MM-DD')
          </isNotEmpty>
        </isNotEmpty>
         ORDER BY TH.ORG_ID, TH.COMPANY_ID, TH.TRADE_NO
    </sql>

    <select id="search.order.transno.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap" remapResults="true">
            <include refid="search.order.transno.lov.sql-select" />
            <include refid="search.order.transno.lov.sql-where" />
    </select>
    
    <select id="search.order.transno.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.order.transno.lov.sql-select" />
            <include refid="search.order.transno.lov.sql-where" />
        ) TOT
    </select>
    <!-- 거래명세서의 거래명세서 번호 Lov 끝  -->
    
  <!-- 거래명세서등록의 출하현황 POPUP 시작 -->
  <sql id="search.shippinglist.popup.sql-select">
      SELECT SD.ORG_ID AS ORGID
                    ,SD.COMPANY_ID AS COMPANYID
			              ,(SELECT TO_NUMBER(REPLACE(SC.SMALL_NAME, '일', ''))
			                 FROM CB_SMALL_CODE SC
			                WHERE SC.ORG_ID = SD.ORG_ID
			                  AND SC.COMPANY_ID = SD.COMPANY_ID
			                  AND SC.BIG_CODE = 'CMM'
			                  AND SC.MIDDLE_CODE = 'CLOSING_DATE'
			                  AND SC.SMALL_CODE = '01') AS CLOSINGDATE
                    ,SH.CUSTOMER_CODE AS CUSTOMERCODE
                    ,(SELECT SC.SMALL_NAME
                       FROM CB_SMALL_CODE SC
                      WHERE SC.ORG_ID = CC.ORG_ID
                        AND SC.COMPANY_ID = CC.COMPANY_ID
                        AND SC.BIG_CODE = 'CMM'
                        AND SC.MIDDLE_CODE = 'CLOSING_DATE'
                        AND SC.SMALL_CODE = CC.CLOSING_DATE) AS CLOSINGDATENAME
                    ,DECODE(CC.CLOSING_DATE, '01', TO_CHAR(TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM')||'-25', 'YYYY-MM-DD'), 'YYYY-MM-DD')
                                           , '02', TO_CHAR(LAST_DAY(TO_CHAR(SYSDATE, 'YYYY-MM-DD')), 'YYYY-MM-DD')) AS ENDDATE
                    ,IM.BIG_CODE AS BIGCODE
                    ,IM.BIG_NAME AS BIGNAME
                    ,IM.MIDDLE_CODE AS MIDDLECODE
                    ,IM.MIDDLE_NAME AS MIDDLENAME
                    ,IM.SMALL_CODE AS SMALLCODE
                    ,IM.SMALL_NAME AS SMALLNAME
                    ,IM.ITEM_CODE AS ITEMCODE
                    ,IM.ORDER_NAME AS ORDERNAME
                    ,IM.DRAWING_NO AS DRAWINGNO
                    ,IM.ITEM_NAME AS ITEMNAME
                    ,IM.ITEM_STANDARD AS ITEMSTANDARD
                    ,IM.CAR_TYPE AS CARTYPE
                    ,IM.CAR_TYPE_NAME AS CARTYPENAME
                    ,IM.MATERIAL_TYPE AS MATERIALTYPE
                    ,IM.UOM AS UOM
                    ,IM.UOM_NAME AS UOMNAME
                    ,IM.ITEM_STANDARD_DETAIL AS ITEMSTANDARDDETAIL
                    ,SD.SHIP_QTY AS SHIPQTY
                    ,NVL((SELECT SUM(TD.TRANSACTION_QTY)
                              FROM CB_TRADE_D TD
                             WHERE TD.ORG_ID = SD.ORG_ID
                                AND TD.COMPANY_ID = SD.COMPANY_ID
                                AND TD.SHIP_NO = SD.SHIP_NO
                                AND TD.SHIP_SEQ = SD.SHIP_SEQ), 0) AS BEFOREQTY
                    ,SD.SHIP_QTY - NVL((SELECT SUM(TD.TRANSACTION_QTY)
                                          FROM CB_TRADE_D TD
                                         WHERE TD.ORG_ID = SD.ORG_ID
                                            AND TD.COMPANY_ID = SD.COMPANY_ID
                                            AND TD.SHIP_NO = SD.SHIP_NO
                                            AND TD.SHIP_SEQ = SD.SHIP_SEQ), 0) AS QTY
                    ,IM.WEIGHT AS WEIGHT
                    ,(IM.WEIGHT * SD.SHIP_QTY) AS SUMWEIGHT
                    ,SD.UNIT_PRICE AS UNITPRICE
                    ,(SD.SHIP_QTY * SD.UNIT_PRICE) AS SUPPLYPRICE
                    ,(SD.SHIP_QTY * SD.UNIT_PRICE)* 0.1 AS ADDITIONALTAX
                    ,((SD.SHIP_QTY * SD.UNIT_PRICE) + ((SD.SHIP_QTY * SD.UNIT_PRICE)* 0.1)) AS TOTAL
                    ,SD.SHIP_NO AS SHIPNO
                    ,SD.SHIP_SEQ AS SHIPSEQ
                    ,OD.SO_NO AS SONO
                    ,OD.SO_SEQ AS SOSEQ
                    ,SD.WORK_ORDER_ID AS WORKORDERID
                    ,SD.WORK_ORDER_SEQ AS WORKORDERSEQ
                    ,SD.EMPLOYEE_SEQ AS EMPLOYEESEQ
               FROM CB_SHIPPING_H SH
                   ,CB_SHIPPING_D SD
                   ,CB_SALES_ORDER_H OH
                   ,CB_SALES_ORDER_D OD
                   ,CB_ITEM_MASTER_V IM
                   ,CB_CUSTOMER CC
  </sql>

  <sql id="search.shippinglist.popup.sql-where">
             WHERE SH.ORG_ID = SD.ORG_ID
                AND SH.COMPANY_ID = SD.COMPANY_ID
                AND SH.SHIP_NO = SD.SHIP_NO
                AND SD.ORG_ID = OD.ORG_ID
                AND SD.COMPANY_ID = OD.COMPANY_ID
                AND SD.SO_NO = OD.SO_NO
                AND SD.SO_SEQ = OD.SO_SEQ
                AND OH.ORG_ID = OD.ORG_ID
                AND OH.COMPANY_ID = OD.COMPANY_ID
                AND OH.SO_NO = OD.SO_NO
                AND OD.ORG_ID = IM.ORG_ID
                AND OD.COMPANY_ID = IM.COMPANY_ID
                AND OD.ITEM_CODE = IM.ITEM_CODE
                AND OH.CUSTOMER_CODE = CC.CUSTOMER_CODE
                AND (SD.SHIP_NO, SD.SHIP_SEQ) NOT IN (SELECT TD.SHIP_NO, TD.SHIP_SEQ
                                                                     FROM CB_TRADE_D TD
                                                                    WHERE TD.ORG_ID = SD.ORG_ID
                                                                      AND TD.COMPANY_ID = SD.COMPANY_ID
                                                                      AND TD.SHIP_NO = SD.SHIP_NO
                                                                      AND TD.SHIP_SEQ = SD.SHIP_SEQ
                                                                      AND SD.SHIP_QTY <![CDATA[ <= ]]> NVL((SELECT SUM(CTD.TRANSACTION_QTY)
                                                                                                                            FROM CB_TRADE_D CTD
                                                                                                                           WHERE CTD.ORG_ID = TD.ORG_ID
                                                                                                                              AND CTD.COMPANY_ID = TD.COMPANY_ID
                                                                                                                              AND CTD.SHIP_NO = TD.SHIP_NO
                                                                                                                              AND CTD.SHIP_SEQ = TD.SHIP_SEQ), 0))
          <isNotEmpty property="ORGID" prepend="AND">
                  SD.ORG_ID = #ORGID#
          </isNotEmpty>
          <isNotEmpty property="COMPANYID" prepend="AND">
                  SD.COMPANY_ID = #COMPANYID#
          </isNotEmpty>
          <isNotEmpty property="BIGCODE" prepend="AND">
                  IM.BIG_CODE = #BIGCODE#
          </isNotEmpty>
          <isNotEmpty property="MIDDLECODE" prepend="AND">
                  IM.MIDDLE_CODE = #MIDDLECODE#
          </isNotEmpty>
          <isNotEmpty property="SMALLCODE" prepend="AND">
                  IM.SMALL_CODE = #SMALLCODE#
          </isNotEmpty>
          <isNotEmpty property="CUSTOMERCODE" prepend="AND">
                  SH.CUSTOMER_CODE = #CUSTOMERCODE#
          </isNotEmpty>
          <isNotEmpty property="SHIPNO" prepend="AND">
                  SD.SHIP_NO LIKE '%'||#SHIPNO#||'%'
          </isNotEmpty>
          <isNotEmpty property="ITEMNAME" prepend="AND">
                  IM.ITEM_NAME LIKE '%'||#ITEMNAME#||'%'
          </isNotEmpty>
          <isNotEmpty property="ORDERNAME" prepend="AND">
                  IM.ORDER_NAME LIKE '%'||#ORDERNAME#||'%'
          </isNotEmpty>
  </sql>

  <select id="search.shippinglist.popup.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
          <include refid="search.shippinglist.popup.sql-select" />
          <include refid="search.shippinglist.popup.sql-where" />
  </select>

  <select id="search.shippinglist.popup.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.shippinglist.popup.sql-select" />
          <include refid="search.shippinglist.popup.sql-where" />
      ) TOT
  </select>
  <!-- 거래명세서등록의 출하현황 POPUP 끝 -->
  
  <!-- 거래명세서등록의 수주현황 POPUP 시작 -->
  <sql id="search.saleslist.popup.sql-select">
        SELECT RANK() OVER(ORDER BY OD.ORG_ID, OD.COMPANY_ID, OD.SO_NO, OD.SO_SEQ) AS RN
            ,OD.ORG_ID AS ORGID
            ,OD.COMPANY_ID AS COMPANYID
            ,CC.CLOSING_DATE AS CLOSINGDATE
            ,DECODE(CC.CLOSING_DATE, '01', TO_CHAR(TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM')||'-25', 'YYYY-MM-DD'), 'YYYY-MM-DD')
                               , '02', TO_CHAR(LAST_DAY(TO_CHAR(SYSDATE, 'YYYY-MM-DD')), 'YYYY-MM-DD')) AS ENDDATE
            ,OH.CUSTOMER_CODE AS CUSTOMERCODE
            ,IMV.BIG_CODE AS BIGCODE
            ,IMV.BIG_NAME AS BIGNAME
            ,IMV.MIDDLE_CODE AS MIDDLECODE
            ,IMV.MIDDLE_NAME AS MIDDLENAME
            ,IMV.SMALL_CODE AS SMALLCODE
            ,IMV.SMALL_NAME AS SMALLNAME
            ,OD.ITEM_CODE AS ITEMCODE
            ,IMV.ORDER_NAME AS ORDERNAME
            ,IMV.DRAWING_NO AS DRAWINGNO
            ,IMV.ITEM_NAME AS ITEMNAME
            ,IMV.CAR_TYPE AS CARTYPE
            ,IMV.CAR_TYPE_NAME AS CARTYPENAME
            ,IMV.MATERIAL_TYPE AS MATERIALTYPE
            ,IMV.UOM AS UOM
            ,IMV.UOM_NAME AS UOMNAME
            ,OD.SO_NO AS SONO
            ,OD.SO_SEQ AS SOSEQ
            ,OD.SO_QTY AS SOQTY
            ,(SELECT NVL(SUM(TD.TRANSACTION_QTY), 0)
               FROM CB_TRADE_D TD 
              WHERE TD.ORG_ID = OD.ORG_ID 
                AND TD.COMPANY_ID = OD.COMPANY_ID 
                AND TD.SO_NO = OD.SO_NO 
                AND TD.SO_SEQ = OD.SO_SEQ) AS BEFOREQTY
            ,(OD.SO_QTY - NVL((SELECT SUM(TD.TRANSACTION_QTY)
                             FROM CB_TRADE_D TD 
                            WHERE TD.ORG_ID = OD.ORG_ID 
                              AND TD.COMPANY_ID = OD.COMPANY_ID 
                              AND TD.SO_NO = OD.SO_NO 
                              AND TD.SO_SEQ = OD.SO_SEQ), 0)) AS QTY
            ,IMV.WEIGHT AS WEIGHT
            ,(OD.SO_QTY * IMV.WEIGHT) AS SUMWEIGHT
            ,OD.UNIT_PRICE AS UNITPRICE
            ,OD.SUPPLY_PRICE AS SUPPLYPRICE
            ,OD.ADDITIONAL_TAX AS ADDITIONALTAX
            ,(OD.SUPPLY_PRICE + OD.ADDITIONAL_TAX) AS TOTAL
          FROM CB_SALES_ORDER_H OH
              ,CB_SALES_ORDER_D OD
              ,CB_ITEM_MASTER_V IMV
              ,CB_CUSTOMER CC
  </sql>

  <sql id="search.saleslist.popup.sql-where">
         WHERE OH.ORG_ID = OD.ORG_ID
            AND OH.COMPANY_ID = OD.COMPANY_ID
            AND OH.SO_NO = OD.SO_NO
            AND OD.ORG_ID = IMV.ORG_ID
            AND OD.COMPANY_ID = IMV.COMPANY_ID
            AND OD.ITEM_CODE = IMV.ITEM_CODE
            AND OH.ORG_ID = CC.ORG_ID
            AND OH.COMPANY_ID = CC.COMPANY_ID
            AND OH.CUSTOMER_CODE = CC.CUSTOMER_CODE
            AND (OD.SO_NO, OD.SO_SEQ) NOT IN (SELECT SD.SO_NO, SD.SO_SEQ
                                                FROM CB_SHIPPING_D SD
                                               WHERE SD.ORG_ID = OD.ORG_ID
                                                  AND SD.COMPANY_ID = OD.COMPANY_ID
                                                  AND SD.SO_NO = OD.SO_NO
                                                  AND SD.SO_SEQ = OD.SO_SEQ)
                                          
            AND OD.SO_QTY > NVL((SELECT SUM(CTD.TRANSACTION_QTY)
                                             FROM CB_TRADE_D CTD
                                            WHERE CTD.ORG_ID = OD.ORG_ID
                                               AND CTD.COMPANY_ID = OD.COMPANY_ID
                                               AND CTD.SO_NO = OD.SO_NO
                                               AND CTD.SO_SEQ = OD.SO_SEQ), 0)
          <isNotEmpty property="ORGID" prepend="AND">
                  OD.ORG_ID = #ORGID#
          </isNotEmpty>
          <isNotEmpty property="COMPANYID" prepend="AND">
                  OD.COMPANY_ID = #COMPANYID#
          </isNotEmpty>
          <isNotEmpty property="BIGCODE" prepend="AND">
                  IMV.BIG_CODE = #BIGCODE#
          </isNotEmpty>
          <isNotEmpty property="MIDDLECODE" prepend="AND">
                  IMV.MIDDLE_CODE = #MIDDLECODE#
          </isNotEmpty>
          <isNotEmpty property="SMALLCODE" prepend="AND">
                  IMV.SMALL_CODE = #SMALLCODE#
          </isNotEmpty>
          <isNotEmpty property="CUSTOMERCODE" prepend="AND">
                  OH.CUSTOMER_CODE = #CUSTOMERCODE#
          </isNotEmpty>
          <isNotEmpty property="SONO" prepend="AND">
                  OD.SONO LIKE '%'||#SONO#||'%'
          </isNotEmpty>
          <isNotEmpty property="ITEMNAME" prepend="AND">
                  IMV.ITEM_NAME LIKE '%'||#ITEMNAME#||'%'
          </isNotEmpty>
          <isNotEmpty property="ORDERNAME" prepend="AND">
                  IMV.ORDER_NAME LIKE '%'||#ORDERNAME#||'%'
          </isNotEmpty>
          ORDER BY OD.ORG_ID, OD.COMPANY_ID, OD.SO_NO, OD.SO_SEQ
  </sql>

  <select id="search.saleslist.popup.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
          <include refid="search.saleslist.popup.sql-select" />
          <include refid="search.saleslist.popup.sql-where" />
  </select>

  <select id="search.saleslist.popup.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.saleslist.popup.sql-select" />
          <include refid="search.saleslist.popup.sql-where" />
      ) TOT
  </select>
  <!-- 거래명세서등록의 수주현황 POPUP 끝 -->
  
  <!-- 월별 생산실적현황 (작업자) 조회 시작 -->
  <sql id="search.monthly.worker.list.sql-select">
        SELECT RANK() OVER(ORDER BY HM.ORG_ID, HM.COMPANY_ID, HM.EFFECTIVE_START_DATE, HM.EMPLOYEE_NUMBER) AS RN
					      ,HM.ORG_ID AS ORGID
					      ,HM.COMPANY_ID AS COMPANYID
					      ,HM.EMPLOYEE_NUMBER AS VALUE
					      ,HM.KR_NAME AS LABEL
			  FROM CB_HUMANRESOURCE_MANAGER_V HM
					      ,(SELECT #ORGID# AS ORG_ID
						              ,#COMPANYID# AS COMPANY_ID
						              ,#SEARCHYEAR# AS SEARCH_YEAR
					          FROM DUAL) TMP
  </sql>

  <sql id="search.monthly.worker.list.sql-where">
          WHERE HM.ORG_ID = TMP.ORG_ID
					   AND HM.COMPANY_ID = TMP.COMPANY_ID
					   AND (HM.ORG_ID, HM.COMPANY_ID, HM.EMPLOYEE_NUMBER) IN
					       (SELECT WE.ORG_ID, WE.COMPANY_ID, WE.EMPLOYEE_NUMBER
					          FROM CB_WORK_EMPLOYEE WE
					         WHERE WE.ORG_ID = TMP.ORG_ID
					           AND WE.COMPANY_ID = TMP.COMPANY_ID
					           AND TMP.SEARCH_YEAR BETWEEN TO_CHAR(WE.START_TIME, 'YYYY') AND
					               TO_CHAR(WE.END_TIME, 'YYYY'))
          <isNotEmpty property="keyword">
		          <isNotEqual property="keyword" compareValue="%" prepend="AND">
		              HM.KR_NAME LIKE '%' || #keyword# || '%'
		          </isNotEqual>
          </isNotEmpty>
          ORDER BY HM.ORG_ID, HM.COMPANY_ID, HM.EFFECTIVE_START_DATE, HM.EMPLOYEE_NUMBER
  </sql>

  <select id="search.monthly.worker.list.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
          <include refid="search.monthly.worker.list.sql-select" />
          <include refid="search.monthly.worker.list.sql-where" />
  </select>

  <select id="search.monthly.worker.list.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.monthly.worker.list.sql-select" />
          <include refid="search.monthly.worker.list.sql-where" />
      ) TOT
  </select>
  <!-- 월별 생산실적현황 (작업자) 조회 끝 -->
  
  <!-- 월별 생산실적현황 (장비별) 조회 시작 -->
  <sql id="search.monthly.equip.list.sql-select">
        SELECT RANK() OVER(ORDER BY WC.ORG_ID, WC.COMPANY_ID, (SELECT SC.SMALL_NAME
																                                                         FROM CB_SMALL_CODE SC
																                                                        WHERE SC.ORG_ID = WC.ORG_ID
																                                                          AND SC.COMPANY_ID = WC.COMPANY_ID
																                                                          AND SC.BIG_CODE = 'CMM'
																                                                          AND SC.MIDDLE_CODE = 'WORK_DEPT'
																                                                          AND SC.SMALL_CODE = WC.WORK_DEPT), WC.SEQ, WC.WORK_CENTER_NAME) AS RN
				      ,WC.ORG_ID AS ORGID
				      ,WC.COMPANY_ID AS COMPANYID
				      ,WC.WORK_DEPT AS WORKDEPT
				      ,(SELECT SC.SMALL_NAME
				          FROM CB_SMALL_CODE SC
				         WHERE SC.ORG_ID = WC.ORG_ID
				           AND SC.COMPANY_ID = WC.COMPANY_ID
				           AND SC.BIG_CODE = 'CMM'
				           AND SC.MIDDLE_CODE = 'WORK_DEPT'
				           AND SC.SMALL_CODE = WC.WORK_DEPT) AS WORKDEPTNAME
				      ,WC.WORK_CENTER_CODE AS VALUE
				      ,WC.WORK_CENTER_NAME AS LABEL
		  FROM CB_WORK_CENTER WC
				      ,(SELECT #ORGID# AS ORG_ID
				              ,#COMPANYID# AS COMPANY_ID
				              ,#SEARCHYEAR# AS SEARCH_YEAR
				          FROM DUAL) TMP
  </sql>

  <sql id="search.monthly.equip.list.sql-where">
          WHERE WC.ORG_ID = TMP.ORG_ID
					   AND WC.COMPANY_ID = TMP.COMPANY_ID
					   AND (WC.ORG_ID, WC.COMPANY_ID, WC.WORK_CENTER_CODE) IN
					       (SELECT WE.ORG_ID, WE.COMPANY_ID, WE.WORK_CENTER_CODE
					          FROM CB_WORK_EMPLOYEE WE
					         WHERE WE.ORG_ID = TMP.ORG_ID
					           AND WE.COMPANY_ID = TMP.COMPANY_ID
					           AND TMP.SEARCH_YEAR BETWEEN TO_CHAR(WE.START_TIME, 'YYYY') AND
					               TO_CHAR(WE.END_TIME, 'YYYY'))
          <isNotEmpty property="keyword">
              <isNotEqual property="keyword" compareValue="%" prepend="AND">
                  WC.WORK_CENTER_NAME LIKE '%' || #keyword# || '%'
              </isNotEqual>
          </isNotEmpty>
          <isNotEmpty property="WORKDEPT" prepend="AND">
                  WC.WORK_DEPT = #WORKDEPT#
          </isNotEmpty>
          <isNotEmpty property="keyword1">
              <isNotEqual property="keyword1" compareValue="%" prepend="AND">
                  (SELECT SC.SMALL_NAME
	                  FROM CB_SMALL_CODE SC
	                 WHERE SC.ORG_ID = WC.ORG_ID
	                   AND SC.COMPANY_ID = WC.COMPANY_ID
	                   AND SC.BIG_CODE = 'CMM'
	                   AND SC.MIDDLE_CODE = 'WORK_DEPT'
	                   AND SC.SMALL_CODE = WC.WORK_DEPT) LIKE '%' || #keyword1# || '%'
              </isNotEqual>
          </isNotEmpty>
					 ORDER BY WC.ORG_ID, WC.COMPANY_ID, (SELECT SC.SMALL_NAME
					                                       FROM CB_SMALL_CODE SC
					                                      WHERE SC.ORG_ID = WC.ORG_ID
					                                        AND SC.COMPANY_ID = WC.COMPANY_ID
					                                        AND SC.BIG_CODE = 'CMM'
					                                        AND SC.MIDDLE_CODE = 'WORK_DEPT'
					                                        AND SC.SMALL_CODE = WC.WORK_DEPT), WC.SEQ, WC.WORK_CENTER_NAME
  </sql>

  <select id="search.monthly.equip.list.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
          <include refid="search.monthly.equip.list.sql-select" />
          <include refid="search.monthly.equip.list.sql-where" />
  </select>

  <select id="search.monthly.equip.list.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.monthly.equip.list.sql-select" />
          <include refid="search.monthly.equip.list.sql-where" />
      ) TOT
  </select>
  
  <select id="search.monthly.equip.dept.list.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
      SELECT ORGID
               ,COMPANYID
               ,WORKDEPT AS VALUE
               ,WORKDEPTNAME AS LABEL
        FROM (
          <include refid="search.monthly.equip.list.sql-select" />
          <include refid="search.monthly.equip.list.sql-where" />
          )
       WHERE 1=1
       GROUP BY ORGID, COMPANYID, WORKDEPT, WORKDEPTNAME
       ORDER BY ORGID, COMPANYID, WORKDEPT, WORKDEPTNAME
  </select>

  <select id="search.monthly.equip.dept.list.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
		      SELECT ORGID
		               ,COMPANYID
		               ,WORKDEPT AS VALUE
		               ,WORKDEPTNAME AS LABEL
		        FROM (
		          <include refid="search.monthly.equip.list.sql-select" />
		          <include refid="search.monthly.equip.list.sql-where" />
		          )
		       WHERE 1=1
		       GROUP BY ORGID, COMPANYID, WORKDEPT, WORKDEPTNAME
           ORDER BY ORGID, COMPANYID, WORKDEPT, WORKDEPTNAME 
      ) TOT
  </select>
  <!-- 월별 생산실적현황 (장비별) 조회 끝 -->
  
  <!-- 라우팅복사 LOV 시작 -->
  <sql id="search.routingregist.copy.lov.sql-select">
        SELECT RANK() OVER( ORDER BY RC.ORG_ID, RC.COMPANY_ID ,IM.ITEM_CODE) AS RN
              ,RC.ORG_ID AS ORGID
              ,RC.COMPANY_ID AS COMPANYID
              ,IM.ITEM_CODE AS ITEMCODE
              ,IM.DRAWING_NO AS DRAWINGNO
              ,IM.ITEM_NAME AS ITEMNAME
              ,IM.ORDER_NAME AS ORDERNAME
              ,IM.CAR_TYPE AS CARTYPE
              ,IM.CAR_TYPE_NAME AS CARTYPENAME
              ,IM.ITEM_STANDARD_DETAIL AS ITEMSTANDARDDETAIL
              ,IM.CUSTOMER_CODE AS CUSTOMERCODE
              ,IM.CUSTOMER_NAME AS CUSTOMERNAME
          FROM CB_ROUTING_CONTROL RC
              ,CB_ITEM_MASTER_V IM
  </sql>

  <sql id="search.routingregist.copy.lov.sql-where">
         WHERE RC.ORG_ID = IM.ORG_ID
            AND RC.COMPANY_ID = IM.COMPANY_ID
            AND RC.ITEM_CODE = IM.ITEM_CODE
      <isNotEmpty property="ORGID" prepend="AND">
              RC.ORG_ID = #ORGID#
      </isNotEmpty>
      <isNotEmpty property="COMPANYID" prepend="AND">
              RC.COMPANY_ID = #COMPANYID#
      </isNotEmpty>
      <isNotEmpty property="ITEMNAME" prepend="AND">
              IM.ITEM_NAME LIKE '%' || #ITEMNAME# || '%'
      </isNotEmpty>
      <isNotEmpty property="DRAWINGNO" prepend="AND">
              IM.DRAWING_NO LIKE '%' || #DRAWINGNO# || '%'
      </isNotEmpty>
      <isNotEmpty property="ORDERNAME" prepend="AND">
              IM.ORDER_NAME LIKE '%' || #ORDERNAME# || '%'
      </isNotEmpty>
      <isNotEmpty property="CARTYPENAME" prepend="AND">
              IM.CAR_TYPE_NAME LIKE '%' || #CARTYPENAME# || '%'
      </isNotEmpty>
      <isNotEmpty property="ITEMSTANDARDDETAIL" prepend="AND">
              IM.ITEM_STANDARD_DETAIL LIKE '%' || #ITEMSTANDARDDETAIL# || '%'
      </isNotEmpty>
      <isNotEmpty property="CUSTOMERNAME" prepend="AND">
              IM.CUSTOMER_NAME LIKE '%' || #CUSTOMERNAME# || '%'
      </isNotEmpty>
         GROUP BY RC.ORG_ID
                 ,RC.COMPANY_ID
                 ,IM.ITEM_CODE
                 ,IM.ITEM_NAME
                 ,IM.ORDER_NAME
                 ,IM.CAR_TYPE
                 ,IM.CAR_TYPE_NAME
                 ,IM.ITEM_STANDARD_DETAIL
                 ,IM.CUSTOMER_CODE
                 ,IM.CUSTOMER_NAME
                 ,IM.DRAWING_NO
         ORDER BY RC.ORG_ID
                 ,RC.COMPANY_ID
                 ,IM.ITEM_CODE
  </sql>

  <select id="search.routingregist.copy.lov.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
          <include refid="search.routingregist.copy.lov.sql-select" />
          <include refid="search.routingregist.copy.lov.sql-where" />
  </select>

  <select id="search.routingregist.copy.lov.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.routingregist.copy.lov.sql-select" />
          <include refid="search.routingregist.copy.lov.sql-where" />
          
      ) TOT
  </select>
  <!-- 라우팅복사 LOV 끝 -->
  
  <!-- 자재 거래명세서 번호 LOV 시작 -->
  <sql id="search.mat.tradeno.list.lov.sql-select">
        SELECT RANK() OVER(ORDER BY TH.ORG_ID, TH.COMPANY_ID, TH.TRADE_NO) AS RN
					      ,TH.ORG_ID AS ORGID
					      ,TH.COMPANY_ID AS COMPANYID
					      ,TH.TRADE_NO AS TRADENO
					      ,TH.TRADE_DATE AS TRADEDATE
					      ,TH.CUSTOMER_CODE AS CUSTOMERCODE
					      ,TH.CUSTOMER_NAME AS CUSTOMERNAME
					      ,TH.ITEM_NAME AS ITEMNAME
					      ,TH.ORDER_NAME AS ORDERNAME
					      ,TH.TRANSACTION_QTY AS TRANSACTIONQTY
					      ,TH.TOTAL_QTY AS TOTALQTY
					      ,TH.REMARKS AS REMARKS
		    FROM CB_SCM_TRADE_H_V TH
  </sql>

  <sql id="search.mat.tradeno.list.lov.sql-where">
         WHERE 1=1
      <isNotEmpty property="ORGID" prepend="AND">
              TH.ORG_ID = #ORGID#
      </isNotEmpty>
      <isNotEmpty property="COMPANYID" prepend="AND">
              TH.COMPANY_ID = #COMPANYID#
      </isNotEmpty>
      <isNotEmpty property="SEARCHTO">
             <isNotEmpty property="SEARCHFROM" prepend="AND">
                TH.TRADE_DATE1 BETWEEN TO_DATE(#SEARCHFROM#,'YYYY-MM-DD')  AND TO_DATE(#SEARCHTO#,'YYYY-MM-DD')
             </isNotEmpty>
             <isEmpty property="SEARCHFROM" prepend="AND">
                TH.TRADE_DATE1 = TO_DATE(#SEARCHTO#,'YYYY-MM-DD')
             </isEmpty>
      </isNotEmpty>
      <isEqual property="GUBUN" compareValue="O">
         AND TH.TRADE_NO IN (SELECT TD.TRADE_NO
                                        FROM CB_SCM_TRADE_D TD
                                       WHERE TD.ORG_ID = TH.ORG_ID
                                         AND TD.COMPANY_ID = TH.COMPANY_ID
                                         AND TD.TRADE_NO = TH.TRADE_NO
                                         AND TD.OUT_TRANS_NO IS NOT NULL
                                         AND TD.OUT_TRANS_SEQ IS NOT NULL)
      </isEqual>
      <isEqual property="GUBUN" compareValue="A">
           AND TH.TRADE_NO IN (SELECT TD.TRADE_NO
                                          FROM CB_SCM_TRADE_D TD
                                         WHERE TD.ORG_ID = TH.ORG_ID
                                           AND TD.COMPANY_ID = TH.COMPANY_ID
                                           AND TD.TRADE_NO = TH.TRADE_NO
                                           AND TD.PO_NO IS NOT NULL
                                           AND TD.PO_SEQ IS NOT NULL)
      </isEqual>
        ORDER BY TH.ORG_ID, TH.COMPANY_ID, TH.TRADE_NO
  </sql>

  <select id="search.mat.tradeno.list.lov.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
          <include refid="search.mat.tradeno.list.lov.sql-select" />
          <include refid="search.mat.tradeno.list.lov.sql-where" />
  </select>

  <select id="search.mat.tradeno.list.lov.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.mat.tradeno.list.lov.sql-select" />
          <include refid="search.mat.tradeno.list.lov.sql-where" />
      ) TOT
  </select>
  <!-- 자재 거래명세서 번호 LOV 끝 -->
  
  <!-- 자재 거래명세서 > 발주현황 POPUP LOV 시작 -->
  <sql id="search.scm.trade.popup.lov.sql-select">
        SELECT RANK() OVER(ORDER BY ORG_ID, COMPANY_ID, PO_NO, PO_SEQ) AS RN
					      ,ORG_ID AS ORGID
					      ,COMPANY_ID AS COMPANYID
					      ,PO_NO AS PONO
					      ,PO_SEQ AS POSEQ
					      ,PO_DATE AS PODATE
					      ,CUSTOMER_CODE AS CUSTOMERCODE
					      ,CUSTOMER_NAME AS CUSTOMERNAME
					      ,ITEM_CODE AS ITEMCODE
					      ,ITEM_NAME AS ITEMNAME
					      ,ORDER_NAME AS ORDERNAME
					      ,UOM AS UOM
					      ,UOM_NAME AS UOMNAME
					      ,ITEM_STANDARD AS ITEMSTANDARD
					      ,MATERIAL_TYPE AS MATERIALTYPE
					      ,ORDER_QTY AS ORDERQTY
					      ,UNIT_PRICE AS UNITPRICE
					      ,BEFORE_QTY AS BEFOREQTY
					      ,TRADE_QTY AS TRADEQTY
			  FROM CB_SCM_TRADE_POPUP_V
  </sql>

  <sql id="search.scm.trade.popup.lov.sql-where">
         WHERE TRADE_QTY > 0
      <isNotEmpty property="ORGID" prepend="AND">
              ORG_ID = #ORGID#
      </isNotEmpty>
      <isNotEmpty property="COMPANYID" prepend="AND">
              COMPANY_ID = #COMPANYID#
      </isNotEmpty>
      <isNotEmpty property="CUSTOMERNAME" prepend="AND">
              CUSTOMER_NAME LIKE '%' || #CUSTOMERNAME# || '%'
      </isNotEmpty>
      <isNotEmpty property="SEARCHTO">
             <isNotEmpty property="SEARCHFROM" prepend="AND">
                PO_DATE1 BETWEEN TO_DATE(#SEARCHFROM#,'YYYY-MM-DD')  AND TO_DATE(#SEARCHTO#,'YYYY-MM-DD')
             </isNotEmpty>
             <isEmpty property="SEARCHFROM" prepend="AND">
                PO_DATE1 = TO_DATE(#SEARCHTO#,'YYYY-MM-DD')
             </isEmpty>
      </isNotEmpty>
        ORDER BY ORG_ID, COMPANY_ID, PO_NO, PO_SEQ
  </sql>

  <select id="search.scm.trade.popup.lov.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
          <include refid="search.scm.trade.popup.lov.sql-select" />
          <include refid="search.scm.trade.popup.lov.sql-where" />
  </select>

  <select id="search.scm.trade.popup.lov.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.scm.trade.popup.lov.sql-select" />
          <include refid="search.scm.trade.popup.lov.sql-where" />
      ) TOT
  </select>
  <!-- 자재 거래명세서 > 발주현황 POPUP LOV 끝 -->
  
  <!-- 외주발주 거래명세서 > 외주입고현황 POPUP LOV 시작 -->
  <sql id="search.scm.outproctrade.popup.lov.sql-select">
 <![CDATA[
 SELECT RANK() OVER(ORDER BY OH.ORG_ID, OH.COMPANY_ID, CC.CUSTOMER_NAME, OH.OUT_PO_NO, OD.OUT_PO_SEQ) AS RN
		      ,OH.ORG_ID AS ORGID
		      ,OH.COMPANY_ID AS COMPANYID
		      ,OH.OUT_PO_NO AS OUTPONO
		      ,OD.OUT_PO_SEQ AS OUTPOSEQ
		      ,TO_CHAR(OH.OUT_PO_DATE, 'YYYY-MM-DD') AS OUTPODATE
		      ,OH.CUSTOMER_CODE AS CUSTOMERCODE
		      ,CC.CUSTOMER_NAME AS CUSTOMERNAME
		      ,OD.ITEM_CODE AS ITEMCODE
		      ,IM.ORDER_NAME AS ORDERNAME
		      ,IM.DRAWING_NO AS DRAWINGNO
		      ,IM.ITEM_NAME AS ITEMNAME
		      ,IM.CAR_TYPE AS MODEL
		      ,CB_COMMON_STANDARD_PKG.CB_FIND_SMALL_NAME_1(IM.ORG_ID
		                                                  ,IM.COMPANY_ID
		                                                  ,'CMM'
		                                                  ,'MODEL'
		                                                  ,IM.CAR_TYPE
		                                                  ,'LABEL') AS MODELNAME
		      ,IM.ITEM_STANDARD_DETAIL AS ITEMSTANDARDDETAIL
		      ,IM.UOM
		      ,CB_COMMON_STANDARD_PKG.CB_FIND_SMALL_NAME_1(IM.ORG_ID
		                                                  ,IM.COMPANY_ID
		                                                  ,'CMM'
		                                                  ,'UOM'
		                                                  ,IM.UOM
		                                                  ,'LABEL') AS UOMNAME
		      ,OD.WORK_ORDER_ID AS WORKORDERID
		      ,OD.WORK_ORDER_SEQ AS WORKORDERSEQ
		      ,(CASE WHEN OD.WORK_ORDER_ID IS NOT NULL THEN
		               (SELECT WO.ROUTING_CODE
		                  FROM CB_WORK_ORDER WO
		                 WHERE WO.ORG_ID = OD.ORG_ID
		                   AND WO.COMPANY_ID = OD.COMPANY_ID
		                   AND WO.WORK_ORDER_ID = OD.WORK_ORDER_ID
		                   AND WO.WORK_ORDER_SEQ = OD.WORK_ORDER_SEQ)
		             ELSE
		               (SELECT TO_CHAR(MAX(RC.ROUTING_ID))
		                  FROM CB_ROUTING_CONTROL RC
		                 WHERE RC.ORG_ID = OD.ORG_ID
		                   AND RC.COMPANY_ID = OD.COMPANY_ID
		                   AND RC.ITEM_CODE = OD.ITEM_CODE
		                   AND RC.ROUTING_NO = OD.ROUTING_NO)
		             END) AS ROUTINGID
		      ,(CASE WHEN OD.WORK_ORDER_ID IS NOT NULL THEN
		               (SELECT MAX(RC.ROUTING_NO)
		                  FROM CB_WORK_ORDER WO
		                      ,CB_ROUTING_CONTROL RC
		                 WHERE WO.ORG_ID = OD.ORG_ID
		                   AND WO.COMPANY_ID = OD.COMPANY_ID
		                   AND WO.WORK_ORDER_ID = OD.WORK_ORDER_ID
		                   AND WO.WORK_ORDER_SEQ = OD.WORK_ORDER_SEQ
		                   AND WO.ORG_ID = RC.ORG_ID
		                   AND WO.COMPANY_ID = RC.COMPANY_ID
		                   AND WO.ITEM_CODE = RC.ITEM_CODE
		                   AND WO.ROUTING_CODE = RC.ROUTING_ID)
		             ELSE
		               OD.ROUTING_NO
		             END) AS ROUTINGNO
		      ,(CASE WHEN OD.WORK_ORDER_ID IS NOT NULL THEN
		               (SELECT CB_COMMON_STANDARD_PKG.CB_FIND_SMALL_NAME_1(RC.ORG_ID
		                                                                  ,RC.COMPANY_ID
		                                                                  ,'MFG'
		                                                                  ,'ROUTING_NAME'
		                                                                  ,RC.ROUTING_NO
		                                                                  ,'LABEL')
		                  FROM CB_WORK_ORDER WO
		                      ,CB_ROUTING_CONTROL RC
		                 WHERE WO.ORG_ID = OD.ORG_ID
		                   AND WO.COMPANY_ID = OD.COMPANY_ID
		                   AND WO.WORK_ORDER_ID = OD.WORK_ORDER_ID
		                   AND WO.WORK_ORDER_SEQ = OD.WORK_ORDER_SEQ
		                   AND WO.ORG_ID = RC.ORG_ID
		                   AND WO.COMPANY_ID = RC.COMPANY_ID
		                   AND WO.ITEM_CODE = RC.ITEM_CODE
		                   AND WO.ROUTING_CODE = RC.ROUTING_ID)
		             ELSE
		               CB_COMMON_STANDARD_PKG.CB_FIND_SMALL_NAME_1(OD.ORG_ID
		                                                          ,OD.COMPANY_ID
		                                                          ,'MFG'
		                                                          ,'ROUTING_NAME'
		                                                          ,OD.ROUTING_NO
		                                                          ,'LABEL')
		             END) AS ROUTINGNAME
		      ,OD.ORDER_QTY AS ORDERQTY
		      ,NVL((SELECT SUM(NVL(TD.TRANSACTION_QTY, 0)  + NVL(TD.FAULT_QTY, 0))
		              FROM CB_SCM_TRADE_D TD
		             WHERE TD.ORG_ID = OD.ORG_ID
		               AND TD.COMPANY_ID = OD.COMPANY_ID
		               AND TD.OUT_PO_NO = OD.OUT_PO_NO
		               AND TD.OUT_PO_SEQ = OD.OUT_PO_SEQ), 0) AS BEFOREQTY
		      ,OD.ORDER_QTY -
		       NVL((SELECT SUM(NVL(TD.TRANSACTION_QTY, 0)  + NVL(TD.FAULT_QTY, 0))
		              FROM CB_SCM_TRADE_D TD
		             WHERE TD.ORG_ID = OD.ORG_ID
		               AND TD.COMPANY_ID = OD.COMPANY_ID
		               AND TD.OUT_PO_NO = OD.OUT_PO_NO
		               AND TD.OUT_PO_SEQ = OD.OUT_PO_SEQ), 0) AS TRADEQTY
		      ,OD.UNIT_PRICE AS UNITPRICE
  FROM CB_OUT_ORDER_H OH
		      ,CB_OUT_ORDER_D OD
		      ,CB_ITEM_MASTER IM
		      ,CB_CUSTOMER CC
 ]]>
  </sql>

  <sql id="search.scm.outproctrade.popup.lov.sql-where">
		 WHERE OH.ORG_ID = OD.ORG_ID
		   AND OH.COMPANY_ID = OD.COMPANY_ID
		   AND OH.OUT_PO_NO = OD.OUT_PO_NO
		   AND OD.ORG_ID = IM.ORG_ID
		   AND OD.COMPANY_ID = IM.COMPANY_ID
		   AND OD.ITEM_CODE = IM.ITEM_CODE
		   AND OH.ORG_ID = CC.ORG_ID
		   AND OH.COMPANY_ID = CC.COMPANY_ID
		   AND OH.CUSTOMER_CODE = CC.CUSTOMER_CODE
       AND OD.WORK_ORDER_ID IN (SELECT WOD.WORK_ORDER_ID
						                                  FROM CB_WORK_ORDER_D WOD
						                                 WHERE WOD.ORG_ID = OD.ORG_ID
						                                   AND WOD.COMPANY_ID = OD.COMPANY_ID
						                                   AND WOD.START_TIME IS NOT NULL
						                                   AND NVL(WOD.START_TIME, SYSDATE) >= TO_DATE('2021-01-01', 'YYYY-MM-DD'))
		   AND (OD.ORDER_QTY -
		       NVL((SELECT SUM(NVL(TD.TRANSACTION_QTY, 0)  + NVL(TD.FAULT_QTY, 0))
		              FROM CB_SCM_TRADE_D TD
		             WHERE TD.ORG_ID = OD.ORG_ID
		               AND TD.COMPANY_ID = OD.COMPANY_ID
		               AND TD.OUT_PO_NO = OD.OUT_PO_NO
		               AND TD.OUT_PO_SEQ = OD.OUT_PO_SEQ), 0)) > 0
      <isNotEmpty property="ORGID" prepend="AND">
              OH.ORG_ID = #ORGID#
      </isNotEmpty>
      <isNotEmpty property="COMPANYID" prepend="AND">
              OH.COMPANY_ID = #COMPANYID#
      </isNotEmpty>
      <isNotEmpty property="CUSTOMERNAME" prepend="AND">
              CC.CUSTOMER_NAME LIKE '%' || #CUSTOMERNAME# || '%'
      </isNotEmpty>
      <isNotEmpty property="SEARCHTO">
             <isNotEmpty property="SEARCHFROM" prepend="AND">
                OH.OUT_PO_DATE BETWEEN TO_DATE(#SEARCHFROM#,'YYYY-MM-DD')  AND TO_DATE(#SEARCHTO#,'YYYY-MM-DD')
             </isNotEmpty>
             <isEmpty property="SEARCHFROM" prepend="AND">
                OH.OUT_PO_DATE = TO_DATE(#SEARCHTO#,'YYYY-MM-DD')
             </isEmpty>
      </isNotEmpty>
  </sql>

  <select id="search.scm.outproctrade.popup.lov.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
          <include refid="search.scm.outproctrade.popup.lov.sql-select" />
          <include refid="search.scm.outproctrade.popup.lov.sql-where" />
  </select>

  <select id="search.scm.outproctrade.popup.lov.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.scm.outproctrade.popup.lov.sql-select" />
          <include refid="search.scm.outproctrade.popup.lov.sql-where" />
      ) TOT
  </select>
  <!-- 외주발주 거래명세서 > 외주입고현황 POPUP LOV 끝 -->
  
  <!-- 치공구관리 > 반출내역 POPUP LOV 시작 -->
  <sql id="search.tool.out.popup.lov.sql-select">
      SELECT RANK() OVER(ORDER BY TH.OUT_DATE, TH.OUT_NO, TD.OUT_SEQ) AS RN
				      ,TD.ORG_ID AS ORGID
				      ,TD.COMPANY_ID AS COMPANYID
				      ,TD.OUT_NO AS OUTNO
				      ,TD.OUT_SEQ AS OUTSEQ
				      ,TH.OUT_DATE AS OUTDATE
				      ,TH.CUSTOMER_CODE AS CUSTOMERCODE
				      ,TH.CUSTOMER_NAME AS CUSTOMERNAME
				      ,TD.ITEM_CODE AS ITEMCODE
				      ,TD.ORDER_NAME AS ORDERNAME
				      ,TD.ITEM_NAME AS ITEMNAME
				      ,TD.ITEM_STANDARD AS ITEMSTANDARD
				      ,TD.UOM_NAME AS UOMNAME
				      ,TD.QTY AS QTY
				      ,TD.IN_QTY AS INQTY
				      ,TD.REMAIN_QTY AS REMAINQTY
		  FROM CB_TOOL_OUT_H_V TH
		         ,CB_TOOL_OUT_D_V TD
  </sql>

  <sql id="search.tool.out.popup.lov.sql-where">
      WHERE TH.ORG_ID = TD.ORG_ID
			   AND TH.COMPANY_ID = TD.COMPANY_ID
			   AND TH.OUT_NO = TD.OUT_NO
			   AND TD.REMAIN_QTY > 0
      <isNotEmpty property="ORGID" prepend="AND">
              TD.ORG_ID = #ORGID#
      </isNotEmpty>
      <isNotEmpty property="COMPANYID" prepend="AND">
              TD.COMPANY_ID = #COMPANYID#
      </isNotEmpty>
      <isNotEmpty property="CUSTOMERNAME" prepend="AND">
              TH.CUSTOMER_NAME LIKE '%' || #CUSTOMERNAME# || '%'
      </isNotEmpty>
      <isNotEmpty property="ITEMNAME" prepend="AND">
              TD.ITEM_NAME LIKE '%' || #ITEMNAME# || '%'
      </isNotEmpty>
      <isNotEmpty property="ITEMSTANDARD" prepend="AND">
              TD.ITEM_STANDARD LIKE '%' || #ITEMSTANDARD# || '%'
      </isNotEmpty>
      <isNotEmpty property="SEARCHTO">
             <isNotEmpty property="SEARCHFROM" prepend="AND">
                TH.OUT_DATE1 BETWEEN TO_DATE(#SEARCHFROM#,'YYYY-MM-DD')  AND TO_DATE(#SEARCHTO#,'YYYY-MM-DD')
             </isNotEmpty>
             <isEmpty property="SEARCHFROM" prepend="AND">
                TH.OUT_DATE1 = TO_DATE(#SEARCHTO#,'YYYY-MM-DD')
             </isEmpty>
      </isNotEmpty>
       ORDER BY TH.OUT_DATE, TH.OUT_NO, TD.OUT_SEQ
  </sql>

  <select id="search.tool.out.popup.lov.select" parameterClass="java.util.Map"
      resultClass="java.util.HashMap">
          <include refid="search.tool.out.popup.lov.sql-select" />
          <include refid="search.tool.out.popup.lov.sql-where" />
  </select>

  <select id="search.tool.out.popup.lov.count" parameterClass="java.util.Map"
      resultClass="java.lang.Integer">
      SELECT COUNT(*) FROM (
          <include refid="search.tool.out.popup.lov.sql-select" />
          <include refid="search.tool.out.popup.lov.sql-where" />
      ) TOT
  </select>
  <!-- 치공구관리 > 반출내역 POPUP LOV 끝 -->
  
  
  <!-- 공구변경점등록 공정명 불러오기 Lov 시작 -->
  <sql id="search.tool.routingitem.name.lov.sql-select">
     SELECT NV.ORG_ID AS ORGID
				      ,NV.COMPANY_ID AS COMPANYID
				      ,NV.ITEM_CODE AS ITEMCODE
				      ,NV.ITEM_NAME AS ITEMNAME
				      ,NV.ORDER_NAME AS ORDERNAME
				      ,NV.ROUTING_ID AS ROUTINGID
				      ,NV.ROUTING_NO AS ROUTINGNO
				      ,NV.ROUTING_OP AS ROUTINGOP
				      ,NV.SORT_ORDER AS SORTORDER
				      ,NV.ROUTING_NAME AS ROUTINGNAME
				      ,NV.EQUIPMENT_CODE AS EQUIPMENTCODE
				      ,NV.EQUIPMENT_NAME AS EQUIPMENTNAME
				      ,NV.WORK_CENTER_CODE AS WORKCENTERCODE
				      ,NV.WORK_CENTER_NAME AS WORKCENTERNAME
              ,NV.EMPLOYEE_NUMBER AS EMPLOYEENUMBER
              ,NV.KR_NAME AS KRNAME
		  FROM CB_NEW_WORK_ORDER_LIST_V NV
  </sql>

  <sql id="search.tool.routingitem.name.lov.sql-where">
         WHERE EMPLOYEE_NUMBER IS NOT NULL
        <isNotEmpty property="ORGID" prepend="AND">
                NV.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
                NV.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="ITEMCODE" prepend="AND">
                NV.ITEM_CODE = #ITEMCODE#
        </isNotEmpty>
        <isNotEmpty property="WORKCENTERCODE" prepend="AND">
                NV.WORK_CENTER_CODE = #WORKCENTERCODE#
        </isNotEmpty>
        <isNotEmpty property="WORKDEPT" prepend="AND">
                NV.WORK_DEPT = #WORKDEPT#
        </isNotEmpty>
        <isNotEmpty property="ROUTINGID" prepend="AND">
                NV.ROUTING_ID = #ROUTINGID#
        </isNotEmpty>
        <isNotEmpty property="keyword">
            <isNotEqual property="keyword" compareValue="%">
              <isEqual property="GUBUN" compareValue="ROUTINGNAME" prepend="AND">
                NV.ROUTING_NAME LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="GUBUN" compareValue="ROUTINGNO" prepend="AND">
                NV.ROUTING_NO LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="GUBUN" compareValue="ROUTINGID" prepend="AND">
                NV.ROUTING_ID LIKE '%' || #keyword# || '%'
              </isEqual>
            </isNotEqual>
        </isNotEmpty>
        <isNotEmpty property="SEARCHGUBUN" prepend="AND">
               (NV.ORG_ID, NV.COMPANY_ID, NV.ITEM_CODE, NV.ROUTING_ID) IN (SELECT TV.ORG_ID, TV.COMPANY_ID, TV.ROUTING_ITEM_CODE, TV.ROUTING_ID
																		                                                                 FROM CB_TOOL_CHECK_MASTER_V TV
																		                                                                WHERE SYSDATE BETWEEN EFFECTIVE_START_DATE AND EFFECTIVE_END_DATE
																		                                                              <isNotEmpty property="ORGID" prepend="AND">
																		                                                                      TV.ORG_ID = #ORGID#
																		                                                              </isNotEmpty>
																		                                                              <isNotEmpty property="COMPANYID" prepend="AND">
																		                                                                      TV.COMPANY_ID = #COMPANYID#
																		                                                              </isNotEmpty>
                                                                                                  <isNotEmpty property="ITEMCODE" prepend="AND">
                                                                                                          TV.ROUTING_ITEM_CODE = #ITEMCODE#
                                                                                                  </isNotEmpty>
																		                                                              <isNotEmpty property="ROUTINGID" prepend="AND">
																		                                                                      TV.ROUTING_ID = #ROUTINGID#
																		                                                              </isNotEmpty>
																		                                                               )
        </isNotEmpty>
        ORDER BY  NV.SORT_ORDER
  </sql>

  <select id="search.tool.routingitem.name.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.tool.routingitem.name.lov.sql-select" />
            <include refid="search.tool.routingitem.name.lov.sql-where" />
  </select>

  <select id="search.tool.routingitem.name.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.tool.routingitem.name.lov.sql-select" />
            <include refid="search.tool.routingitem.name.lov.sql-where" />
        ) TOT
  </select>
  <!-- 공구변경점등록 공정명 불러오기 Lov 끝 -->
  
  <sql id="search.work.routing.cavity.lov.sql-select">
        SELECT AA.MINVAL + (LEVEL - 1) AS LABEL
              ,AA.MINVAL + (LEVEL - 1) AS VALUE
          FROM (SELECT -1 AS MINVAL
                      ,MAX(RC.CAVITY) AS MAXVAL
                      ,MAX(RC.CAVITY) + 2 AS DIFFVAL
                  FROM CB_ROUTING_CONTROL RC
  </sql>

  <sql id="search.work.routing.cavity.lov.sql-where">
                 WHERE RC.ORG_ID = #ORGID#
                   AND RC.COMPANY_ID = #COMPANYID#
                   AND RC.ITEM_CODE = #ITEMCODE#
                   AND RC.ROUTING_ID = #ROUTINGID#)AA
         CONNECT BY LEVEL <![CDATA[ < ]]> (AA.DIFFVAL + 1)
  </sql>

  <select id="search.work.routing.cavity.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.work.routing.cavity.lov.sql-select" />
            <include refid="search.work.routing.cavity.lov.sql-where" />
  </select>

  <select id="search.work.routing.cavity.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.work.routing.cavity.lov.sql-select" />
            <include refid="search.work.routing.cavity.lov.sql-where" />
        ) TOT
  </select>
  
   <!-- 공정 정보 가져오기 -->
   <sql id="search.routing.list.lov.sql-select">
        SELECT RANK() OVER(ORDER BY RC.ORG_ID, RC.COMPANY_ID, RC.ITEM_CODE, RC.SORT_ORDER) AS RN
                 ,RC.ROUTING_ID AS ROUTINGCODE
                 ,RC.ROUTING_NO AS ROUTINGNO
                 ,(SELECT SC.SMALL_NAME
                     FROM CB_SMALL_CODE SC
                    WHERE SC.ORG_ID = RC.ORG_ID
                      AND SC.COMPANY_ID = RC.COMPANY_ID
                      AND SC.BIG_CODE = 'MFG'
                      AND SC.MIDDLE_CODE = 'ROUTING_NAME'
                      AND SC.SMALL_CODE = RC.ROUTING_NO)  AS ROUTINGNAME
                 ,RC.SORT_ORDER AS SORTORDER
                 ,RC.ROUTING_OP AS ROUTINGOP
        FROM CB_ROUTING_CONTROL RC
    </sql>

    <sql id="search.routing.list.lov.sql-where">
         WHERE NVL((CASE WHEN LENGTH(#SEARCHDATE#) = 4 THEN
										               TO_DATE(#SEARCHDATE#, 'YYYY')
										             WHEN LENGTH(#SEARCHDATE#) = 7 THEN
										               TO_DATE(#SEARCHDATE#, 'YYYY-MM')
										             WHEN LENGTH(#SEARCHDATE#) = 10 THEN
										               TO_DATE(#SEARCHDATE#, 'YYYY-MM-DD')
										             ELSE
										               SYSDATE
										             END), SYSDATE) BETWEEN EFFECTIVE_START_DATE AND EFFECTIVE_END_DATE
            AND RC.ITEM_CODE = #ITEMCODE#
        <isNotEmpty property="ORGID" prepend="AND">
                RC.ORG_ID = #ORGID#
        </isNotEmpty>
        <isNotEmpty property="COMPANYID" prepend="AND">
                RC.COMPANY_ID = #COMPANYID#
        </isNotEmpty>
        <isNotEmpty property="ROUTINGID" prepend="AND">
                RC.ROUTING_ID = #ROUTINGID#
        </isNotEmpty>
        <isNotEmpty property="keyword">
            <isNotEqual property="keyword" compareValue="%">
              <isEqual property="GUBUN" compareValue="ROUTINGNAME" prepend="AND">
                RC.ROUTING_NAME LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="GUBUN" compareValue="ROUTINGNO" prepend="AND">
                RC.ROUTING_NO LIKE '%' || #keyword# || '%'
              </isEqual>
              <isEqual property="GUBUN" compareValue="ROUTINGID" prepend="AND">
                RC.ROUTING_ID LIKE '%' || #keyword# || '%'
              </isEqual>
            </isNotEqual>
        </isNotEmpty>
        ORDER BY RC.ORG_ID, RC.COMPANY_ID, RC.ITEM_CODE, RC.SORT_ORDER
    </sql>

    <select id="search.routing.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.routing.list.lov.sql-select" />
            <include refid="search.routing.list.lov.sql-where" />
    </select>

    <select id="search.routing.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.routing.list.lov.sql-select" />
            <include refid="search.routing.list.lov.sql-where" />
        ) TOT
    </select>
   <!-- 공정 정보 가져오기 -->
   
   <sql id="search.itemstandarddetail.list.lov.sql-select">
        SELECT IM.ITEM_STANDARD_DETAIL AS VALUE
				  FROM CB_ITEM_MASTER_V IM
    </sql>

    <sql id="search.itemstandarddetail.list.lov.sql-where">
         WHERE IM.ORG_ID = #ORGID#
           AND IM.COMPANY_ID = #COMPANYID#
           AND IM.GROUP_CODE = 'A'
           AND IM.ITEM_NAME = #ITEMNAME#
           AND IM.MODEL = #MODEL#
         ORDER BY IM.ITEM_STANDARD_DETAIL
           
    </sql>

    <select id="search.itemstandarddetail.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.itemstandarddetail.list.lov.sql-select" />
            <include refid="search.itemstandarddetail.list.lov.sql-where" />
    </select>

    <select id="search.itemstandarddetail.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.itemstandarddetail.list.lov.sql-select" />
            <include refid="search.itemstandarddetail.list.lov.sql-where" />
        ) TOT
    </select>
    
    <select id="search.ShippingItemGroup.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
					SELECT SC.SMALL_CODE AS VALUE
					      ,SC.SMALL_NAME AS LABEL
					  FROM CB_SMALL_CODE SC
					 WHERE SC.ORG_ID = $ORGID$
					   AND SC.COMPANY_ID = $COMPANYID$
					   AND SC.BIG_CODE = #BIGCD#
					   AND SC.MIDDLE_CODE = #MIDDLECD#
					 ORDER BY SC.SMALL_CODE            
        ) TOT
    </select>
    
    <select id="search.ShippingItemGroup.list.lov.list" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
          SELECT SC.SMALL_CODE AS VALUE
                ,SC.SMALL_NAME AS LABEL
            FROM CB_SMALL_CODE SC
           WHERE SC.ORG_ID = $ORGID$
             AND SC.COMPANY_ID = $COMPANYID$
             AND SC.BIG_CODE = #BIGCD#
             AND SC.MIDDLE_CODE = #MIDDLECD#
           ORDER BY SC.SMALL_CODE
    </select>
    
    <select id="search.outType.list.lov.list" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
          SELECT SC.SMALL_NAME AS LABEL
      ,SC.SMALL_CODE AS VALUE
					  FROM CB_SMALL_CODE SC 
					 WHERE SC.ORG_ID = #ORGID#
					   AND SC.COMPANY_ID = #COMPANYID#
					   AND SC.BIG_CODE = 'MFG'
					   AND SC.MIDDLE_CODE = 'OUT_TYPE'
					   AND SC.SMALL_NAME LIKE '%' || #KEYWORD# || '%'
    </select>
    
    <select id="search.outType.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
     SELECT COUNT(*) FROM(    
          SELECT SC.SMALL_NAME AS LABEL
      ,SC.SMALL_CODE AS VALUE
            FROM CB_SMALL_CODE SC 
           WHERE SC.ORG_ID = #ORGID#
             AND SC.COMPANY_ID = #COMPANYID#
             AND SC.BIG_CODE = 'MFG'
             AND SC.MIDDLE_CODE = 'OUT_TYPE'
             AND SC.SMALL_NAME LIKE '%' || #KEYWORD# || '%'
      )       
    </select>
    
    <select id="search.all.employee.list" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
    SELECT EMPLOYEE_NUMBER AS VALUE
          ,KR_NAME AS LABEL
		  FROM CB_HUMANRESOURCE_MANAGER
		 WHERE SYSDATE BETWEEN EFFECTIVE_START_DATE AND EFFECTIVE_END_DATE
		   AND DEPARTMENT_CODE IS NOT NULL
		 ORDER BY KR_NAME 
    </select>
    
    <select id="search.all.employee.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
    SELECT COUNT(*) 
	    FROM   (SELECT EMPLOYEE_NUMBER AS VALUE
				            ,KR_NAME AS LABEL
				       FROM CB_HUMANRESOURCE_MANAGER
				      WHERE SYSDATE BETWEEN EFFECTIVE_START_DATE AND EFFECTIVE_END_DATE
				      ORDER BY KR_NAME ) A
    </select>
    
    
   <sql id="search.group.model.list.lov.sql-select">
        SELECT IM.ORG_ID AS ORGID
					      ,IM.COMPANY_ID AS COMPANYID
					      ,IM.MODEL AS MODEL
					      ,CB_COMMON_STANDARD_PKG.CB_FIND_SMALL_NAME_1(IM.ORG_ID
					                                                  ,IM.COMPANY_ID
					                                                  ,'CMM'
					                                                  ,'MODEL'
					                                                  ,IM.MODEL
					                                                  ,'LABEL') AS MODELNAME
			  FROM CB_MONTHLY_MODEL_TEMP IM
					      ,(SELECT #ORGID# AS ORG_ID
					              ,#COMPANYID# AS COMPANY_ID
					              ,TRUNC(TO_DATE(#SEARCHMONTH#, 'YYYY-MM'), 'MM') AS SEARCH_DATE
					              ,#LABEL# AS LABEL
					              ,#ROUTINGGROUP# AS ROUTING_GROUP
					              ,#MODEL# AS MODEL
					          FROM DUAL) TMP
    </sql>

    <sql id="search.group.model.list.lov.sql-where">
         WHERE IM.ORG_ID = TMP.ORG_ID
           AND IM.COMPANY_ID = TMP.COMPANY_ID
           AND IM.STANDARD_DATE = TMP.SEARCH_DATE
           AND IM.LABEL = TMP.LABEL
           /*AND IM.ROUTING_GROUP = TMP.ROUTING_GROUP*/
           AND IM.ROUTING_GROUP IN (SELECT SC.ATTRIBUTE2
                                      FROM CB_SMALL_CODE SC
                                     WHERE SC.ORG_ID = TMP.ORG_ID
                                       AND SC.COMPANY_ID = TMP.COMPANY_ID
                                       AND SC.BIG_CODE = 'MFG'
                                       AND SC.MIDDLE_CODE = 'WORK_GROUP'
                                       AND SC.SMALL_CODE = TMP.ROUTING_GROUP)
           AND IM.MODEL = NVL(TMP.MODEL, IM.MODEL)
         GROUP BY IM.ORG_ID, IM.COMPANY_ID, IM.MODEL
         ORDER BY IM.ORG_ID, IM.COMPANY_ID, IM.MODEL
    </sql>

    <select id="search.group.model.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.group.model.list.lov.sql-select" />
            <include refid="search.group.model.list.lov.sql-where" />
    </select>

    <select id="search.group.model.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.group.model.list.lov.sql-select" />
            <include refid="search.group.model.list.lov.sql-where" />
        ) TOT
    </select>
    
   <sql id="search.group.itemdetail.list.lov.sql-select">
        SELECT IM.ORG_ID AS ORGID
                ,IM.COMPANY_ID AS COMPANYID
                ,IM.ITEM_STANDARD_DETAIL AS ITEMSTANDARDDETAIL
        FROM CB_MONTHLY_MODEL_TEMP IM
                ,(SELECT #ORGID# AS ORG_ID
                        ,#COMPANYID# AS COMPANY_ID
                        ,TRUNC(TO_DATE(#SEARCHMONTH#, 'YYYY-MM'), 'MM') AS SEARCH_DATE
                        ,#LABEL# AS LABEL
                        ,#ROUTINGGROUP# AS ROUTING_GROUP
                        ,#MODEL# AS MODEL
                    FROM DUAL) TMP
    </sql>

    <sql id="search.group.itemdetail.list.lov.sql-where">
         WHERE IM.ORG_ID = TMP.ORG_ID
           AND IM.COMPANY_ID = TMP.COMPANY_ID
           AND IM.STANDARD_DATE = TMP.SEARCH_DATE
           AND IM.LABEL = TMP.LABEL
           /*AND IM.ROUTING_GROUP = TMP.ROUTING_GROUP*/
           AND IM.ROUTING_GROUP IN (SELECT SC.ATTRIBUTE2
                                      FROM CB_SMALL_CODE SC
                                     WHERE SC.ORG_ID = TMP.ORG_ID
                                       AND SC.COMPANY_ID = TMP.COMPANY_ID
                                       AND SC.BIG_CODE = 'MFG'
                                       AND SC.MIDDLE_CODE = 'WORK_GROUP'
                                       AND SC.SMALL_CODE = TMP.ROUTING_GROUP)
           AND IM.MODEL = NVL(TMP.MODEL, IM.MODEL)
         GROUP BY IM.ORG_ID, IM.COMPANY_ID, IM.ITEM_STANDARD_DETAIL
         ORDER BY IM.ORG_ID, IM.COMPANY_ID, IM.ITEM_STANDARD_DETAIL
    </sql>

    <select id="search.group.itemdetail.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.group.itemdetail.list.lov.sql-select" />
            <include refid="search.group.itemdetail.list.lov.sql-where" />
    </select>

    <select id="search.group.itemdetail.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.group.itemdetail.list.lov.sql-select" />
            <include refid="search.group.itemdetail.list.lov.sql-where" />
        ) TOT
    </select>
    
   <sql id="search.group.year.model.list.lov.sql-select">
        SELECT IM.ORG_ID AS ORGID
                ,IM.COMPANY_ID AS COMPANYID
                ,IM.MODEL AS MODEL
                ,CB_COMMON_STANDARD_PKG.CB_FIND_SMALL_NAME_1(IM.ORG_ID
                                                            ,IM.COMPANY_ID
                                                            ,'CMM'
                                                            ,'MODEL'
                                                            ,IM.MODEL
                                                            ,'LABEL') AS MODELNAME
        FROM CB_MONTHLY_MODEL_TEMP IM
                ,(SELECT #ORGID# AS ORG_ID
                        ,#COMPANYID# AS COMPANY_ID
                        ,#SEARCHYEAR# AS SEARCH_YEAR
                        ,#LABEL# AS LABEL
                        ,#ROUTINGGROUP# AS ROUTING_GROUP
                        ,#MODEL# AS MODEL
                    FROM DUAL) TMP
    </sql>

    <sql id="search.group.year.model.list.lov.sql-where">
         WHERE IM.ORG_ID = TMP.ORG_ID
           AND IM.COMPANY_ID = TMP.COMPANY_ID
           AND TO_CHAR(IM.STANDARD_DATE, 'YYYY') = TMP.SEARCH_YEAR
           AND IM.LABEL = TMP.LABEL
           /*AND IM.ROUTING_GROUP = TMP.ROUTING_GROUP*/
           AND IM.ROUTING_GROUP IN (SELECT SC.ATTRIBUTE2
                                      FROM CB_SMALL_CODE SC
                                     WHERE SC.ORG_ID = TMP.ORG_ID
                                       AND SC.COMPANY_ID = TMP.COMPANY_ID
                                       AND SC.BIG_CODE = 'MFG'
                                       AND SC.MIDDLE_CODE = 'WORK_GROUP'
                                       AND SC.SMALL_CODE = TMP.ROUTING_GROUP)
           AND IM.MODEL = NVL(TMP.MODEL, IM.MODEL)
         GROUP BY IM.ORG_ID, IM.COMPANY_ID, IM.MODEL
         ORDER BY IM.ORG_ID, IM.COMPANY_ID, IM.MODEL
    </sql>

    <select id="search.group.year.model.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.group.year.model.list.lov.sql-select" />
            <include refid="search.group.year.model.list.lov.sql-where" />
    </select>

    <select id="search.group.year.model.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.group.year.model.list.lov.sql-select" />
            <include refid="search.group.year.model.list.lov.sql-where" />
        ) TOT
    </select>
    
    
   <sql id="search.work.model.list.lov.sql-select">
        SELECT CIM.CAR_TYPE AS VALUE
					      ,CB_COMMON_STANDARD_PKG.CB_FIND_SMALL_NAME_1(CIM.ORG_ID
					                                                  ,CIM.COMPANY_ID
					                                                  ,'CMM'
					                                                  ,'MODEL'
					                                                  ,CIM.CAR_TYPE
					                                                  ,'LABEL') AS LABEL
					      ,CIM.ITEM_NAME AS ITEMNAME
					      ,MAX(CIM.ITEM_CODE) AS ITEMCODE
			  FROM CB_ITEM_MASTER CIM
					      ,CB_ROUTING_CONTROL RC
					      ,CB_EQUIPMENT_MASTER EM
    </sql>

    <sql id="search.work.model.list.lov.sql-where">
			 WHERE CIM.ORG_ID = RC.ORG_ID
			   AND CIM.COMPANY_ID = RC.COMPANY_ID
			   AND CIM.ITEM_CODE = RC.ITEM_CODE
			   AND RC.ORG_ID = EM.ORG_ID
			   AND RC.COMPANY_ID = EM.COMPANY_ID
			   AND RC.ROUTING_ID = EM.ROUTING_ID
			   AND RC.ITEM_CODE = EM.ITEM_CODE
			   AND EM.USE_YN = 'Y'
			   AND EM.ORG_ID = #ORGID#
			   AND EM.COMPANY_ID = #COMPANYID#
        <isNotEmpty property="WORKCENTERCODE" prepend="AND">
          EM.WORK_CENTER_CODE = #WORKCENTERCODE#
        </isNotEmpty>
        <isNotEmpty property="OUTORDERGUBUN" prepend="AND">
            CIM.ITEM_CODE IN (SELECT RC.ITEM_CODE
                                    FROM CB_ROUTING_CONTROL RC
                                   WHERE RC.ORG_ID = CIM.ORG_ID
                                     AND RC.COMPANY_ID = CIM.COMPANY_ID
                                     AND RC.ITEM_CODE = CIM.ITEM_CODE
                                     AND TRUNC(SYSDATE, 'DD') BETWEEN RC.EFFECTIVE_START_DATE AND RC.EFFECTIVE_END_DATE
                                     AND RC.OUTSIDE_ORDER_GUBUN = 'Y'
                                     AND RC.ROUTING_NO IN (SELECT SC.SMALL_CODE
                                                                       FROM CB_SMALL_CODE SC
                                                                      WHERE SC.ORG_ID = RC.ORG_ID
                                                                        AND SC.COMPANY_ID = RC.COMPANY_ID
                                                                        AND SC.BIG_CODE = 'MFG'
                                                                        AND SC.MIDDLE_CODE = 'ROUTING_NAME'
                                                                        AND SC.ATTRIBUTE1 = '08'))
        </isNotEmpty>
        <isNotEmpty property="keyword">
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                CB_COMMON_STANDARD_PKG.CB_FIND_SMALL_NAME_1(CIM.ORG_ID
												                                                            ,CIM.COMPANY_ID
												                                                            ,'CMM'
												                                                            ,'MODEL'
												                                                            ,CIM.CAR_TYPE
												                                                            ,'LABEL') LIKE '%' || #keyword# || '%'
            </isNotEqual>
        </isNotEmpty>
			   AND SYSDATE BETWEEN CIM.EFFECTIVE_START_DATE AND CIM.EFFECTIVE_END_DATE
			GROUP BY CIM.ORG_ID
			        ,CIM.COMPANY_ID
			        ,CIM.CAR_TYPE
			        ,ITEM_NAME
    </sql>

    <select id="search.work.model.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
        SELECT VALUE
                ,LABEL
                ,ITEMNAME
                ,ITEMCODE
                ,(SELECT ORDER_NAME
                   FROM CB_ITEM_MASTER IM
                  WHERE IM.ITEM_CODE = A.ITEMCODE) AS ORDERNAME
          FROM (
            <include refid="search.work.model.list.lov.sql-select" />
            <include refid="search.work.model.list.lov.sql-where" />
            ) A
    </select>

    <select id="search.work.model.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
		        SELECT VALUE
		                ,LABEL
		                ,ITEMNAME
		                ,ITEMCODE
		                ,(SELECT ORDER_NAME
		                   FROM CB_ITEM_MASTER IM
		                  WHERE IM.ITEM_CODE = A.ITEMCODE) AS ORDERNAME
		          FROM (
		            <include refid="search.work.model.list.lov.sql-select" />
		            <include refid="search.work.model.list.lov.sql-where" />
		            ) A
        ) TOT
    </select>
    
    
   <sql id="search.work.itemstandardd.list.lov.sql-select">
        SELECT CIM.CAR_TYPE AS CARTYPE
					      ,CB_COMMON_STANDARD_PKG.CB_FIND_SMALL_NAME_1(CIM.ORG_ID
					                                                  ,CIM.COMPANY_ID
					                                                  ,'CMM'
					                                                  ,'MODEL'
					                                                  ,CIM.CAR_TYPE
					                                                  ,'LABEL') AS CARTYPENAME
					      ,CIM.ITEM_STANDARD_DETAIL AS ITEMSTANDARDDETAIL
					      ,MAX(CIM.ITEM_CODE) AS ITEMCODE
					      ,CIM.ITEM_NAME AS ITEMNAME
			  FROM CB_ITEM_MASTER CIM
					      ,CB_ROUTING_CONTROL RC
					      ,CB_EQUIPMENT_MASTER EM
    </sql>

    <sql id="search.work.itemstandardd.list.lov.sql-where">
			 WHERE CIM.ORG_ID = RC.ORG_ID
			   AND CIM.COMPANY_ID = RC.COMPANY_ID
			   AND CIM.ITEM_CODE = RC.ITEM_CODE
			   AND RC.ORG_ID = EM.ORG_ID
			   AND RC.COMPANY_ID = EM.COMPANY_ID
			   AND RC.ROUTING_ID = EM.ROUTING_ID
			   AND RC.ROUTING_ID = EM.ROUTING_ID
			   AND RC.ITEM_CODE = EM.ITEM_CODE
			   AND EM.USE_YN = 'Y'
         AND EM.ORG_ID = #ORGID#
         AND EM.COMPANY_ID = #COMPANYID#
         AND CIM.CAR_TYPE = #MODEL#
        <isNotEmpty property="WORKCENTERCODE" prepend="AND">
          EM.WORK_CENTER_CODE = #WORKCENTERCODE#
        </isNotEmpty>
        <isNotEmpty property="OUTORDERGUBUN" prepend="AND">
            CIM.ITEM_CODE IN (SELECT RC.ITEM_CODE
                                    FROM CB_ROUTING_CONTROL RC
                                   WHERE RC.ORG_ID = CIM.ORG_ID
                                     AND RC.COMPANY_ID = CIM.COMPANY_ID
                                     AND RC.ITEM_CODE = CIM.ITEM_CODE
                                     AND TRUNC(SYSDATE, 'DD') BETWEEN RC.EFFECTIVE_START_DATE AND RC.EFFECTIVE_END_DATE
                                     AND RC.OUTSIDE_ORDER_GUBUN = 'Y'
                                     AND RC.ROUTING_NO IN (SELECT SC.SMALL_CODE
                                                                       FROM CB_SMALL_CODE SC
                                                                      WHERE SC.ORG_ID = RC.ORG_ID
                                                                        AND SC.COMPANY_ID = RC.COMPANY_ID
                                                                        AND SC.BIG_CODE = 'MFG'
                                                                        AND SC.MIDDLE_CODE = 'ROUTING_NAME'
                                                                        AND SC.ATTRIBUTE1 = '08'))
        </isNotEmpty>
        <isNotEmpty property="keyword">
            <isNotEqual property="keyword" compareValue="%" prepend="AND">
                CIM.ITEM_STANDARD_DETAIL LIKE '%' || #keyword# || '%'
            </isNotEqual>
        </isNotEmpty>
         AND SYSDATE BETWEEN CIM.EFFECTIVE_START_DATE AND CIM.EFFECTIVE_END_DATE
			GROUP BY CIM.ORG_ID
			        ,CIM.COMPANY_ID
			        ,CIM.CAR_TYPE
			        ,CIM.ITEM_STANDARD_DETAIL
			        ,ITEM_NAME
    </sql>

    <select id="search.work.itemstandardd.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
        SELECT CARTYPE
                ,CARTYPENAME
                ,ITEMSTANDARDDETAIL
                ,ITEMCODE
                ,ITEMNAME
                ,(SELECT ORDER_NAME
                   FROM CB_ITEM_MASTER IM
                  WHERE IM.ITEM_CODE = A.ITEMCODE) AS ORDERNAME
          FROM (
            <include refid="search.work.itemstandardd.list.lov.sql-select" />
            <include refid="search.work.itemstandardd.list.lov.sql-where" />
          ) A
    </select>

    <select id="search.work.itemstandardd.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
		        SELECT CARTYPE
		                ,CARTYPENAME
		                ,ITEMSTANDARDDETAIL
		                ,ITEMCODE
		                ,ITEMNAME
		                ,(SELECT ORDER_NAME
		                   FROM CB_ITEM_MASTER IM
		                  WHERE IM.ITEM_CODE = A.ITEMCODE) AS ORDERNAME
		          FROM (
		            <include refid="search.work.itemstandardd.list.lov.sql-select" />
		            <include refid="search.work.itemstandardd.list.lov.sql-where" />
		          ) A
        ) TOT
    </select>
    
    
    <sql id="search.model.group.list.lov.sql-select">
      SELECT NVL(SC.ATTRIBUTE2,SC.SMALL_NAME) AS LABEL
			  FROM CB_SMALL_CODE SC
			 WHERE SC.BIG_CODE = 'CMM'
			   AND SC.MIDDLE_CODE = 'MODEL'
         AND SC.ORG_ID = #ORGID#
         AND SC.COMPANY_ID = #COMPANYID#
        <isNotEmpty property="keyword" >
          <isNotEqual property="keyword" compareValue="%" prepend="AND">
              NVL(SC.ATTRIBUTE2,SC.SMALL_NAME) LIKE #keyword# || '%'
          </isNotEqual>
        </isNotEmpty>
			 GROUP BY NVL(SC.ATTRIBUTE2,SC.SMALL_NAME)
    </sql>

    <select id="search.model.group.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.model.group.list.lov.sql-select" />
    </select>

    <select id="search.model.group.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.model.group.list.lov.sql-select" />
        ) TOT
    </select>
    
    
    <sql id="search.sales.customer.list.lov.sql-select">
    <![CDATA[
    SELECT RANK() OVER(ORDER BY (SELECT CC.CUSTOMER_NAME
								                               FROM CB_CUSTOMER CC
								                              WHERE CC.ORG_ID = TH.ORG_ID
								                                AND CC.COMPANY_ID = TH.COMPANY_ID
								                                AND CC.CUSTOMER_CODE = TH.CUSTOMER_CODE)) AS RN
				      ,TH.CUSTOMER_CODE AS VALUE
				      ,(SELECT CC.CUSTOMER_NAME
				          FROM CB_CUSTOMER CC
				         WHERE CC.ORG_ID = TH.ORG_ID
				           AND CC.COMPANY_ID = TH.COMPANY_ID
				           AND CC.CUSTOMER_CODE = TH.CUSTOMER_CODE) AS LABEL
		  FROM CB_TRADE_H TH
				      ,CB_TRADE_D TD
				      ,CB_ITEM_MASTER IM
				      ,(SELECT #ORGID# AS ORG_ID
				              ,#COMPANYID# AS COMPANY_ID
				              ,TRUNC(TO_DATE(#SEARCHYEAR#, 'YYYY'), 'YYYY') AS SEARCH_FROM
				              ,(ADD_MONTHS(TRUNC(TO_DATE(#SEARCHYEAR#, 'YYYY'), 'YYYY'), 12) -1) AS SEARCH_TO
				          FROM DUAL) TMP
    ]]>
    </sql>

    <sql id="search.sales.customer.list.lov.sql-where">
		 WHERE TH.ORG_ID = TD.ORG_ID
		   AND TH.COMPANY_ID = TD.COMPANY_ID
		   AND TH.TRADE_NO = TD.TRADE_NO
		   AND TD.ORG_ID = IM.ORG_ID
		   AND TD.COMPANY_ID = IM.COMPANY_ID
		   AND TD.ITEM_CODE = IM.ITEM_CODE
		   AND TH.ORG_ID = TMP.ORG_ID
		   AND TH.COMPANY_ID = TMP.COMPANY_ID
		   AND TH.TRADE_DATE BETWEEN TMP.SEARCH_FROM AND TMP.SEARCH_TO
		 GROUP BY TH.ORG_ID, TH.COMPANY_ID, TH.CUSTOMER_CODE
    </sql>

    <select id="search.sales.customer.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.sales.customer.list.lov.sql-select" />
            <include refid="search.sales.customer.list.lov.sql-where" />
    </select>

    <select id="search.sales.customer.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.sales.customer.list.lov.sql-select" />
            <include refid="search.sales.customer.list.lov.sql-where" />
        ) TOT
    </select>
    
    
    <sql id="search.monthly.close.list.lov.sql-select">
    <![CDATA[
    SELECT (CASE WHEN MAX(MC.OM_CLOSE) = 'Y' THEN
				               'Y'
				             ELSE
				               'N'
				             END) AS OMCLOSE
				      ,(CASE WHEN MAX(MC.PM_CLOSE) = 'Y' THEN
				               'Y'
				             ELSE
				               'N'
				             END) AS PMCLOSE
				      ,(CASE WHEN MAX(MC.MFG_CLOSE) = 'Y' THEN
				               'Y'
				             ELSE
				               'N'
				             END) AS MFGCLOSE
				      ,(CASE WHEN MAX(MC.OP_CLOSE) = 'Y' THEN
				               'Y'
				             ELSE
				               'N'
				             END) AS OPCLOSE
	  FROM CB_MONTH_CLOSE MC
	      ,(SELECT #ORGID# AS ORG_ID
	              ,#COMPANYID# AS COMPANY_ID
	              ,#SEARCHDATE# AS SEARCH_DATE
	          FROM DUAL) TMP
    ]]>
    </sql>

    <sql id="search.monthly.close.list.lov.sql-where">
    WHERE MC.ORG_ID = TMP.ORG_ID
		   AND MC.COMPANY_ID = TMP.COMPANY_ID
		   AND MC.STANDARD_MONTH = (CASE WHEN LENGTH(TMP.SEARCH_DATE) = 4 THEN
											                                   TRUNC(TO_DATE(TMP.SEARCH_DATE, 'YYYY'), 'MM')
											                                 WHEN LENGTH(TMP.SEARCH_DATE) = 7 THEN
											                                   TRUNC(TO_DATE(TMP.SEARCH_DATE, 'YYYY-MM'), 'MM')
											                                 WHEN LENGTH(TMP.SEARCH_DATE) = 10 THEN
											                                   TRUNC(TO_DATE(TMP.SEARCH_DATE, 'YYYY-MM-DD'), 'MM')
											                                 ELSE
											                                   NULL
											                                 END)
    </sql>

    <select id="search.monthly.close.list.lov.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.monthly.close.list.lov.sql-select" />
            <include refid="search.monthly.close.list.lov.sql-where" />
    </select>

    <select id="search.monthly.close.list.lov.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.monthly.close.list.lov.sql-select" />
            <include refid="search.monthly.close.list.lov.sql-where" />
        ) TOT
    </select>
    
    
    <sql id="search.mobile.button.list.sql-select">
    <![CDATA[
    SELECT RANK() OVER(ORDER BY SORT_ORDER) AS RN
			      ,BUTTON_NAME AS LABEL
			      ,MENU_NAME_ADD AS NAMEADD
			      ,MENU_IMG AS MENUSRC
			      ,MENU_URL AS MENUURL
            ,MENU_TYPE AS MENUTYPE
		  FROM CB_MOBILE_MENU_INFO_V
    ]]>
    </sql>

    <sql id="search.mobile.button.list.sql-where">
    WHERE 1=1
    </sql>

    <select id="search.mobile.button.list.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.mobile.button.list.sql-select" />
            <include refid="search.mobile.button.list.sql-where" />
    </select>

    <select id="search.mobile.button.list.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.mobile.button.list.sql-select" />
            <include refid="search.mobile.button.list.sql-where" />
        ) TOT
    </select>
    
    
    <sql id="search.shipping.excelupload.solist.sql-select">
    <![CDATA[
	     SELECT SO_NO
			   FROM CB_SALES_ORDER_D SD
			  WHERE SD.ORG_ID = #ORGID#
			    AND SD.COMPANY_ID = #COMPANYID#
			    AND SD.ITEM_CODE = #ITEMCODE#
			    AND SD.COMPLETE_YN = 'N'
    ]]>
    </sql>


    <select id="search.shipping.excelupload.solist.select" parameterClass="java.util.Map"
        resultClass="java.util.HashMap">
            <include refid="search.shipping.excelupload.solist.sql-select" />
    </select>

    <select id="search.shipping.excelupload.solist.count" parameterClass="java.util.Map"
        resultClass="java.lang.Integer">
        SELECT COUNT(*) FROM (
            <include refid="search.shipping.excelupload.solist.sql-select" />
        ) TOT
    </select>
</sqlMap>